
BarInABox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bc8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406bc8  00406bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00406bd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000bb78  204009b8  00407588  000209b8  2**2
                  ALLOC
  4 .stack        00002000  2040c530  00413100  000209b8  2**0
                  ALLOC
  5 .heap         00000200  2040e530  00415100  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002375f  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000044ab  00000000  00000000  0004419e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009dc1  00000000  00000000  00048649  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f90  00000000  00000000  0005240a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001170  00000000  00000000  0005339a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a174  00000000  00000000  0005450a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011c7c  00000000  00000000  0005e67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009ce46  00000000  00000000  000702fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000032e4  00000000  00000000  0010d140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 e5 40 20 c9 0d 40 00 c7 0d 40 00 c7 0d 40 00     0.@ ..@...@...@.
  400010:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 11 40 00 c7 0d 40 00 00 00 00 00 41 12 40 00     ..@...@.....A.@.
  40003c:	a9 12 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40004c:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40005c:	c7 0d 40 00 c7 0d 40 00 00 00 00 00 ed 0a 40 00     ..@...@.......@.
  40006c:	01 0b 40 00 15 0b 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40007c:	c7 0d 40 00 29 0b 40 00 3d 0b 40 00 c7 0d 40 00     ..@.).@.=.@...@.
  40008c:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40009c:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  4000ac:	c7 0d 40 00 c7 0d 40 00 f1 06 40 00 c7 0d 40 00     ..@...@...@...@.
  4000bc:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  4000cc:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  4000dc:	c7 0d 40 00 05 07 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  4000ec:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  4000fc:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40010c:	c7 0d 40 00 c7 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ......@...@...@.
  40012c:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40013c:	c7 0d 40 00 c7 0d 40 00 c7 0d 40 00 c7 0d 40 00     ..@...@...@...@.
  40014c:	c7 0d 40 00 c7 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00406bd0 	.word	0x00406bd0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406bd0 	.word	0x00406bd0
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00406bd0 	.word	0x00406bd0
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40020e:	480d      	ldr	r0, [pc, #52]	; (400244 <sysclk_init+0x70>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	07270e00 	.word	0x07270e00
  40021c:	00400f9d 	.word	0x00400f9d
  400220:	00400bed 	.word	0x00400bed
  400224:	00400c41 	.word	0x00400c41
  400228:	00400c51 	.word	0x00400c51
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400c61 	.word	0x00400c61
  400238:	00400b51 	.word	0x00400b51
  40023c:	00400b89 	.word	0x00400b89
  400240:	00400e91 	.word	0x00400e91
  400244:	11e1a300 	.word	0x11e1a300

00400248 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  400248:	2a00      	cmp	r2, #0
  40024a:	d054      	beq.n	4002f6 <usart_serial_write_packet+0xae>
{
  40024c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400250:	4692      	mov	sl, r2
  400252:	4606      	mov	r6, r0
  400254:	460f      	mov	r7, r1
  400256:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400258:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400314 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  40025c:	4d27      	ldr	r5, [pc, #156]	; (4002fc <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40025e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400318 <usart_serial_write_packet+0xd0>
  400262:	e006      	b.n	400272 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400264:	4621      	mov	r1, r4
  400266:	4640      	mov	r0, r8
  400268:	47a8      	blx	r5
  40026a:	2800      	cmp	r0, #0
  40026c:	d1fa      	bne.n	400264 <usart_serial_write_packet+0x1c>
	while (len) {
  40026e:	45ba      	cmp	sl, r7
  400270:	d03e      	beq.n	4002f0 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400272:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  400276:	4546      	cmp	r6, r8
  400278:	d0f4      	beq.n	400264 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40027a:	454e      	cmp	r6, r9
  40027c:	d016      	beq.n	4002ac <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40027e:	4b20      	ldr	r3, [pc, #128]	; (400300 <usart_serial_write_packet+0xb8>)
  400280:	429e      	cmp	r6, r3
  400282:	d019      	beq.n	4002b8 <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400284:	4b1f      	ldr	r3, [pc, #124]	; (400304 <usart_serial_write_packet+0xbc>)
  400286:	429e      	cmp	r6, r3
  400288:	d01c      	beq.n	4002c4 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40028a:	4b1f      	ldr	r3, [pc, #124]	; (400308 <usart_serial_write_packet+0xc0>)
  40028c:	429e      	cmp	r6, r3
  40028e:	d01f      	beq.n	4002d0 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400290:	4b1e      	ldr	r3, [pc, #120]	; (40030c <usart_serial_write_packet+0xc4>)
  400292:	429e      	cmp	r6, r3
  400294:	d024      	beq.n	4002e0 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400296:	4b1e      	ldr	r3, [pc, #120]	; (400310 <usart_serial_write_packet+0xc8>)
  400298:	429e      	cmp	r6, r3
  40029a:	d1e8      	bne.n	40026e <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  40029c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 40031c <usart_serial_write_packet+0xd4>
  4002a0:	4621      	mov	r1, r4
  4002a2:	481b      	ldr	r0, [pc, #108]	; (400310 <usart_serial_write_packet+0xc8>)
  4002a4:	47d8      	blx	fp
  4002a6:	2800      	cmp	r0, #0
  4002a8:	d1fa      	bne.n	4002a0 <usart_serial_write_packet+0x58>
  4002aa:	e7e0      	b.n	40026e <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002ac:	4621      	mov	r1, r4
  4002ae:	4648      	mov	r0, r9
  4002b0:	47a8      	blx	r5
  4002b2:	2800      	cmp	r0, #0
  4002b4:	d1fa      	bne.n	4002ac <usart_serial_write_packet+0x64>
  4002b6:	e7da      	b.n	40026e <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002b8:	4621      	mov	r1, r4
  4002ba:	4811      	ldr	r0, [pc, #68]	; (400300 <usart_serial_write_packet+0xb8>)
  4002bc:	47a8      	blx	r5
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x70>
  4002c2:	e7d4      	b.n	40026e <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002c4:	4621      	mov	r1, r4
  4002c6:	480f      	ldr	r0, [pc, #60]	; (400304 <usart_serial_write_packet+0xbc>)
  4002c8:	47a8      	blx	r5
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d1fa      	bne.n	4002c4 <usart_serial_write_packet+0x7c>
  4002ce:	e7ce      	b.n	40026e <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002d0:	f8df b048 	ldr.w	fp, [pc, #72]	; 40031c <usart_serial_write_packet+0xd4>
  4002d4:	4621      	mov	r1, r4
  4002d6:	480c      	ldr	r0, [pc, #48]	; (400308 <usart_serial_write_packet+0xc0>)
  4002d8:	47d8      	blx	fp
  4002da:	2800      	cmp	r0, #0
  4002dc:	d1fa      	bne.n	4002d4 <usart_serial_write_packet+0x8c>
  4002de:	e7c6      	b.n	40026e <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002e0:	f8df b038 	ldr.w	fp, [pc, #56]	; 40031c <usart_serial_write_packet+0xd4>
  4002e4:	4621      	mov	r1, r4
  4002e6:	4809      	ldr	r0, [pc, #36]	; (40030c <usart_serial_write_packet+0xc4>)
  4002e8:	47d8      	blx	fp
  4002ea:	2800      	cmp	r0, #0
  4002ec:	d1fa      	bne.n	4002e4 <usart_serial_write_packet+0x9c>
  4002ee:	e7be      	b.n	40026e <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002f0:	2000      	movs	r0, #0
  4002f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002f6:	2000      	movs	r0, #0
  4002f8:	4770      	bx	lr
  4002fa:	bf00      	nop
  4002fc:	00400c91 	.word	0x00400c91
  400300:	400e1a00 	.word	0x400e1a00
  400304:	400e1c00 	.word	0x400e1c00
  400308:	40024000 	.word	0x40024000
  40030c:	40028000 	.word	0x40028000
  400310:	4002c000 	.word	0x4002c000
  400314:	400e0800 	.word	0x400e0800
  400318:	400e0a00 	.word	0x400e0a00
  40031c:	00400d99 	.word	0x00400d99

00400320 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400324:	b980      	cbnz	r0, 400348 <_read+0x28>
  400326:	460c      	mov	r4, r1
  400328:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40032a:	2a00      	cmp	r2, #0
  40032c:	dd0f      	ble.n	40034e <_read+0x2e>
  40032e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400330:	4e08      	ldr	r6, [pc, #32]	; (400354 <_read+0x34>)
  400332:	4d09      	ldr	r5, [pc, #36]	; (400358 <_read+0x38>)
  400334:	6830      	ldr	r0, [r6, #0]
  400336:	4621      	mov	r1, r4
  400338:	682b      	ldr	r3, [r5, #0]
  40033a:	4798      	blx	r3
		ptr++;
  40033c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40033e:	42bc      	cmp	r4, r7
  400340:	d1f8      	bne.n	400334 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400342:	4640      	mov	r0, r8
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400348:	f04f 38ff 	mov.w	r8, #4294967295
  40034c:	e7f9      	b.n	400342 <_read+0x22>
	for (; len > 0; --len) {
  40034e:	4680      	mov	r8, r0
  400350:	e7f7      	b.n	400342 <_read+0x22>
  400352:	bf00      	nop
  400354:	2040c3d4 	.word	0x2040c3d4
  400358:	2040c3cc 	.word	0x2040c3cc

0040035c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40035c:	3801      	subs	r0, #1
  40035e:	2802      	cmp	r0, #2
  400360:	d815      	bhi.n	40038e <_write+0x32>
{
  400362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400366:	460e      	mov	r6, r1
  400368:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40036a:	b19a      	cbz	r2, 400394 <_write+0x38>
  40036c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40036e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4003a8 <_write+0x4c>
  400372:	4f0c      	ldr	r7, [pc, #48]	; (4003a4 <_write+0x48>)
  400374:	f8d8 0000 	ldr.w	r0, [r8]
  400378:	f815 1b01 	ldrb.w	r1, [r5], #1
  40037c:	683b      	ldr	r3, [r7, #0]
  40037e:	4798      	blx	r3
  400380:	2800      	cmp	r0, #0
  400382:	db0a      	blt.n	40039a <_write+0x3e>
  400384:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400386:	3c01      	subs	r4, #1
  400388:	d1f4      	bne.n	400374 <_write+0x18>
  40038a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40038e:	f04f 30ff 	mov.w	r0, #4294967295
  400392:	4770      	bx	lr
	for (; len != 0; --len) {
  400394:	4610      	mov	r0, r2
  400396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40039a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40039e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003a2:	bf00      	nop
  4003a4:	2040c3d0 	.word	0x2040c3d0
  4003a8:	2040c3d4 	.word	0x2040c3d4

004003ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4003ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4003b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4003b4:	4b9e      	ldr	r3, [pc, #632]	; (400630 <board_init+0x284>)
  4003b6:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4003b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003bc:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4003c0:	4b9c      	ldr	r3, [pc, #624]	; (400634 <board_init+0x288>)
  4003c2:	2200      	movs	r2, #0
  4003c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4003c8:	695a      	ldr	r2, [r3, #20]
  4003ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003d4:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003d8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003dc:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003e0:	f007 0007 	and.w	r0, r7, #7
  4003e4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003e6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003ea:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003ee:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003f2:	f3bf 8f4f 	dsb	sy
  4003f6:	f04f 34ff 	mov.w	r4, #4294967295
  4003fa:	fa04 fc00 	lsl.w	ip, r4, r0
  4003fe:	fa06 f000 	lsl.w	r0, r6, r0
  400402:	fa04 f40e 	lsl.w	r4, r4, lr
  400406:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40040a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40040c:	463a      	mov	r2, r7
  40040e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400410:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400414:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400418:	3a01      	subs	r2, #1
  40041a:	4423      	add	r3, r4
  40041c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400420:	d1f6      	bne.n	400410 <board_init+0x64>
        } while(sets--);
  400422:	3e01      	subs	r6, #1
  400424:	4460      	add	r0, ip
  400426:	f1b6 3fff 	cmp.w	r6, #4294967295
  40042a:	d1ef      	bne.n	40040c <board_init+0x60>
  40042c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400430:	4b80      	ldr	r3, [pc, #512]	; (400634 <board_init+0x288>)
  400432:	695a      	ldr	r2, [r3, #20]
  400434:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400438:	615a      	str	r2, [r3, #20]
  40043a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40043e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400442:	4a7d      	ldr	r2, [pc, #500]	; (400638 <board_init+0x28c>)
  400444:	497d      	ldr	r1, [pc, #500]	; (40063c <board_init+0x290>)
  400446:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400448:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40044c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40044e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400452:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400456:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40045a:	f022 0201 	bic.w	r2, r2, #1
  40045e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400462:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400466:	f022 0201 	bic.w	r2, r2, #1
  40046a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40046e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400472:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400476:	200a      	movs	r0, #10
  400478:	4c71      	ldr	r4, [pc, #452]	; (400640 <board_init+0x294>)
  40047a:	47a0      	blx	r4
  40047c:	200b      	movs	r0, #11
  40047e:	47a0      	blx	r4
  400480:	200c      	movs	r0, #12
  400482:	47a0      	blx	r4
  400484:	2010      	movs	r0, #16
  400486:	47a0      	blx	r4
  400488:	2011      	movs	r0, #17
  40048a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40048c:	4e6d      	ldr	r6, [pc, #436]	; (400644 <board_init+0x298>)
  40048e:	f44f 7880 	mov.w	r8, #256	; 0x100
  400492:	f8c6 8010 	str.w	r8, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400496:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40049a:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40049e:	4c6a      	ldr	r4, [pc, #424]	; (400648 <board_init+0x29c>)
  4004a0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4004a4:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004a6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4004aa:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004ac:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004b0:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4004b2:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4004b4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4004b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4004ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4004be:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4004c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4004c6:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4004c8:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4004cc:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004d0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4004d8:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004da:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004de:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004e6:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4004e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004ec:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ee:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4004f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004f4:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f6:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004f8:	4a54      	ldr	r2, [pc, #336]	; (40064c <board_init+0x2a0>)
  4004fa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004fe:	f043 0310 	orr.w	r3, r3, #16
  400502:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400506:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  40050a:	2310      	movs	r3, #16
  40050c:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40050e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400512:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400514:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400516:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40051a:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40051c:	4319      	orrs	r1, r3
  40051e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400520:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400522:	4319      	orrs	r1, r3
  400524:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400526:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400528:	2208      	movs	r2, #8
  40052a:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40052c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400530:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400532:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400534:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400538:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40053a:	f021 0108 	bic.w	r1, r1, #8
  40053e:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400540:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400542:	f021 0108 	bic.w	r1, r1, #8
  400546:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400548:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  40054a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40054c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400550:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400552:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400554:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400558:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40055a:	f022 0210 	bic.w	r2, r2, #16
  40055e:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400560:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400562:	f022 0210 	bic.w	r2, r2, #16
  400566:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400568:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40056a:	2300      	movs	r3, #0
  40056c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400570:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400574:	4630      	mov	r0, r6
  400576:	4f36      	ldr	r7, [pc, #216]	; (400650 <board_init+0x2a4>)
  400578:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40057a:	2300      	movs	r3, #0
  40057c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400580:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400584:	4630      	mov	r0, r6
  400586:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400588:	2301      	movs	r3, #1
  40058a:	22ff      	movs	r2, #255	; 0xff
  40058c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400590:	4630      	mov	r0, r6
  400592:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400594:	2301      	movs	r3, #1
  400596:	223f      	movs	r2, #63	; 0x3f
  400598:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40059c:	482d      	ldr	r0, [pc, #180]	; (400654 <board_init+0x2a8>)
  40059e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4005a0:	2301      	movs	r3, #1
  4005a2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4005a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005aa:	4620      	mov	r0, r4
  4005ac:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4005ae:	2301      	movs	r3, #1
  4005b0:	4642      	mov	r2, r8
  4005b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005b6:	4630      	mov	r0, r6
  4005b8:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4005ba:	2301      	movs	r3, #1
  4005bc:	462a      	mov	r2, r5
  4005be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005c2:	4630      	mov	r0, r6
  4005c4:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4005c6:	2301      	movs	r3, #1
  4005c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005d0:	4821      	ldr	r0, [pc, #132]	; (400658 <board_init+0x2ac>)
  4005d2:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4005d4:	2300      	movs	r3, #0
  4005d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4005da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005de:	4630      	mov	r0, r6
  4005e0:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4005e6:	4630      	mov	r0, r6
  4005e8:	4b1c      	ldr	r3, [pc, #112]	; (40065c <board_init+0x2b0>)
  4005ea:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  4005ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005f0:	2074      	movs	r0, #116	; 0x74
  4005f2:	4c1b      	ldr	r4, [pc, #108]	; (400660 <board_init+0x2b4>)
  4005f4:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  4005f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005fa:	2075      	movs	r0, #117	; 0x75
  4005fc:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  4005fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400602:	2076      	movs	r0, #118	; 0x76
  400604:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400606:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40060a:	207b      	movs	r0, #123	; 0x7b
  40060c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  40060e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400612:	2018      	movs	r0, #24
  400614:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400616:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40061a:	2006      	movs	r0, #6
  40061c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  40061e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400622:	2053      	movs	r0, #83	; 0x53
  400624:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400626:	2053      	movs	r0, #83	; 0x53
  400628:	4b0e      	ldr	r3, [pc, #56]	; (400664 <board_init+0x2b8>)
  40062a:	4798      	blx	r3
  40062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400630:	400e1850 	.word	0x400e1850
  400634:	e000ed00 	.word	0xe000ed00
  400638:	400e0c00 	.word	0x400e0c00
  40063c:	5a00080c 	.word	0x5a00080c
  400640:	00400c71 	.word	0x00400c71
  400644:	400e1200 	.word	0x400e1200
  400648:	400e0e00 	.word	0x400e0e00
  40064c:	40088000 	.word	0x40088000
  400650:	00400811 	.word	0x00400811
  400654:	400e1600 	.word	0x400e1600
  400658:	400e1400 	.word	0x400e1400
  40065c:	00400719 	.word	0x00400719
  400660:	004008fd 	.word	0x004008fd
  400664:	004008e1 	.word	0x004008e1

00400668 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400668:	b570      	push	{r4, r5, r6, lr}
  40066a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40066c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40066e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400670:	4013      	ands	r3, r2
  400672:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400674:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400676:	4e1c      	ldr	r6, [pc, #112]	; (4006e8 <afec_process_callback+0x80>)
  400678:	4d1c      	ldr	r5, [pc, #112]	; (4006ec <afec_process_callback+0x84>)
  40067a:	42a8      	cmp	r0, r5
  40067c:	bf14      	ite	ne
  40067e:	2000      	movne	r0, #0
  400680:	2001      	moveq	r0, #1
  400682:	0105      	lsls	r5, r0, #4
  400684:	e00b      	b.n	40069e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400686:	2c0e      	cmp	r4, #14
  400688:	d81e      	bhi.n	4006c8 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40068a:	9a01      	ldr	r2, [sp, #4]
  40068c:	f104 010c 	add.w	r1, r4, #12
  400690:	2301      	movs	r3, #1
  400692:	408b      	lsls	r3, r1
  400694:	4213      	tst	r3, r2
  400696:	d110      	bne.n	4006ba <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400698:	3401      	adds	r4, #1
  40069a:	2c10      	cmp	r4, #16
  40069c:	d022      	beq.n	4006e4 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40069e:	2c0b      	cmp	r4, #11
  4006a0:	d8f1      	bhi.n	400686 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4006a2:	9a01      	ldr	r2, [sp, #4]
  4006a4:	2301      	movs	r3, #1
  4006a6:	40a3      	lsls	r3, r4
  4006a8:	4213      	tst	r3, r2
  4006aa:	d0f5      	beq.n	400698 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006ac:	192b      	adds	r3, r5, r4
  4006ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4006b2:	2b00      	cmp	r3, #0
  4006b4:	d0f0      	beq.n	400698 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006b6:	4798      	blx	r3
  4006b8:	e7ee      	b.n	400698 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006ba:	192b      	adds	r3, r5, r4
  4006bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4006c0:	2b00      	cmp	r3, #0
  4006c2:	d0e9      	beq.n	400698 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006c4:	4798      	blx	r3
  4006c6:	e7e7      	b.n	400698 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4006c8:	9a01      	ldr	r2, [sp, #4]
  4006ca:	f104 010f 	add.w	r1, r4, #15
  4006ce:	2301      	movs	r3, #1
  4006d0:	408b      	lsls	r3, r1
  4006d2:	4213      	tst	r3, r2
  4006d4:	d0e0      	beq.n	400698 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006d6:	192b      	adds	r3, r5, r4
  4006d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4006dc:	2b00      	cmp	r3, #0
  4006de:	d0db      	beq.n	400698 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006e0:	4798      	blx	r3
  4006e2:	e7d9      	b.n	400698 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4006e4:	b002      	add	sp, #8
  4006e6:	bd70      	pop	{r4, r5, r6, pc}
  4006e8:	2040c3d8 	.word	0x2040c3d8
  4006ec:	40064000 	.word	0x40064000

004006f0 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006f0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006f2:	4802      	ldr	r0, [pc, #8]	; (4006fc <AFEC0_Handler+0xc>)
  4006f4:	4b02      	ldr	r3, [pc, #8]	; (400700 <AFEC0_Handler+0x10>)
  4006f6:	4798      	blx	r3
  4006f8:	bd08      	pop	{r3, pc}
  4006fa:	bf00      	nop
  4006fc:	4003c000 	.word	0x4003c000
  400700:	00400669 	.word	0x00400669

00400704 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400704:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400706:	4802      	ldr	r0, [pc, #8]	; (400710 <AFEC1_Handler+0xc>)
  400708:	4b02      	ldr	r3, [pc, #8]	; (400714 <AFEC1_Handler+0x10>)
  40070a:	4798      	blx	r3
  40070c:	bd08      	pop	{r3, pc}
  40070e:	bf00      	nop
  400710:	40064000 	.word	0x40064000
  400714:	00400669 	.word	0x00400669

00400718 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400718:	6301      	str	r1, [r0, #48]	; 0x30
  40071a:	4770      	bx	lr

0040071c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40071c:	6341      	str	r1, [r0, #52]	; 0x34
  40071e:	4770      	bx	lr

00400720 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400720:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400722:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400726:	d03a      	beq.n	40079e <pio_set_peripheral+0x7e>
  400728:	d813      	bhi.n	400752 <pio_set_peripheral+0x32>
  40072a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40072e:	d025      	beq.n	40077c <pio_set_peripheral+0x5c>
  400730:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400734:	d10a      	bne.n	40074c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400736:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400738:	4313      	orrs	r3, r2
  40073a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40073c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40073e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400740:	400b      	ands	r3, r1
  400742:	ea23 0302 	bic.w	r3, r3, r2
  400746:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400748:	6042      	str	r2, [r0, #4]
  40074a:	4770      	bx	lr
	switch (ul_type) {
  40074c:	2900      	cmp	r1, #0
  40074e:	d1fb      	bne.n	400748 <pio_set_peripheral+0x28>
  400750:	4770      	bx	lr
  400752:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400756:	d021      	beq.n	40079c <pio_set_peripheral+0x7c>
  400758:	d809      	bhi.n	40076e <pio_set_peripheral+0x4e>
  40075a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40075e:	d1f3      	bne.n	400748 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400760:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400762:	4313      	orrs	r3, r2
  400764:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400766:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400768:	4313      	orrs	r3, r2
  40076a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40076c:	e7ec      	b.n	400748 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40076e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400772:	d013      	beq.n	40079c <pio_set_peripheral+0x7c>
  400774:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400778:	d010      	beq.n	40079c <pio_set_peripheral+0x7c>
  40077a:	e7e5      	b.n	400748 <pio_set_peripheral+0x28>
{
  40077c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40077e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400780:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400782:	43d3      	mvns	r3, r2
  400784:	4021      	ands	r1, r4
  400786:	461c      	mov	r4, r3
  400788:	4019      	ands	r1, r3
  40078a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40078c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40078e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400790:	400b      	ands	r3, r1
  400792:	4023      	ands	r3, r4
  400794:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400796:	6042      	str	r2, [r0, #4]
}
  400798:	f85d 4b04 	ldr.w	r4, [sp], #4
  40079c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40079e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007a0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4007a2:	400b      	ands	r3, r1
  4007a4:	ea23 0302 	bic.w	r3, r3, r2
  4007a8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007ac:	4313      	orrs	r3, r2
  4007ae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007b0:	e7ca      	b.n	400748 <pio_set_peripheral+0x28>

004007b2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4007b2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4007b4:	f012 0f01 	tst.w	r2, #1
  4007b8:	d10d      	bne.n	4007d6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4007ba:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4007bc:	f012 0f0a 	tst.w	r2, #10
  4007c0:	d00b      	beq.n	4007da <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4007c2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4007c4:	f012 0f02 	tst.w	r2, #2
  4007c8:	d109      	bne.n	4007de <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4007ca:	f012 0f08 	tst.w	r2, #8
  4007ce:	d008      	beq.n	4007e2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4007d0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4007d4:	e005      	b.n	4007e2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4007d6:	6641      	str	r1, [r0, #100]	; 0x64
  4007d8:	e7f0      	b.n	4007bc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4007da:	6241      	str	r1, [r0, #36]	; 0x24
  4007dc:	e7f2      	b.n	4007c4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4007de:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4007e2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4007e4:	6001      	str	r1, [r0, #0]
  4007e6:	4770      	bx	lr

004007e8 <pio_set_output>:
{
  4007e8:	b410      	push	{r4}
  4007ea:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4007ec:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4007ee:	b94c      	cbnz	r4, 400804 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4007f0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4007f2:	b14b      	cbz	r3, 400808 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4007f4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4007f6:	b94a      	cbnz	r2, 40080c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4007f8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4007fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4007fc:	6001      	str	r1, [r0, #0]
}
  4007fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400802:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400804:	6641      	str	r1, [r0, #100]	; 0x64
  400806:	e7f4      	b.n	4007f2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400808:	6541      	str	r1, [r0, #84]	; 0x54
  40080a:	e7f4      	b.n	4007f6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40080c:	6301      	str	r1, [r0, #48]	; 0x30
  40080e:	e7f4      	b.n	4007fa <pio_set_output+0x12>

00400810 <pio_configure>:
{
  400810:	b570      	push	{r4, r5, r6, lr}
  400812:	b082      	sub	sp, #8
  400814:	4605      	mov	r5, r0
  400816:	4616      	mov	r6, r2
  400818:	461c      	mov	r4, r3
	switch (ul_type) {
  40081a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40081e:	d014      	beq.n	40084a <pio_configure+0x3a>
  400820:	d90a      	bls.n	400838 <pio_configure+0x28>
  400822:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400826:	d024      	beq.n	400872 <pio_configure+0x62>
  400828:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40082c:	d021      	beq.n	400872 <pio_configure+0x62>
  40082e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400832:	d017      	beq.n	400864 <pio_configure+0x54>
		return 0;
  400834:	2000      	movs	r0, #0
  400836:	e01a      	b.n	40086e <pio_configure+0x5e>
	switch (ul_type) {
  400838:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40083c:	d005      	beq.n	40084a <pio_configure+0x3a>
  40083e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400842:	d002      	beq.n	40084a <pio_configure+0x3a>
  400844:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400848:	d1f4      	bne.n	400834 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40084a:	4632      	mov	r2, r6
  40084c:	4628      	mov	r0, r5
  40084e:	4b11      	ldr	r3, [pc, #68]	; (400894 <pio_configure+0x84>)
  400850:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400852:	f014 0f01 	tst.w	r4, #1
  400856:	d102      	bne.n	40085e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400858:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40085a:	2001      	movs	r0, #1
  40085c:	e007      	b.n	40086e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40085e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400860:	2001      	movs	r0, #1
  400862:	e004      	b.n	40086e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400864:	461a      	mov	r2, r3
  400866:	4631      	mov	r1, r6
  400868:	4b0b      	ldr	r3, [pc, #44]	; (400898 <pio_configure+0x88>)
  40086a:	4798      	blx	r3
	return 1;
  40086c:	2001      	movs	r0, #1
}
  40086e:	b002      	add	sp, #8
  400870:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400872:	f004 0301 	and.w	r3, r4, #1
  400876:	9300      	str	r3, [sp, #0]
  400878:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40087c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400880:	bf14      	ite	ne
  400882:	2200      	movne	r2, #0
  400884:	2201      	moveq	r2, #1
  400886:	4631      	mov	r1, r6
  400888:	4628      	mov	r0, r5
  40088a:	4c04      	ldr	r4, [pc, #16]	; (40089c <pio_configure+0x8c>)
  40088c:	47a0      	blx	r4
	return 1;
  40088e:	2001      	movs	r0, #1
		break;
  400890:	e7ed      	b.n	40086e <pio_configure+0x5e>
  400892:	bf00      	nop
  400894:	00400721 	.word	0x00400721
  400898:	004007b3 	.word	0x004007b3
  40089c:	004007e9 	.word	0x004007e9

004008a0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4008a0:	f012 0f10 	tst.w	r2, #16
  4008a4:	d012      	beq.n	4008cc <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4008a6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4008aa:	f012 0f20 	tst.w	r2, #32
  4008ae:	d007      	beq.n	4008c0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4008b0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4008b4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4008b8:	d005      	beq.n	4008c6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4008ba:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4008be:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4008c0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4008c4:	e7f6      	b.n	4008b4 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4008c6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4008ca:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4008cc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4008d0:	4770      	bx	lr

004008d2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4008d2:	6401      	str	r1, [r0, #64]	; 0x40
  4008d4:	4770      	bx	lr

004008d6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4008d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4008d8:	4770      	bx	lr

004008da <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4008da:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4008dc:	4770      	bx	lr
	...

004008e0 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4008e0:	4b05      	ldr	r3, [pc, #20]	; (4008f8 <pio_set_pin_high+0x18>)
  4008e2:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4008e6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4008e8:	f000 001f 	and.w	r0, r0, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	fa02 f000 	lsl.w	r0, r2, r0
  4008f2:	6318      	str	r0, [r3, #48]	; 0x30
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop
  4008f8:	00200707 	.word	0x00200707

004008fc <pio_configure_pin>:
{
  4008fc:	b570      	push	{r4, r5, r6, lr}
  4008fe:	b082      	sub	sp, #8
  400900:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400902:	4c46      	ldr	r4, [pc, #280]	; (400a1c <pio_configure_pin+0x120>)
  400904:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  400908:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40090a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40090e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400912:	d059      	beq.n	4009c8 <pio_configure_pin+0xcc>
  400914:	d80a      	bhi.n	40092c <pio_configure_pin+0x30>
  400916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40091a:	d02f      	beq.n	40097c <pio_configure_pin+0x80>
  40091c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400920:	d03f      	beq.n	4009a2 <pio_configure_pin+0xa6>
  400922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400926:	d016      	beq.n	400956 <pio_configure_pin+0x5a>
		return 0;
  400928:	2000      	movs	r0, #0
  40092a:	e012      	b.n	400952 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  40092c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400930:	d05d      	beq.n	4009ee <pio_configure_pin+0xf2>
  400932:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400936:	d05a      	beq.n	4009ee <pio_configure_pin+0xf2>
  400938:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40093c:	d1f4      	bne.n	400928 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40093e:	f000 011f 	and.w	r1, r0, #31
  400942:	2601      	movs	r6, #1
  400944:	462a      	mov	r2, r5
  400946:	fa06 f101 	lsl.w	r1, r6, r1
  40094a:	4620      	mov	r0, r4
  40094c:	4b34      	ldr	r3, [pc, #208]	; (400a20 <pio_configure_pin+0x124>)
  40094e:	4798      	blx	r3
	return 1;
  400950:	4630      	mov	r0, r6
}
  400952:	b002      	add	sp, #8
  400954:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400956:	f000 001f 	and.w	r0, r0, #31
  40095a:	2601      	movs	r6, #1
  40095c:	4086      	lsls	r6, r0
  40095e:	4632      	mov	r2, r6
  400960:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400964:	4620      	mov	r0, r4
  400966:	4b2f      	ldr	r3, [pc, #188]	; (400a24 <pio_configure_pin+0x128>)
  400968:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40096a:	f015 0f01 	tst.w	r5, #1
  40096e:	d102      	bne.n	400976 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  400970:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400972:	2001      	movs	r0, #1
  400974:	e7ed      	b.n	400952 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400976:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400978:	2001      	movs	r0, #1
  40097a:	e7ea      	b.n	400952 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40097c:	f000 001f 	and.w	r0, r0, #31
  400980:	2601      	movs	r6, #1
  400982:	4086      	lsls	r6, r0
  400984:	4632      	mov	r2, r6
  400986:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40098a:	4620      	mov	r0, r4
  40098c:	4b25      	ldr	r3, [pc, #148]	; (400a24 <pio_configure_pin+0x128>)
  40098e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400990:	f015 0f01 	tst.w	r5, #1
  400994:	d102      	bne.n	40099c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  400996:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400998:	2001      	movs	r0, #1
  40099a:	e7da      	b.n	400952 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40099c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40099e:	2001      	movs	r0, #1
  4009a0:	e7d7      	b.n	400952 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4009a2:	f000 001f 	and.w	r0, r0, #31
  4009a6:	2601      	movs	r6, #1
  4009a8:	4086      	lsls	r6, r0
  4009aa:	4632      	mov	r2, r6
  4009ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4009b0:	4620      	mov	r0, r4
  4009b2:	4b1c      	ldr	r3, [pc, #112]	; (400a24 <pio_configure_pin+0x128>)
  4009b4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009b6:	f015 0f01 	tst.w	r5, #1
  4009ba:	d102      	bne.n	4009c2 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4009bc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009be:	2001      	movs	r0, #1
  4009c0:	e7c7      	b.n	400952 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009c2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009c4:	2001      	movs	r0, #1
  4009c6:	e7c4      	b.n	400952 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4009c8:	f000 001f 	and.w	r0, r0, #31
  4009cc:	2601      	movs	r6, #1
  4009ce:	4086      	lsls	r6, r0
  4009d0:	4632      	mov	r2, r6
  4009d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4009d6:	4620      	mov	r0, r4
  4009d8:	4b12      	ldr	r3, [pc, #72]	; (400a24 <pio_configure_pin+0x128>)
  4009da:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009dc:	f015 0f01 	tst.w	r5, #1
  4009e0:	d102      	bne.n	4009e8 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4009e2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4009e4:	2001      	movs	r0, #1
  4009e6:	e7b4      	b.n	400952 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4009e8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4009ea:	2001      	movs	r0, #1
  4009ec:	e7b1      	b.n	400952 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4009ee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4009f2:	f000 011f 	and.w	r1, r0, #31
  4009f6:	2601      	movs	r6, #1
  4009f8:	ea05 0306 	and.w	r3, r5, r6
  4009fc:	9300      	str	r3, [sp, #0]
  4009fe:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400a02:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400a06:	bf14      	ite	ne
  400a08:	2200      	movne	r2, #0
  400a0a:	2201      	moveq	r2, #1
  400a0c:	fa06 f101 	lsl.w	r1, r6, r1
  400a10:	4620      	mov	r0, r4
  400a12:	4c05      	ldr	r4, [pc, #20]	; (400a28 <pio_configure_pin+0x12c>)
  400a14:	47a0      	blx	r4
	return 1;
  400a16:	4630      	mov	r0, r6
		break;
  400a18:	e79b      	b.n	400952 <pio_configure_pin+0x56>
  400a1a:	bf00      	nop
  400a1c:	00200707 	.word	0x00200707
  400a20:	004007b3 	.word	0x004007b3
  400a24:	00400721 	.word	0x00400721
  400a28:	004007e9 	.word	0x004007e9

00400a2c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a30:	4604      	mov	r4, r0
  400a32:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a34:	4b0e      	ldr	r3, [pc, #56]	; (400a70 <pio_handler_process+0x44>)
  400a36:	4798      	blx	r3
  400a38:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a3a:	4620      	mov	r0, r4
  400a3c:	4b0d      	ldr	r3, [pc, #52]	; (400a74 <pio_handler_process+0x48>)
  400a3e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a40:	4005      	ands	r5, r0
  400a42:	d013      	beq.n	400a6c <pio_handler_process+0x40>
  400a44:	4c0c      	ldr	r4, [pc, #48]	; (400a78 <pio_handler_process+0x4c>)
  400a46:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a4a:	e003      	b.n	400a54 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a4c:	42b4      	cmp	r4, r6
  400a4e:	d00d      	beq.n	400a6c <pio_handler_process+0x40>
  400a50:	3410      	adds	r4, #16
		while (status != 0) {
  400a52:	b15d      	cbz	r5, 400a6c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a54:	6820      	ldr	r0, [r4, #0]
  400a56:	4540      	cmp	r0, r8
  400a58:	d1f8      	bne.n	400a4c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a5a:	6861      	ldr	r1, [r4, #4]
  400a5c:	4229      	tst	r1, r5
  400a5e:	d0f5      	beq.n	400a4c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a60:	68e3      	ldr	r3, [r4, #12]
  400a62:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a64:	6863      	ldr	r3, [r4, #4]
  400a66:	ea25 0503 	bic.w	r5, r5, r3
  400a6a:	e7ef      	b.n	400a4c <pio_handler_process+0x20>
  400a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a70:	004008d7 	.word	0x004008d7
  400a74:	004008db 	.word	0x004008db
  400a78:	204009d4 	.word	0x204009d4

00400a7c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a7e:	4c18      	ldr	r4, [pc, #96]	; (400ae0 <pio_handler_set+0x64>)
  400a80:	6826      	ldr	r6, [r4, #0]
  400a82:	2e06      	cmp	r6, #6
  400a84:	d82a      	bhi.n	400adc <pio_handler_set+0x60>
  400a86:	f04f 0c00 	mov.w	ip, #0
  400a8a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a8c:	4f15      	ldr	r7, [pc, #84]	; (400ae4 <pio_handler_set+0x68>)
  400a8e:	e004      	b.n	400a9a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a90:	3401      	adds	r4, #1
  400a92:	b2e4      	uxtb	r4, r4
  400a94:	46a4      	mov	ip, r4
  400a96:	42a6      	cmp	r6, r4
  400a98:	d309      	bcc.n	400aae <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a9a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a9c:	0125      	lsls	r5, r4, #4
  400a9e:	597d      	ldr	r5, [r7, r5]
  400aa0:	428d      	cmp	r5, r1
  400aa2:	d1f5      	bne.n	400a90 <pio_handler_set+0x14>
  400aa4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400aa8:	686d      	ldr	r5, [r5, #4]
  400aaa:	4295      	cmp	r5, r2
  400aac:	d1f0      	bne.n	400a90 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400aae:	4d0d      	ldr	r5, [pc, #52]	; (400ae4 <pio_handler_set+0x68>)
  400ab0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400ab4:	eb05 040e 	add.w	r4, r5, lr
  400ab8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400abc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400abe:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400ac0:	9906      	ldr	r1, [sp, #24]
  400ac2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400ac4:	3601      	adds	r6, #1
  400ac6:	4566      	cmp	r6, ip
  400ac8:	d005      	beq.n	400ad6 <pio_handler_set+0x5a>
  400aca:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400acc:	461a      	mov	r2, r3
  400ace:	4b06      	ldr	r3, [pc, #24]	; (400ae8 <pio_handler_set+0x6c>)
  400ad0:	4798      	blx	r3

	return 0;
  400ad2:	2000      	movs	r0, #0
  400ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400ad6:	4902      	ldr	r1, [pc, #8]	; (400ae0 <pio_handler_set+0x64>)
  400ad8:	600e      	str	r6, [r1, #0]
  400ada:	e7f6      	b.n	400aca <pio_handler_set+0x4e>
		return 1;
  400adc:	2001      	movs	r0, #1
}
  400ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ae0:	20400a44 	.word	0x20400a44
  400ae4:	204009d4 	.word	0x204009d4
  400ae8:	004008a1 	.word	0x004008a1

00400aec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400aec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400aee:	210a      	movs	r1, #10
  400af0:	4801      	ldr	r0, [pc, #4]	; (400af8 <PIOA_Handler+0xc>)
  400af2:	4b02      	ldr	r3, [pc, #8]	; (400afc <PIOA_Handler+0x10>)
  400af4:	4798      	blx	r3
  400af6:	bd08      	pop	{r3, pc}
  400af8:	400e0e00 	.word	0x400e0e00
  400afc:	00400a2d 	.word	0x00400a2d

00400b00 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b00:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400b02:	210b      	movs	r1, #11
  400b04:	4801      	ldr	r0, [pc, #4]	; (400b0c <PIOB_Handler+0xc>)
  400b06:	4b02      	ldr	r3, [pc, #8]	; (400b10 <PIOB_Handler+0x10>)
  400b08:	4798      	blx	r3
  400b0a:	bd08      	pop	{r3, pc}
  400b0c:	400e1000 	.word	0x400e1000
  400b10:	00400a2d 	.word	0x00400a2d

00400b14 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400b14:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400b16:	210c      	movs	r1, #12
  400b18:	4801      	ldr	r0, [pc, #4]	; (400b20 <PIOC_Handler+0xc>)
  400b1a:	4b02      	ldr	r3, [pc, #8]	; (400b24 <PIOC_Handler+0x10>)
  400b1c:	4798      	blx	r3
  400b1e:	bd08      	pop	{r3, pc}
  400b20:	400e1200 	.word	0x400e1200
  400b24:	00400a2d 	.word	0x00400a2d

00400b28 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b28:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b2a:	2110      	movs	r1, #16
  400b2c:	4801      	ldr	r0, [pc, #4]	; (400b34 <PIOD_Handler+0xc>)
  400b2e:	4b02      	ldr	r3, [pc, #8]	; (400b38 <PIOD_Handler+0x10>)
  400b30:	4798      	blx	r3
  400b32:	bd08      	pop	{r3, pc}
  400b34:	400e1400 	.word	0x400e1400
  400b38:	00400a2d 	.word	0x00400a2d

00400b3c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b3e:	2111      	movs	r1, #17
  400b40:	4801      	ldr	r0, [pc, #4]	; (400b48 <PIOE_Handler+0xc>)
  400b42:	4b02      	ldr	r3, [pc, #8]	; (400b4c <PIOE_Handler+0x10>)
  400b44:	4798      	blx	r3
  400b46:	bd08      	pop	{r3, pc}
  400b48:	400e1600 	.word	0x400e1600
  400b4c:	00400a2d 	.word	0x00400a2d

00400b50 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b50:	2803      	cmp	r0, #3
  400b52:	d011      	beq.n	400b78 <pmc_mck_set_division+0x28>
  400b54:	2804      	cmp	r0, #4
  400b56:	d012      	beq.n	400b7e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b58:	2802      	cmp	r0, #2
  400b5a:	bf0c      	ite	eq
  400b5c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b60:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b62:	4a08      	ldr	r2, [pc, #32]	; (400b84 <pmc_mck_set_division+0x34>)
  400b64:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b6a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b6c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b6e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b70:	f013 0f08 	tst.w	r3, #8
  400b74:	d0fb      	beq.n	400b6e <pmc_mck_set_division+0x1e>
}
  400b76:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b78:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b7c:	e7f1      	b.n	400b62 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b82:	e7ee      	b.n	400b62 <pmc_mck_set_division+0x12>
  400b84:	400e0600 	.word	0x400e0600

00400b88 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b88:	4a17      	ldr	r2, [pc, #92]	; (400be8 <pmc_switch_mck_to_pllack+0x60>)
  400b8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b90:	4318      	orrs	r0, r3
  400b92:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b94:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b96:	f013 0f08 	tst.w	r3, #8
  400b9a:	d10a      	bne.n	400bb2 <pmc_switch_mck_to_pllack+0x2a>
  400b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ba0:	4911      	ldr	r1, [pc, #68]	; (400be8 <pmc_switch_mck_to_pllack+0x60>)
  400ba2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ba4:	f012 0f08 	tst.w	r2, #8
  400ba8:	d103      	bne.n	400bb2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400baa:	3b01      	subs	r3, #1
  400bac:	d1f9      	bne.n	400ba2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400bae:	2001      	movs	r0, #1
  400bb0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bb2:	4a0d      	ldr	r2, [pc, #52]	; (400be8 <pmc_switch_mck_to_pllack+0x60>)
  400bb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bb6:	f023 0303 	bic.w	r3, r3, #3
  400bba:	f043 0302 	orr.w	r3, r3, #2
  400bbe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bc0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bc2:	f013 0f08 	tst.w	r3, #8
  400bc6:	d10a      	bne.n	400bde <pmc_switch_mck_to_pllack+0x56>
  400bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bcc:	4906      	ldr	r1, [pc, #24]	; (400be8 <pmc_switch_mck_to_pllack+0x60>)
  400bce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400bd0:	f012 0f08 	tst.w	r2, #8
  400bd4:	d105      	bne.n	400be2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bd6:	3b01      	subs	r3, #1
  400bd8:	d1f9      	bne.n	400bce <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400bda:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bdc:	4770      	bx	lr
	return 0;
  400bde:	2000      	movs	r0, #0
  400be0:	4770      	bx	lr
  400be2:	2000      	movs	r0, #0
  400be4:	4770      	bx	lr
  400be6:	bf00      	nop
  400be8:	400e0600 	.word	0x400e0600

00400bec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bec:	b9a0      	cbnz	r0, 400c18 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bee:	480e      	ldr	r0, [pc, #56]	; (400c28 <pmc_switch_mainck_to_xtal+0x3c>)
  400bf0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400bf2:	0209      	lsls	r1, r1, #8
  400bf4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bf6:	4a0d      	ldr	r2, [pc, #52]	; (400c2c <pmc_switch_mainck_to_xtal+0x40>)
  400bf8:	401a      	ands	r2, r3
  400bfa:	4b0d      	ldr	r3, [pc, #52]	; (400c30 <pmc_switch_mainck_to_xtal+0x44>)
  400bfc:	4313      	orrs	r3, r2
  400bfe:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c00:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400c02:	4602      	mov	r2, r0
  400c04:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c06:	f013 0f01 	tst.w	r3, #1
  400c0a:	d0fb      	beq.n	400c04 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c0c:	4a06      	ldr	r2, [pc, #24]	; (400c28 <pmc_switch_mainck_to_xtal+0x3c>)
  400c0e:	6a11      	ldr	r1, [r2, #32]
  400c10:	4b08      	ldr	r3, [pc, #32]	; (400c34 <pmc_switch_mainck_to_xtal+0x48>)
  400c12:	430b      	orrs	r3, r1
  400c14:	6213      	str	r3, [r2, #32]
  400c16:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c18:	4903      	ldr	r1, [pc, #12]	; (400c28 <pmc_switch_mainck_to_xtal+0x3c>)
  400c1a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c1c:	4a06      	ldr	r2, [pc, #24]	; (400c38 <pmc_switch_mainck_to_xtal+0x4c>)
  400c1e:	401a      	ands	r2, r3
  400c20:	4b06      	ldr	r3, [pc, #24]	; (400c3c <pmc_switch_mainck_to_xtal+0x50>)
  400c22:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c24:	620b      	str	r3, [r1, #32]
  400c26:	4770      	bx	lr
  400c28:	400e0600 	.word	0x400e0600
  400c2c:	ffc8fffc 	.word	0xffc8fffc
  400c30:	00370001 	.word	0x00370001
  400c34:	01370000 	.word	0x01370000
  400c38:	fec8fffc 	.word	0xfec8fffc
  400c3c:	01370002 	.word	0x01370002

00400c40 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c40:	4b02      	ldr	r3, [pc, #8]	; (400c4c <pmc_osc_is_ready_mainck+0xc>)
  400c42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c44:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop
  400c4c:	400e0600 	.word	0x400e0600

00400c50 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c54:	4b01      	ldr	r3, [pc, #4]	; (400c5c <pmc_disable_pllack+0xc>)
  400c56:	629a      	str	r2, [r3, #40]	; 0x28
  400c58:	4770      	bx	lr
  400c5a:	bf00      	nop
  400c5c:	400e0600 	.word	0x400e0600

00400c60 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c60:	4b02      	ldr	r3, [pc, #8]	; (400c6c <pmc_is_locked_pllack+0xc>)
  400c62:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c64:	f000 0002 	and.w	r0, r0, #2
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop
  400c6c:	400e0600 	.word	0x400e0600

00400c70 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400c70:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400c74:	4b05      	ldr	r3, [pc, #20]	; (400c8c <pmc_enable_periph_clk+0x1c>)
  400c76:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400c7a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400c7e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400c82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400c86:	2000      	movs	r0, #0
  400c88:	4770      	bx	lr
  400c8a:	bf00      	nop
  400c8c:	400e0600 	.word	0x400e0600

00400c90 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c90:	6943      	ldr	r3, [r0, #20]
  400c92:	f013 0f02 	tst.w	r3, #2
  400c96:	d002      	beq.n	400c9e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c98:	61c1      	str	r1, [r0, #28]
	return 0;
  400c9a:	2000      	movs	r0, #0
  400c9c:	4770      	bx	lr
		return 1;
  400c9e:	2001      	movs	r0, #1
}
  400ca0:	4770      	bx	lr

00400ca2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400ca2:	6943      	ldr	r3, [r0, #20]
  400ca4:	f013 0f01 	tst.w	r3, #1
  400ca8:	d003      	beq.n	400cb2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400caa:	6983      	ldr	r3, [r0, #24]
  400cac:	700b      	strb	r3, [r1, #0]
	return 0;
  400cae:	2000      	movs	r0, #0
  400cb0:	4770      	bx	lr
		return 1;
  400cb2:	2001      	movs	r0, #1
}
  400cb4:	4770      	bx	lr

00400cb6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400cb6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400cb8:	010b      	lsls	r3, r1, #4
  400cba:	4293      	cmp	r3, r2
  400cbc:	d914      	bls.n	400ce8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cbe:	00c9      	lsls	r1, r1, #3
  400cc0:	084b      	lsrs	r3, r1, #1
  400cc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400cc6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400cca:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400ccc:	1e5c      	subs	r4, r3, #1
  400cce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cd2:	428c      	cmp	r4, r1
  400cd4:	d901      	bls.n	400cda <usart_set_async_baudrate+0x24>
		return 1;
  400cd6:	2001      	movs	r0, #1
  400cd8:	e017      	b.n	400d0a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cda:	6841      	ldr	r1, [r0, #4]
  400cdc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400ce0:	6041      	str	r1, [r0, #4]
  400ce2:	e00c      	b.n	400cfe <usart_set_async_baudrate+0x48>
		return 1;
  400ce4:	2001      	movs	r0, #1
  400ce6:	e010      	b.n	400d0a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400ce8:	0859      	lsrs	r1, r3, #1
  400cea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400cee:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400cf2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cf4:	1e5c      	subs	r4, r3, #1
  400cf6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cfa:	428c      	cmp	r4, r1
  400cfc:	d8f2      	bhi.n	400ce4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400cfe:	0412      	lsls	r2, r2, #16
  400d00:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400d04:	431a      	orrs	r2, r3
  400d06:	6202      	str	r2, [r0, #32]

	return 0;
  400d08:	2000      	movs	r0, #0
}
  400d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d0e:	4770      	bx	lr

00400d10 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d10:	4b08      	ldr	r3, [pc, #32]	; (400d34 <usart_reset+0x24>)
  400d12:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400d16:	2300      	movs	r3, #0
  400d18:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d1a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d1c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d1e:	2388      	movs	r3, #136	; 0x88
  400d20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d22:	2324      	movs	r3, #36	; 0x24
  400d24:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d26:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d2a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d30:	6003      	str	r3, [r0, #0]
  400d32:	4770      	bx	lr
  400d34:	55534100 	.word	0x55534100

00400d38 <usart_init_rs232>:
{
  400d38:	b570      	push	{r4, r5, r6, lr}
  400d3a:	4605      	mov	r5, r0
  400d3c:	460c      	mov	r4, r1
  400d3e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400d40:	4b0f      	ldr	r3, [pc, #60]	; (400d80 <usart_init_rs232+0x48>)
  400d42:	4798      	blx	r3
	ul_reg_val = 0;
  400d44:	2200      	movs	r2, #0
  400d46:	4b0f      	ldr	r3, [pc, #60]	; (400d84 <usart_init_rs232+0x4c>)
  400d48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d4a:	b1a4      	cbz	r4, 400d76 <usart_init_rs232+0x3e>
  400d4c:	4632      	mov	r2, r6
  400d4e:	6821      	ldr	r1, [r4, #0]
  400d50:	4628      	mov	r0, r5
  400d52:	4b0d      	ldr	r3, [pc, #52]	; (400d88 <usart_init_rs232+0x50>)
  400d54:	4798      	blx	r3
  400d56:	4602      	mov	r2, r0
  400d58:	b978      	cbnz	r0, 400d7a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d5a:	6863      	ldr	r3, [r4, #4]
  400d5c:	68a1      	ldr	r1, [r4, #8]
  400d5e:	430b      	orrs	r3, r1
  400d60:	6921      	ldr	r1, [r4, #16]
  400d62:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d64:	68e1      	ldr	r1, [r4, #12]
  400d66:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d68:	4906      	ldr	r1, [pc, #24]	; (400d84 <usart_init_rs232+0x4c>)
  400d6a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400d6c:	6869      	ldr	r1, [r5, #4]
  400d6e:	430b      	orrs	r3, r1
  400d70:	606b      	str	r3, [r5, #4]
}
  400d72:	4610      	mov	r0, r2
  400d74:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400d76:	2201      	movs	r2, #1
  400d78:	e7fb      	b.n	400d72 <usart_init_rs232+0x3a>
  400d7a:	2201      	movs	r2, #1
  400d7c:	e7f9      	b.n	400d72 <usart_init_rs232+0x3a>
  400d7e:	bf00      	nop
  400d80:	00400d11 	.word	0x00400d11
  400d84:	20400a48 	.word	0x20400a48
  400d88:	00400cb7 	.word	0x00400cb7

00400d8c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400d8c:	2340      	movs	r3, #64	; 0x40
  400d8e:	6003      	str	r3, [r0, #0]
  400d90:	4770      	bx	lr

00400d92 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400d92:	2310      	movs	r3, #16
  400d94:	6003      	str	r3, [r0, #0]
  400d96:	4770      	bx	lr

00400d98 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d98:	6943      	ldr	r3, [r0, #20]
  400d9a:	f013 0f02 	tst.w	r3, #2
  400d9e:	d004      	beq.n	400daa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400da0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400da4:	61c1      	str	r1, [r0, #28]
	return 0;
  400da6:	2000      	movs	r0, #0
  400da8:	4770      	bx	lr
		return 1;
  400daa:	2001      	movs	r0, #1
}
  400dac:	4770      	bx	lr

00400dae <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400dae:	6943      	ldr	r3, [r0, #20]
  400db0:	f013 0f01 	tst.w	r3, #1
  400db4:	d005      	beq.n	400dc2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400db6:	6983      	ldr	r3, [r0, #24]
  400db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400dbc:	600b      	str	r3, [r1, #0]
	return 0;
  400dbe:	2000      	movs	r0, #0
  400dc0:	4770      	bx	lr
		return 1;
  400dc2:	2001      	movs	r0, #1
}
  400dc4:	4770      	bx	lr

00400dc6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400dc6:	e7fe      	b.n	400dc6 <Dummy_Handler>

00400dc8 <Reset_Handler>:
{
  400dc8:	b500      	push	{lr}
  400dca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400dcc:	4b25      	ldr	r3, [pc, #148]	; (400e64 <Reset_Handler+0x9c>)
  400dce:	4a26      	ldr	r2, [pc, #152]	; (400e68 <Reset_Handler+0xa0>)
  400dd0:	429a      	cmp	r2, r3
  400dd2:	d010      	beq.n	400df6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400dd4:	4b25      	ldr	r3, [pc, #148]	; (400e6c <Reset_Handler+0xa4>)
  400dd6:	4a23      	ldr	r2, [pc, #140]	; (400e64 <Reset_Handler+0x9c>)
  400dd8:	429a      	cmp	r2, r3
  400dda:	d20c      	bcs.n	400df6 <Reset_Handler+0x2e>
  400ddc:	3b01      	subs	r3, #1
  400dde:	1a9b      	subs	r3, r3, r2
  400de0:	f023 0303 	bic.w	r3, r3, #3
  400de4:	3304      	adds	r3, #4
  400de6:	4413      	add	r3, r2
  400de8:	491f      	ldr	r1, [pc, #124]	; (400e68 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400dea:	f851 0b04 	ldr.w	r0, [r1], #4
  400dee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400df2:	429a      	cmp	r2, r3
  400df4:	d1f9      	bne.n	400dea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400df6:	4b1e      	ldr	r3, [pc, #120]	; (400e70 <Reset_Handler+0xa8>)
  400df8:	4a1e      	ldr	r2, [pc, #120]	; (400e74 <Reset_Handler+0xac>)
  400dfa:	429a      	cmp	r2, r3
  400dfc:	d20a      	bcs.n	400e14 <Reset_Handler+0x4c>
  400dfe:	3b01      	subs	r3, #1
  400e00:	1a9b      	subs	r3, r3, r2
  400e02:	f023 0303 	bic.w	r3, r3, #3
  400e06:	3304      	adds	r3, #4
  400e08:	4413      	add	r3, r2
                *pDest++ = 0;
  400e0a:	2100      	movs	r1, #0
  400e0c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400e10:	4293      	cmp	r3, r2
  400e12:	d1fb      	bne.n	400e0c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e14:	4a18      	ldr	r2, [pc, #96]	; (400e78 <Reset_Handler+0xb0>)
  400e16:	4b19      	ldr	r3, [pc, #100]	; (400e7c <Reset_Handler+0xb4>)
  400e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e1c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e1e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e22:	fab3 f383 	clz	r3, r3
  400e26:	095b      	lsrs	r3, r3, #5
  400e28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e2a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400e2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e30:	2200      	movs	r2, #0
  400e32:	4b13      	ldr	r3, [pc, #76]	; (400e80 <Reset_Handler+0xb8>)
  400e34:	701a      	strb	r2, [r3, #0]
	return flags;
  400e36:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e38:	4a12      	ldr	r2, [pc, #72]	; (400e84 <Reset_Handler+0xbc>)
  400e3a:	6813      	ldr	r3, [r2, #0]
  400e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e40:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e46:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e4a:	b129      	cbz	r1, 400e58 <Reset_Handler+0x90>
		cpu_irq_enable();
  400e4c:	2201      	movs	r2, #1
  400e4e:	4b0c      	ldr	r3, [pc, #48]	; (400e80 <Reset_Handler+0xb8>)
  400e50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e56:	b662      	cpsie	i
        __libc_init_array();
  400e58:	4b0b      	ldr	r3, [pc, #44]	; (400e88 <Reset_Handler+0xc0>)
  400e5a:	4798      	blx	r3
        main();
  400e5c:	4b0b      	ldr	r3, [pc, #44]	; (400e8c <Reset_Handler+0xc4>)
  400e5e:	4798      	blx	r3
  400e60:	e7fe      	b.n	400e60 <Reset_Handler+0x98>
  400e62:	bf00      	nop
  400e64:	20400000 	.word	0x20400000
  400e68:	00406bd0 	.word	0x00406bd0
  400e6c:	204009b8 	.word	0x204009b8
  400e70:	2040c530 	.word	0x2040c530
  400e74:	204009b8 	.word	0x204009b8
  400e78:	e000ed00 	.word	0xe000ed00
  400e7c:	00400000 	.word	0x00400000
  400e80:	20400000 	.word	0x20400000
  400e84:	e000ed88 	.word	0xe000ed88
  400e88:	004039e5 	.word	0x004039e5
  400e8c:	0040377d 	.word	0x0040377d

00400e90 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400e90:	4b3b      	ldr	r3, [pc, #236]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e94:	f003 0303 	and.w	r3, r3, #3
  400e98:	2b01      	cmp	r3, #1
  400e9a:	d01d      	beq.n	400ed8 <SystemCoreClockUpdate+0x48>
  400e9c:	b183      	cbz	r3, 400ec0 <SystemCoreClockUpdate+0x30>
  400e9e:	2b02      	cmp	r3, #2
  400ea0:	d036      	beq.n	400f10 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400ea2:	4b37      	ldr	r3, [pc, #220]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400eaa:	2b70      	cmp	r3, #112	; 0x70
  400eac:	d05f      	beq.n	400f6e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400eae:	4b34      	ldr	r3, [pc, #208]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400eb2:	4934      	ldr	r1, [pc, #208]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400eb4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400eb8:	680b      	ldr	r3, [r1, #0]
  400eba:	40d3      	lsrs	r3, r2
  400ebc:	600b      	str	r3, [r1, #0]
  400ebe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ec0:	4b31      	ldr	r3, [pc, #196]	; (400f88 <SystemCoreClockUpdate+0xf8>)
  400ec2:	695b      	ldr	r3, [r3, #20]
  400ec4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ec8:	bf14      	ite	ne
  400eca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ece:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400ed2:	4b2c      	ldr	r3, [pc, #176]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400ed4:	601a      	str	r2, [r3, #0]
  400ed6:	e7e4      	b.n	400ea2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ed8:	4b29      	ldr	r3, [pc, #164]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400eda:	6a1b      	ldr	r3, [r3, #32]
  400edc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ee0:	d003      	beq.n	400eea <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ee2:	4a2a      	ldr	r2, [pc, #168]	; (400f8c <SystemCoreClockUpdate+0xfc>)
  400ee4:	4b27      	ldr	r3, [pc, #156]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400ee6:	601a      	str	r2, [r3, #0]
  400ee8:	e7db      	b.n	400ea2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400eea:	4a29      	ldr	r2, [pc, #164]	; (400f90 <SystemCoreClockUpdate+0x100>)
  400eec:	4b25      	ldr	r3, [pc, #148]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400eee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ef0:	4b23      	ldr	r3, [pc, #140]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400ef2:	6a1b      	ldr	r3, [r3, #32]
  400ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ef8:	2b10      	cmp	r3, #16
  400efa:	d005      	beq.n	400f08 <SystemCoreClockUpdate+0x78>
  400efc:	2b20      	cmp	r3, #32
  400efe:	d1d0      	bne.n	400ea2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400f00:	4a22      	ldr	r2, [pc, #136]	; (400f8c <SystemCoreClockUpdate+0xfc>)
  400f02:	4b20      	ldr	r3, [pc, #128]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f04:	601a      	str	r2, [r3, #0]
          break;
  400f06:	e7cc      	b.n	400ea2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400f08:	4a22      	ldr	r2, [pc, #136]	; (400f94 <SystemCoreClockUpdate+0x104>)
  400f0a:	4b1e      	ldr	r3, [pc, #120]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f0c:	601a      	str	r2, [r3, #0]
          break;
  400f0e:	e7c8      	b.n	400ea2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f10:	4b1b      	ldr	r3, [pc, #108]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400f12:	6a1b      	ldr	r3, [r3, #32]
  400f14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f18:	d016      	beq.n	400f48 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f1a:	4a1c      	ldr	r2, [pc, #112]	; (400f8c <SystemCoreClockUpdate+0xfc>)
  400f1c:	4b19      	ldr	r3, [pc, #100]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f1e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f20:	4b17      	ldr	r3, [pc, #92]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f24:	f003 0303 	and.w	r3, r3, #3
  400f28:	2b02      	cmp	r3, #2
  400f2a:	d1ba      	bne.n	400ea2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f2c:	4a14      	ldr	r2, [pc, #80]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400f2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f30:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f32:	4814      	ldr	r0, [pc, #80]	; (400f84 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f34:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f38:	6803      	ldr	r3, [r0, #0]
  400f3a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f3e:	b2d2      	uxtb	r2, r2
  400f40:	fbb3 f3f2 	udiv	r3, r3, r2
  400f44:	6003      	str	r3, [r0, #0]
  400f46:	e7ac      	b.n	400ea2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f48:	4a11      	ldr	r2, [pc, #68]	; (400f90 <SystemCoreClockUpdate+0x100>)
  400f4a:	4b0e      	ldr	r3, [pc, #56]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f4c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f4e:	4b0c      	ldr	r3, [pc, #48]	; (400f80 <SystemCoreClockUpdate+0xf0>)
  400f50:	6a1b      	ldr	r3, [r3, #32]
  400f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f56:	2b10      	cmp	r3, #16
  400f58:	d005      	beq.n	400f66 <SystemCoreClockUpdate+0xd6>
  400f5a:	2b20      	cmp	r3, #32
  400f5c:	d1e0      	bne.n	400f20 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f5e:	4a0b      	ldr	r2, [pc, #44]	; (400f8c <SystemCoreClockUpdate+0xfc>)
  400f60:	4b08      	ldr	r3, [pc, #32]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f62:	601a      	str	r2, [r3, #0]
          break;
  400f64:	e7dc      	b.n	400f20 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f66:	4a0b      	ldr	r2, [pc, #44]	; (400f94 <SystemCoreClockUpdate+0x104>)
  400f68:	4b06      	ldr	r3, [pc, #24]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f6a:	601a      	str	r2, [r3, #0]
          break;
  400f6c:	e7d8      	b.n	400f20 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f6e:	4a05      	ldr	r2, [pc, #20]	; (400f84 <SystemCoreClockUpdate+0xf4>)
  400f70:	6813      	ldr	r3, [r2, #0]
  400f72:	4909      	ldr	r1, [pc, #36]	; (400f98 <SystemCoreClockUpdate+0x108>)
  400f74:	fba1 1303 	umull	r1, r3, r1, r3
  400f78:	085b      	lsrs	r3, r3, #1
  400f7a:	6013      	str	r3, [r2, #0]
  400f7c:	4770      	bx	lr
  400f7e:	bf00      	nop
  400f80:	400e0600 	.word	0x400e0600
  400f84:	20400004 	.word	0x20400004
  400f88:	400e1810 	.word	0x400e1810
  400f8c:	00b71b00 	.word	0x00b71b00
  400f90:	003d0900 	.word	0x003d0900
  400f94:	007a1200 	.word	0x007a1200
  400f98:	aaaaaaab 	.word	0xaaaaaaab

00400f9c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400f9c:	4b16      	ldr	r3, [pc, #88]	; (400ff8 <system_init_flash+0x5c>)
  400f9e:	4298      	cmp	r0, r3
  400fa0:	d913      	bls.n	400fca <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400fa2:	4b16      	ldr	r3, [pc, #88]	; (400ffc <system_init_flash+0x60>)
  400fa4:	4298      	cmp	r0, r3
  400fa6:	d915      	bls.n	400fd4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400fa8:	4b15      	ldr	r3, [pc, #84]	; (401000 <system_init_flash+0x64>)
  400faa:	4298      	cmp	r0, r3
  400fac:	d916      	bls.n	400fdc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400fae:	4b15      	ldr	r3, [pc, #84]	; (401004 <system_init_flash+0x68>)
  400fb0:	4298      	cmp	r0, r3
  400fb2:	d917      	bls.n	400fe4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400fb4:	4b14      	ldr	r3, [pc, #80]	; (401008 <system_init_flash+0x6c>)
  400fb6:	4298      	cmp	r0, r3
  400fb8:	d918      	bls.n	400fec <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400fba:	4b14      	ldr	r3, [pc, #80]	; (40100c <system_init_flash+0x70>)
  400fbc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fbe:	bf94      	ite	ls
  400fc0:	4a13      	ldrls	r2, [pc, #76]	; (401010 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400fc2:	4a14      	ldrhi	r2, [pc, #80]	; (401014 <system_init_flash+0x78>)
  400fc4:	4b14      	ldr	r3, [pc, #80]	; (401018 <system_init_flash+0x7c>)
  400fc6:	601a      	str	r2, [r3, #0]
  400fc8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fce:	4b12      	ldr	r3, [pc, #72]	; (401018 <system_init_flash+0x7c>)
  400fd0:	601a      	str	r2, [r3, #0]
  400fd2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fd4:	4a11      	ldr	r2, [pc, #68]	; (40101c <system_init_flash+0x80>)
  400fd6:	4b10      	ldr	r3, [pc, #64]	; (401018 <system_init_flash+0x7c>)
  400fd8:	601a      	str	r2, [r3, #0]
  400fda:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400fdc:	4a10      	ldr	r2, [pc, #64]	; (401020 <system_init_flash+0x84>)
  400fde:	4b0e      	ldr	r3, [pc, #56]	; (401018 <system_init_flash+0x7c>)
  400fe0:	601a      	str	r2, [r3, #0]
  400fe2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400fe4:	4a0f      	ldr	r2, [pc, #60]	; (401024 <system_init_flash+0x88>)
  400fe6:	4b0c      	ldr	r3, [pc, #48]	; (401018 <system_init_flash+0x7c>)
  400fe8:	601a      	str	r2, [r3, #0]
  400fea:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400fec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400ff0:	4b09      	ldr	r3, [pc, #36]	; (401018 <system_init_flash+0x7c>)
  400ff2:	601a      	str	r2, [r3, #0]
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop
  400ff8:	015ef3bf 	.word	0x015ef3bf
  400ffc:	02bde77f 	.word	0x02bde77f
  401000:	041cdb3f 	.word	0x041cdb3f
  401004:	057bceff 	.word	0x057bceff
  401008:	06dac2bf 	.word	0x06dac2bf
  40100c:	0839b67f 	.word	0x0839b67f
  401010:	04000500 	.word	0x04000500
  401014:	04000600 	.word	0x04000600
  401018:	400e0c00 	.word	0x400e0c00
  40101c:	04000100 	.word	0x04000100
  401020:	04000200 	.word	0x04000200
  401024:	04000300 	.word	0x04000300

00401028 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401028:	4b0a      	ldr	r3, [pc, #40]	; (401054 <_sbrk+0x2c>)
  40102a:	681b      	ldr	r3, [r3, #0]
  40102c:	b153      	cbz	r3, 401044 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40102e:	4b09      	ldr	r3, [pc, #36]	; (401054 <_sbrk+0x2c>)
  401030:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401032:	181a      	adds	r2, r3, r0
  401034:	4908      	ldr	r1, [pc, #32]	; (401058 <_sbrk+0x30>)
  401036:	4291      	cmp	r1, r2
  401038:	db08      	blt.n	40104c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40103a:	4610      	mov	r0, r2
  40103c:	4a05      	ldr	r2, [pc, #20]	; (401054 <_sbrk+0x2c>)
  40103e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401040:	4618      	mov	r0, r3
  401042:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401044:	4a05      	ldr	r2, [pc, #20]	; (40105c <_sbrk+0x34>)
  401046:	4b03      	ldr	r3, [pc, #12]	; (401054 <_sbrk+0x2c>)
  401048:	601a      	str	r2, [r3, #0]
  40104a:	e7f0      	b.n	40102e <_sbrk+0x6>
		return (caddr_t) -1;	
  40104c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401050:	4770      	bx	lr
  401052:	bf00      	nop
  401054:	20400a4c 	.word	0x20400a4c
  401058:	2045fffc 	.word	0x2045fffc
  40105c:	2040e730 	.word	0x2040e730

00401060 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401060:	f04f 30ff 	mov.w	r0, #4294967295
  401064:	4770      	bx	lr

00401066 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40106a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40106c:	2000      	movs	r0, #0
  40106e:	4770      	bx	lr

00401070 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401070:	2001      	movs	r0, #1
  401072:	4770      	bx	lr

00401074 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401074:	2000      	movs	r0, #0
  401076:	4770      	bx	lr

00401078 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401078:	f100 0308 	add.w	r3, r0, #8
  40107c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40107e:	f04f 32ff 	mov.w	r2, #4294967295
  401082:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401084:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401086:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401088:	2300      	movs	r3, #0
  40108a:	6003      	str	r3, [r0, #0]
  40108c:	4770      	bx	lr

0040108e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40108e:	2300      	movs	r3, #0
  401090:	6103      	str	r3, [r0, #16]
  401092:	4770      	bx	lr

00401094 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401094:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401096:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401098:	689a      	ldr	r2, [r3, #8]
  40109a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40109c:	689a      	ldr	r2, [r3, #8]
  40109e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4010a0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010a2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010a4:	6803      	ldr	r3, [r0, #0]
  4010a6:	3301      	adds	r3, #1
  4010a8:	6003      	str	r3, [r0, #0]
  4010aa:	4770      	bx	lr

004010ac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4010ac:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4010ae:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4010b0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4010b4:	d002      	beq.n	4010bc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010b6:	f100 0208 	add.w	r2, r0, #8
  4010ba:	e002      	b.n	4010c2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4010bc:	6902      	ldr	r2, [r0, #16]
  4010be:	e004      	b.n	4010ca <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010c0:	461a      	mov	r2, r3
  4010c2:	6853      	ldr	r3, [r2, #4]
  4010c4:	681c      	ldr	r4, [r3, #0]
  4010c6:	42a5      	cmp	r5, r4
  4010c8:	d2fa      	bcs.n	4010c0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4010ca:	6853      	ldr	r3, [r2, #4]
  4010cc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4010ce:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4010d0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4010d2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010d6:	6803      	ldr	r3, [r0, #0]
  4010d8:	3301      	adds	r3, #1
  4010da:	6003      	str	r3, [r0, #0]
}
  4010dc:	bc30      	pop	{r4, r5}
  4010de:	4770      	bx	lr

004010e0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4010e0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4010e2:	6842      	ldr	r2, [r0, #4]
  4010e4:	6881      	ldr	r1, [r0, #8]
  4010e6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4010e8:	6882      	ldr	r2, [r0, #8]
  4010ea:	6841      	ldr	r1, [r0, #4]
  4010ec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4010ee:	685a      	ldr	r2, [r3, #4]
  4010f0:	4290      	cmp	r0, r2
  4010f2:	d005      	beq.n	401100 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4010f4:	2200      	movs	r2, #0
  4010f6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4010f8:	6818      	ldr	r0, [r3, #0]
  4010fa:	3801      	subs	r0, #1
  4010fc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4010fe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401100:	6882      	ldr	r2, [r0, #8]
  401102:	605a      	str	r2, [r3, #4]
  401104:	e7f6      	b.n	4010f4 <uxListRemove+0x14>
	...

00401108 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401108:	4b0d      	ldr	r3, [pc, #52]	; (401140 <prvTaskExitError+0x38>)
  40110a:	681b      	ldr	r3, [r3, #0]
  40110c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401110:	d00a      	beq.n	401128 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401112:	f04f 0380 	mov.w	r3, #128	; 0x80
  401116:	b672      	cpsid	i
  401118:	f383 8811 	msr	BASEPRI, r3
  40111c:	f3bf 8f6f 	isb	sy
  401120:	f3bf 8f4f 	dsb	sy
  401124:	b662      	cpsie	i
  401126:	e7fe      	b.n	401126 <prvTaskExitError+0x1e>
  401128:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112c:	b672      	cpsid	i
  40112e:	f383 8811 	msr	BASEPRI, r3
  401132:	f3bf 8f6f 	isb	sy
  401136:	f3bf 8f4f 	dsb	sy
  40113a:	b662      	cpsie	i
  40113c:	e7fe      	b.n	40113c <prvTaskExitError+0x34>
  40113e:	bf00      	nop
  401140:	20400008 	.word	0x20400008

00401144 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401144:	4806      	ldr	r0, [pc, #24]	; (401160 <prvPortStartFirstTask+0x1c>)
  401146:	6800      	ldr	r0, [r0, #0]
  401148:	6800      	ldr	r0, [r0, #0]
  40114a:	f380 8808 	msr	MSP, r0
  40114e:	b662      	cpsie	i
  401150:	b661      	cpsie	f
  401152:	f3bf 8f4f 	dsb	sy
  401156:	f3bf 8f6f 	isb	sy
  40115a:	df00      	svc	0
  40115c:	bf00      	nop
  40115e:	0000      	.short	0x0000
  401160:	e000ed08 	.word	0xe000ed08

00401164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401174 <vPortEnableVFP+0x10>
  401168:	6801      	ldr	r1, [r0, #0]
  40116a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40116e:	6001      	str	r1, [r0, #0]
  401170:	4770      	bx	lr
  401172:	0000      	.short	0x0000
  401174:	e000ed88 	.word	0xe000ed88

00401178 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40117c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401180:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401184:	4b05      	ldr	r3, [pc, #20]	; (40119c <pxPortInitialiseStack+0x24>)
  401186:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40118a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40118e:	f06f 0302 	mvn.w	r3, #2
  401192:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401196:	3844      	subs	r0, #68	; 0x44
  401198:	4770      	bx	lr
  40119a:	bf00      	nop
  40119c:	00401109 	.word	0x00401109

004011a0 <SVC_Handler>:
	__asm volatile (
  4011a0:	4b06      	ldr	r3, [pc, #24]	; (4011bc <pxCurrentTCBConst2>)
  4011a2:	6819      	ldr	r1, [r3, #0]
  4011a4:	6808      	ldr	r0, [r1, #0]
  4011a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011aa:	f380 8809 	msr	PSP, r0
  4011ae:	f3bf 8f6f 	isb	sy
  4011b2:	f04f 0000 	mov.w	r0, #0
  4011b6:	f380 8811 	msr	BASEPRI, r0
  4011ba:	4770      	bx	lr

004011bc <pxCurrentTCBConst2>:
  4011bc:	2040c260 	.word	0x2040c260
  4011c0:	4770      	bx	lr
  4011c2:	bf00      	nop

004011c4 <vPortEnterCritical>:
  4011c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011c8:	b672      	cpsid	i
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	f3bf 8f6f 	isb	sy
  4011d2:	f3bf 8f4f 	dsb	sy
  4011d6:	b662      	cpsie	i
	uxCriticalNesting++;
  4011d8:	4a0b      	ldr	r2, [pc, #44]	; (401208 <vPortEnterCritical+0x44>)
  4011da:	6813      	ldr	r3, [r2, #0]
  4011dc:	3301      	adds	r3, #1
  4011de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4011e0:	2b01      	cmp	r3, #1
  4011e2:	d10f      	bne.n	401204 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4011e4:	4b09      	ldr	r3, [pc, #36]	; (40120c <vPortEnterCritical+0x48>)
  4011e6:	681b      	ldr	r3, [r3, #0]
  4011e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4011ec:	d00a      	beq.n	401204 <vPortEnterCritical+0x40>
  4011ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011f2:	b672      	cpsid	i
  4011f4:	f383 8811 	msr	BASEPRI, r3
  4011f8:	f3bf 8f6f 	isb	sy
  4011fc:	f3bf 8f4f 	dsb	sy
  401200:	b662      	cpsie	i
  401202:	e7fe      	b.n	401202 <vPortEnterCritical+0x3e>
  401204:	4770      	bx	lr
  401206:	bf00      	nop
  401208:	20400008 	.word	0x20400008
  40120c:	e000ed04 	.word	0xe000ed04

00401210 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401210:	4b0a      	ldr	r3, [pc, #40]	; (40123c <vPortExitCritical+0x2c>)
  401212:	681b      	ldr	r3, [r3, #0]
  401214:	b953      	cbnz	r3, 40122c <vPortExitCritical+0x1c>
  401216:	f04f 0380 	mov.w	r3, #128	; 0x80
  40121a:	b672      	cpsid	i
  40121c:	f383 8811 	msr	BASEPRI, r3
  401220:	f3bf 8f6f 	isb	sy
  401224:	f3bf 8f4f 	dsb	sy
  401228:	b662      	cpsie	i
  40122a:	e7fe      	b.n	40122a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40122c:	3b01      	subs	r3, #1
  40122e:	4a03      	ldr	r2, [pc, #12]	; (40123c <vPortExitCritical+0x2c>)
  401230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401232:	b90b      	cbnz	r3, 401238 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401234:	f383 8811 	msr	BASEPRI, r3
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	20400008 	.word	0x20400008

00401240 <PendSV_Handler>:
	__asm volatile
  401240:	f3ef 8009 	mrs	r0, PSP
  401244:	f3bf 8f6f 	isb	sy
  401248:	4b15      	ldr	r3, [pc, #84]	; (4012a0 <pxCurrentTCBConst>)
  40124a:	681a      	ldr	r2, [r3, #0]
  40124c:	f01e 0f10 	tst.w	lr, #16
  401250:	bf08      	it	eq
  401252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40125a:	6010      	str	r0, [r2, #0]
  40125c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401260:	f04f 0080 	mov.w	r0, #128	; 0x80
  401264:	b672      	cpsid	i
  401266:	f380 8811 	msr	BASEPRI, r0
  40126a:	f3bf 8f4f 	dsb	sy
  40126e:	f3bf 8f6f 	isb	sy
  401272:	b662      	cpsie	i
  401274:	f001 f91a 	bl	4024ac <vTaskSwitchContext>
  401278:	f04f 0000 	mov.w	r0, #0
  40127c:	f380 8811 	msr	BASEPRI, r0
  401280:	bc08      	pop	{r3}
  401282:	6819      	ldr	r1, [r3, #0]
  401284:	6808      	ldr	r0, [r1, #0]
  401286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40128a:	f01e 0f10 	tst.w	lr, #16
  40128e:	bf08      	it	eq
  401290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401294:	f380 8809 	msr	PSP, r0
  401298:	f3bf 8f6f 	isb	sy
  40129c:	4770      	bx	lr
  40129e:	bf00      	nop

004012a0 <pxCurrentTCBConst>:
  4012a0:	2040c260 	.word	0x2040c260
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop

004012a8 <SysTick_Handler>:
{
  4012a8:	b508      	push	{r3, lr}
	__asm volatile
  4012aa:	f3ef 8311 	mrs	r3, BASEPRI
  4012ae:	f04f 0280 	mov.w	r2, #128	; 0x80
  4012b2:	b672      	cpsid	i
  4012b4:	f382 8811 	msr	BASEPRI, r2
  4012b8:	f3bf 8f6f 	isb	sy
  4012bc:	f3bf 8f4f 	dsb	sy
  4012c0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4012c2:	4b05      	ldr	r3, [pc, #20]	; (4012d8 <SysTick_Handler+0x30>)
  4012c4:	4798      	blx	r3
  4012c6:	b118      	cbz	r0, 4012d0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4012c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012cc:	4b03      	ldr	r3, [pc, #12]	; (4012dc <SysTick_Handler+0x34>)
  4012ce:	601a      	str	r2, [r3, #0]
	__asm volatile
  4012d0:	2300      	movs	r3, #0
  4012d2:	f383 8811 	msr	BASEPRI, r3
  4012d6:	bd08      	pop	{r3, pc}
  4012d8:	00402119 	.word	0x00402119
  4012dc:	e000ed04 	.word	0xe000ed04

004012e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4012e0:	4a03      	ldr	r2, [pc, #12]	; (4012f0 <vPortSetupTimerInterrupt+0x10>)
  4012e2:	4b04      	ldr	r3, [pc, #16]	; (4012f4 <vPortSetupTimerInterrupt+0x14>)
  4012e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4012e6:	2207      	movs	r2, #7
  4012e8:	3b04      	subs	r3, #4
  4012ea:	601a      	str	r2, [r3, #0]
  4012ec:	4770      	bx	lr
  4012ee:	bf00      	nop
  4012f0:	0003a97f 	.word	0x0003a97f
  4012f4:	e000e014 	.word	0xe000e014

004012f8 <xPortStartScheduler>:
{
  4012f8:	b500      	push	{lr}
  4012fa:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4012fc:	4b25      	ldr	r3, [pc, #148]	; (401394 <xPortStartScheduler+0x9c>)
  4012fe:	781a      	ldrb	r2, [r3, #0]
  401300:	b2d2      	uxtb	r2, r2
  401302:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401304:	22ff      	movs	r2, #255	; 0xff
  401306:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401308:	781b      	ldrb	r3, [r3, #0]
  40130a:	b2db      	uxtb	r3, r3
  40130c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401310:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401314:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401318:	4a1f      	ldr	r2, [pc, #124]	; (401398 <xPortStartScheduler+0xa0>)
  40131a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40131c:	2207      	movs	r2, #7
  40131e:	4b1f      	ldr	r3, [pc, #124]	; (40139c <xPortStartScheduler+0xa4>)
  401320:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401322:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401326:	f013 0f80 	tst.w	r3, #128	; 0x80
  40132a:	d010      	beq.n	40134e <xPortStartScheduler+0x56>
  40132c:	2206      	movs	r2, #6
  40132e:	e000      	b.n	401332 <xPortStartScheduler+0x3a>
  401330:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401332:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401336:	005b      	lsls	r3, r3, #1
  401338:	b2db      	uxtb	r3, r3
  40133a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40133e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401342:	1e51      	subs	r1, r2, #1
  401344:	f013 0f80 	tst.w	r3, #128	; 0x80
  401348:	d1f2      	bne.n	401330 <xPortStartScheduler+0x38>
  40134a:	4b14      	ldr	r3, [pc, #80]	; (40139c <xPortStartScheduler+0xa4>)
  40134c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40134e:	4a13      	ldr	r2, [pc, #76]	; (40139c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401350:	6813      	ldr	r3, [r2, #0]
  401352:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401358:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40135a:	9b01      	ldr	r3, [sp, #4]
  40135c:	b2db      	uxtb	r3, r3
  40135e:	4a0d      	ldr	r2, [pc, #52]	; (401394 <xPortStartScheduler+0x9c>)
  401360:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401362:	4b0f      	ldr	r3, [pc, #60]	; (4013a0 <xPortStartScheduler+0xa8>)
  401364:	681a      	ldr	r2, [r3, #0]
  401366:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40136a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40136c:	681a      	ldr	r2, [r3, #0]
  40136e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401372:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401374:	4b0b      	ldr	r3, [pc, #44]	; (4013a4 <xPortStartScheduler+0xac>)
  401376:	4798      	blx	r3
	uxCriticalNesting = 0;
  401378:	2200      	movs	r2, #0
  40137a:	4b0b      	ldr	r3, [pc, #44]	; (4013a8 <xPortStartScheduler+0xb0>)
  40137c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40137e:	4b0b      	ldr	r3, [pc, #44]	; (4013ac <xPortStartScheduler+0xb4>)
  401380:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401382:	4a0b      	ldr	r2, [pc, #44]	; (4013b0 <xPortStartScheduler+0xb8>)
  401384:	6813      	ldr	r3, [r2, #0]
  401386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40138a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40138c:	4b09      	ldr	r3, [pc, #36]	; (4013b4 <xPortStartScheduler+0xbc>)
  40138e:	4798      	blx	r3
	prvTaskExitError();
  401390:	4b09      	ldr	r3, [pc, #36]	; (4013b8 <xPortStartScheduler+0xc0>)
  401392:	4798      	blx	r3
  401394:	e000e400 	.word	0xe000e400
  401398:	20400a50 	.word	0x20400a50
  40139c:	20400a54 	.word	0x20400a54
  4013a0:	e000ed20 	.word	0xe000ed20
  4013a4:	004012e1 	.word	0x004012e1
  4013a8:	20400008 	.word	0x20400008
  4013ac:	00401165 	.word	0x00401165
  4013b0:	e000ef34 	.word	0xe000ef34
  4013b4:	00401145 	.word	0x00401145
  4013b8:	00401109 	.word	0x00401109

004013bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4013bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4013c0:	2b0f      	cmp	r3, #15
  4013c2:	d911      	bls.n	4013e8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4013c4:	4a12      	ldr	r2, [pc, #72]	; (401410 <vPortValidateInterruptPriority+0x54>)
  4013c6:	5c9b      	ldrb	r3, [r3, r2]
  4013c8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4013ca:	4a12      	ldr	r2, [pc, #72]	; (401414 <vPortValidateInterruptPriority+0x58>)
  4013cc:	7812      	ldrb	r2, [r2, #0]
  4013ce:	429a      	cmp	r2, r3
  4013d0:	d90a      	bls.n	4013e8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4013d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013d6:	b672      	cpsid	i
  4013d8:	f383 8811 	msr	BASEPRI, r3
  4013dc:	f3bf 8f6f 	isb	sy
  4013e0:	f3bf 8f4f 	dsb	sy
  4013e4:	b662      	cpsie	i
  4013e6:	e7fe      	b.n	4013e6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4013e8:	4b0b      	ldr	r3, [pc, #44]	; (401418 <vPortValidateInterruptPriority+0x5c>)
  4013ea:	681b      	ldr	r3, [r3, #0]
  4013ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4013f0:	4a0a      	ldr	r2, [pc, #40]	; (40141c <vPortValidateInterruptPriority+0x60>)
  4013f2:	6812      	ldr	r2, [r2, #0]
  4013f4:	4293      	cmp	r3, r2
  4013f6:	d90a      	bls.n	40140e <vPortValidateInterruptPriority+0x52>
  4013f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013fc:	b672      	cpsid	i
  4013fe:	f383 8811 	msr	BASEPRI, r3
  401402:	f3bf 8f6f 	isb	sy
  401406:	f3bf 8f4f 	dsb	sy
  40140a:	b662      	cpsie	i
  40140c:	e7fe      	b.n	40140c <vPortValidateInterruptPriority+0x50>
  40140e:	4770      	bx	lr
  401410:	e000e3f0 	.word	0xe000e3f0
  401414:	20400a50 	.word	0x20400a50
  401418:	e000ed0c 	.word	0xe000ed0c
  40141c:	20400a54 	.word	0x20400a54

00401420 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401420:	b538      	push	{r3, r4, r5, lr}
  401422:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  401424:	f010 0f07 	tst.w	r0, #7
  401428:	d002      	beq.n	401430 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40142a:	f020 0407 	bic.w	r4, r0, #7
  40142e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  401430:	4b11      	ldr	r3, [pc, #68]	; (401478 <pvPortMalloc+0x58>)
  401432:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  401434:	4b11      	ldr	r3, [pc, #68]	; (40147c <pvPortMalloc+0x5c>)
  401436:	681b      	ldr	r3, [r3, #0]
  401438:	b193      	cbz	r3, 401460 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40143a:	4b11      	ldr	r3, [pc, #68]	; (401480 <pvPortMalloc+0x60>)
  40143c:	681b      	ldr	r3, [r3, #0]
  40143e:	441c      	add	r4, r3
  401440:	42a3      	cmp	r3, r4
  401442:	d213      	bcs.n	40146c <pvPortMalloc+0x4c>
  401444:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  401448:	4294      	cmp	r4, r2
  40144a:	d80f      	bhi.n	40146c <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40144c:	4a0b      	ldr	r2, [pc, #44]	; (40147c <pvPortMalloc+0x5c>)
  40144e:	6815      	ldr	r5, [r2, #0]
  401450:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  401452:	4b0b      	ldr	r3, [pc, #44]	; (401480 <pvPortMalloc+0x60>)
  401454:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401456:	4b0b      	ldr	r3, [pc, #44]	; (401484 <pvPortMalloc+0x64>)
  401458:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40145a:	b14d      	cbz	r5, 401470 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  40145c:	4628      	mov	r0, r5
  40145e:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  401460:	4b09      	ldr	r3, [pc, #36]	; (401488 <pvPortMalloc+0x68>)
  401462:	f023 0307 	bic.w	r3, r3, #7
  401466:	4a05      	ldr	r2, [pc, #20]	; (40147c <pvPortMalloc+0x5c>)
  401468:	6013      	str	r3, [r2, #0]
  40146a:	e7e6      	b.n	40143a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  40146c:	4b05      	ldr	r3, [pc, #20]	; (401484 <pvPortMalloc+0x64>)
  40146e:	4798      	blx	r3
			vApplicationMallocFailedHook();
  401470:	4b06      	ldr	r3, [pc, #24]	; (40148c <pvPortMalloc+0x6c>)
  401472:	4798      	blx	r3
  401474:	2500      	movs	r5, #0
	return pvReturn;
  401476:	e7f1      	b.n	40145c <pvPortMalloc+0x3c>
  401478:	004020fd 	.word	0x004020fd
  40147c:	20400a58 	.word	0x20400a58
  401480:	2040c25c 	.word	0x2040c25c
  401484:	00402265 	.word	0x00402265
  401488:	20400a64 	.word	0x20400a64
  40148c:	00403333 	.word	0x00403333

00401490 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401490:	b150      	cbz	r0, 4014a8 <vPortFree+0x18>
  401492:	f04f 0380 	mov.w	r3, #128	; 0x80
  401496:	b672      	cpsid	i
  401498:	f383 8811 	msr	BASEPRI, r3
  40149c:	f3bf 8f6f 	isb	sy
  4014a0:	f3bf 8f4f 	dsb	sy
  4014a4:	b662      	cpsie	i
  4014a6:	e7fe      	b.n	4014a6 <vPortFree+0x16>
  4014a8:	4770      	bx	lr
	...

004014ac <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4014ac:	b538      	push	{r3, r4, r5, lr}
  4014ae:	4604      	mov	r4, r0
  4014b0:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4014b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014b4:	b95a      	cbnz	r2, 4014ce <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4014b6:	6803      	ldr	r3, [r0, #0]
  4014b8:	2b00      	cmp	r3, #0
  4014ba:	d12e      	bne.n	40151a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4014bc:	6840      	ldr	r0, [r0, #4]
  4014be:	4b1b      	ldr	r3, [pc, #108]	; (40152c <prvCopyDataToQueue+0x80>)
  4014c0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4014c2:	2300      	movs	r3, #0
  4014c4:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4014c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014c8:	3301      	adds	r3, #1
  4014ca:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4014cc:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4014ce:	b96d      	cbnz	r5, 4014ec <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4014d0:	6880      	ldr	r0, [r0, #8]
  4014d2:	4b17      	ldr	r3, [pc, #92]	; (401530 <prvCopyDataToQueue+0x84>)
  4014d4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4014d6:	68a3      	ldr	r3, [r4, #8]
  4014d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4014da:	4413      	add	r3, r2
  4014dc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014de:	6862      	ldr	r2, [r4, #4]
  4014e0:	4293      	cmp	r3, r2
  4014e2:	d31c      	bcc.n	40151e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4014e4:	6823      	ldr	r3, [r4, #0]
  4014e6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4014e8:	2000      	movs	r0, #0
  4014ea:	e7ec      	b.n	4014c6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014ec:	68c0      	ldr	r0, [r0, #12]
  4014ee:	4b10      	ldr	r3, [pc, #64]	; (401530 <prvCopyDataToQueue+0x84>)
  4014f0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4014f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4014f4:	425b      	negs	r3, r3
  4014f6:	68e2      	ldr	r2, [r4, #12]
  4014f8:	441a      	add	r2, r3
  4014fa:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014fc:	6821      	ldr	r1, [r4, #0]
  4014fe:	428a      	cmp	r2, r1
  401500:	d202      	bcs.n	401508 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401502:	6862      	ldr	r2, [r4, #4]
  401504:	4413      	add	r3, r2
  401506:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401508:	2d02      	cmp	r5, #2
  40150a:	d10a      	bne.n	401522 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40150c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40150e:	b153      	cbz	r3, 401526 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401512:	3b01      	subs	r3, #1
  401514:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401516:	2000      	movs	r0, #0
  401518:	e7d5      	b.n	4014c6 <prvCopyDataToQueue+0x1a>
  40151a:	2000      	movs	r0, #0
  40151c:	e7d3      	b.n	4014c6 <prvCopyDataToQueue+0x1a>
  40151e:	2000      	movs	r0, #0
  401520:	e7d1      	b.n	4014c6 <prvCopyDataToQueue+0x1a>
  401522:	2000      	movs	r0, #0
  401524:	e7cf      	b.n	4014c6 <prvCopyDataToQueue+0x1a>
  401526:	2000      	movs	r0, #0
  401528:	e7cd      	b.n	4014c6 <prvCopyDataToQueue+0x1a>
  40152a:	bf00      	nop
  40152c:	004028ad 	.word	0x004028ad
  401530:	00403fcd 	.word	0x00403fcd

00401534 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401534:	b530      	push	{r4, r5, lr}
  401536:	b083      	sub	sp, #12
  401538:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40153a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40153c:	b174      	cbz	r4, 40155c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40153e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401542:	429a      	cmp	r2, r3
  401544:	d315      	bcc.n	401572 <prvNotifyQueueSetContainer+0x3e>
  401546:	f04f 0380 	mov.w	r3, #128	; 0x80
  40154a:	b672      	cpsid	i
  40154c:	f383 8811 	msr	BASEPRI, r3
  401550:	f3bf 8f6f 	isb	sy
  401554:	f3bf 8f4f 	dsb	sy
  401558:	b662      	cpsie	i
  40155a:	e7fe      	b.n	40155a <prvNotifyQueueSetContainer+0x26>
  40155c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401560:	b672      	cpsid	i
  401562:	f383 8811 	msr	BASEPRI, r3
  401566:	f3bf 8f6f 	isb	sy
  40156a:	f3bf 8f4f 	dsb	sy
  40156e:	b662      	cpsie	i
  401570:	e7fe      	b.n	401570 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401572:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401574:	4293      	cmp	r3, r2
  401576:	d803      	bhi.n	401580 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401578:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40157a:	4628      	mov	r0, r5
  40157c:	b003      	add	sp, #12
  40157e:	bd30      	pop	{r4, r5, pc}
  401580:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401582:	a901      	add	r1, sp, #4
  401584:	4620      	mov	r0, r4
  401586:	4b0b      	ldr	r3, [pc, #44]	; (4015b4 <prvNotifyQueueSetContainer+0x80>)
  401588:	4798      	blx	r3
  40158a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40158c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40158e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401592:	d10a      	bne.n	4015aa <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401594:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401596:	2b00      	cmp	r3, #0
  401598:	d0ef      	beq.n	40157a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40159a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40159e:	4b06      	ldr	r3, [pc, #24]	; (4015b8 <prvNotifyQueueSetContainer+0x84>)
  4015a0:	4798      	blx	r3
  4015a2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4015a4:	bf18      	it	ne
  4015a6:	2501      	movne	r5, #1
  4015a8:	e7e7      	b.n	40157a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4015aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015ac:	3301      	adds	r3, #1
  4015ae:	64a3      	str	r3, [r4, #72]	; 0x48
  4015b0:	e7e3      	b.n	40157a <prvNotifyQueueSetContainer+0x46>
  4015b2:	bf00      	nop
  4015b4:	004014ad 	.word	0x004014ad
  4015b8:	00402681 	.word	0x00402681

004015bc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4015bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4015be:	b172      	cbz	r2, 4015de <prvCopyDataFromQueue+0x22>
{
  4015c0:	b510      	push	{r4, lr}
  4015c2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4015c4:	68c4      	ldr	r4, [r0, #12]
  4015c6:	4414      	add	r4, r2
  4015c8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4015ca:	6840      	ldr	r0, [r0, #4]
  4015cc:	4284      	cmp	r4, r0
  4015ce:	d301      	bcc.n	4015d4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4015d0:	6818      	ldr	r0, [r3, #0]
  4015d2:	60d8      	str	r0, [r3, #12]
  4015d4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4015d6:	68d9      	ldr	r1, [r3, #12]
  4015d8:	4b01      	ldr	r3, [pc, #4]	; (4015e0 <prvCopyDataFromQueue+0x24>)
  4015da:	4798      	blx	r3
  4015dc:	bd10      	pop	{r4, pc}
  4015de:	4770      	bx	lr
  4015e0:	00403fcd 	.word	0x00403fcd

004015e4 <prvUnlockQueue>:
{
  4015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4015e8:	4b22      	ldr	r3, [pc, #136]	; (401674 <prvUnlockQueue+0x90>)
  4015ea:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4015ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	dd1b      	ble.n	40162a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015f2:	4d21      	ldr	r5, [pc, #132]	; (401678 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4015f4:	4f21      	ldr	r7, [pc, #132]	; (40167c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015f6:	4e22      	ldr	r6, [pc, #136]	; (401680 <prvUnlockQueue+0x9c>)
  4015f8:	e00b      	b.n	401612 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015fc:	b1ab      	cbz	r3, 40162a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401602:	47b0      	blx	r6
  401604:	b978      	cbnz	r0, 401626 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401606:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401608:	3b01      	subs	r3, #1
  40160a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40160c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40160e:	2b00      	cmp	r3, #0
  401610:	dd0b      	ble.n	40162a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401612:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401614:	2b00      	cmp	r3, #0
  401616:	d0f0      	beq.n	4015fa <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401618:	2100      	movs	r1, #0
  40161a:	4620      	mov	r0, r4
  40161c:	47a8      	blx	r5
  40161e:	2801      	cmp	r0, #1
  401620:	d1f1      	bne.n	401606 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401622:	47b8      	blx	r7
  401624:	e7ef      	b.n	401606 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401626:	47b8      	blx	r7
  401628:	e7ed      	b.n	401606 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40162a:	f04f 33ff 	mov.w	r3, #4294967295
  40162e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401630:	4b14      	ldr	r3, [pc, #80]	; (401684 <prvUnlockQueue+0xa0>)
  401632:	4798      	blx	r3
	taskENTER_CRITICAL();
  401634:	4b0f      	ldr	r3, [pc, #60]	; (401674 <prvUnlockQueue+0x90>)
  401636:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401638:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40163a:	2b00      	cmp	r3, #0
  40163c:	dd14      	ble.n	401668 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40163e:	6923      	ldr	r3, [r4, #16]
  401640:	b193      	cbz	r3, 401668 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401642:	f104 0610 	add.w	r6, r4, #16
  401646:	4d0e      	ldr	r5, [pc, #56]	; (401680 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401648:	4f0c      	ldr	r7, [pc, #48]	; (40167c <prvUnlockQueue+0x98>)
  40164a:	e007      	b.n	40165c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  40164c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40164e:	3b01      	subs	r3, #1
  401650:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401652:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401654:	2b00      	cmp	r3, #0
  401656:	dd07      	ble.n	401668 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401658:	6923      	ldr	r3, [r4, #16]
  40165a:	b12b      	cbz	r3, 401668 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40165c:	4630      	mov	r0, r6
  40165e:	47a8      	blx	r5
  401660:	2800      	cmp	r0, #0
  401662:	d0f3      	beq.n	40164c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401664:	47b8      	blx	r7
  401666:	e7f1      	b.n	40164c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401668:	f04f 33ff 	mov.w	r3, #4294967295
  40166c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40166e:	4b05      	ldr	r3, [pc, #20]	; (401684 <prvUnlockQueue+0xa0>)
  401670:	4798      	blx	r3
  401672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401674:	004011c5 	.word	0x004011c5
  401678:	00401535 	.word	0x00401535
  40167c:	004027dd 	.word	0x004027dd
  401680:	00402681 	.word	0x00402681
  401684:	00401211 	.word	0x00401211

00401688 <xQueueGenericReset>:
{
  401688:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40168a:	b308      	cbz	r0, 4016d0 <xQueueGenericReset+0x48>
  40168c:	4604      	mov	r4, r0
  40168e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401690:	4b1d      	ldr	r3, [pc, #116]	; (401708 <xQueueGenericReset+0x80>)
  401692:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401694:	6822      	ldr	r2, [r4, #0]
  401696:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40169a:	fb03 f301 	mul.w	r3, r3, r1
  40169e:	18d0      	adds	r0, r2, r3
  4016a0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4016a2:	2000      	movs	r0, #0
  4016a4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4016a6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4016a8:	1a5b      	subs	r3, r3, r1
  4016aa:	4413      	add	r3, r2
  4016ac:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4016ae:	f04f 33ff 	mov.w	r3, #4294967295
  4016b2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4016b4:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4016b6:	b9fd      	cbnz	r5, 4016f8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4016b8:	6923      	ldr	r3, [r4, #16]
  4016ba:	b12b      	cbz	r3, 4016c8 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4016bc:	f104 0010 	add.w	r0, r4, #16
  4016c0:	4b12      	ldr	r3, [pc, #72]	; (40170c <xQueueGenericReset+0x84>)
  4016c2:	4798      	blx	r3
  4016c4:	2801      	cmp	r0, #1
  4016c6:	d00e      	beq.n	4016e6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4016c8:	4b11      	ldr	r3, [pc, #68]	; (401710 <xQueueGenericReset+0x88>)
  4016ca:	4798      	blx	r3
}
  4016cc:	2001      	movs	r0, #1
  4016ce:	bd38      	pop	{r3, r4, r5, pc}
  4016d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d4:	b672      	cpsid	i
  4016d6:	f383 8811 	msr	BASEPRI, r3
  4016da:	f3bf 8f6f 	isb	sy
  4016de:	f3bf 8f4f 	dsb	sy
  4016e2:	b662      	cpsie	i
  4016e4:	e7fe      	b.n	4016e4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4016e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016ea:	4b0a      	ldr	r3, [pc, #40]	; (401714 <xQueueGenericReset+0x8c>)
  4016ec:	601a      	str	r2, [r3, #0]
  4016ee:	f3bf 8f4f 	dsb	sy
  4016f2:	f3bf 8f6f 	isb	sy
  4016f6:	e7e7      	b.n	4016c8 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4016f8:	f104 0010 	add.w	r0, r4, #16
  4016fc:	4d06      	ldr	r5, [pc, #24]	; (401718 <xQueueGenericReset+0x90>)
  4016fe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401700:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401704:	47a8      	blx	r5
  401706:	e7df      	b.n	4016c8 <xQueueGenericReset+0x40>
  401708:	004011c5 	.word	0x004011c5
  40170c:	00402681 	.word	0x00402681
  401710:	00401211 	.word	0x00401211
  401714:	e000ed04 	.word	0xe000ed04
  401718:	00401079 	.word	0x00401079

0040171c <xQueueGenericCreate>:
{
  40171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40171e:	b950      	cbnz	r0, 401736 <xQueueGenericCreate+0x1a>
  401720:	f04f 0380 	mov.w	r3, #128	; 0x80
  401724:	b672      	cpsid	i
  401726:	f383 8811 	msr	BASEPRI, r3
  40172a:	f3bf 8f6f 	isb	sy
  40172e:	f3bf 8f4f 	dsb	sy
  401732:	b662      	cpsie	i
  401734:	e7fe      	b.n	401734 <xQueueGenericCreate+0x18>
  401736:	4606      	mov	r6, r0
  401738:	4617      	mov	r7, r2
  40173a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  40173c:	b189      	cbz	r1, 401762 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40173e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401742:	3059      	adds	r0, #89	; 0x59
  401744:	4b12      	ldr	r3, [pc, #72]	; (401790 <xQueueGenericCreate+0x74>)
  401746:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401748:	4604      	mov	r4, r0
  40174a:	b9e8      	cbnz	r0, 401788 <xQueueGenericCreate+0x6c>
  40174c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401750:	b672      	cpsid	i
  401752:	f383 8811 	msr	BASEPRI, r3
  401756:	f3bf 8f6f 	isb	sy
  40175a:	f3bf 8f4f 	dsb	sy
  40175e:	b662      	cpsie	i
  401760:	e7fe      	b.n	401760 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401762:	2058      	movs	r0, #88	; 0x58
  401764:	4b0a      	ldr	r3, [pc, #40]	; (401790 <xQueueGenericCreate+0x74>)
  401766:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401768:	4604      	mov	r4, r0
  40176a:	2800      	cmp	r0, #0
  40176c:	d0ee      	beq.n	40174c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40176e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401770:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401772:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401774:	2101      	movs	r1, #1
  401776:	4620      	mov	r0, r4
  401778:	4b06      	ldr	r3, [pc, #24]	; (401794 <xQueueGenericCreate+0x78>)
  40177a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40177c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401780:	2300      	movs	r3, #0
  401782:	6563      	str	r3, [r4, #84]	; 0x54
}
  401784:	4620      	mov	r0, r4
  401786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401788:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40178c:	6003      	str	r3, [r0, #0]
  40178e:	e7ef      	b.n	401770 <xQueueGenericCreate+0x54>
  401790:	00401421 	.word	0x00401421
  401794:	00401689 	.word	0x00401689

00401798 <xQueueGenericSend>:
{
  401798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40179c:	b085      	sub	sp, #20
  40179e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4017a0:	b1b8      	cbz	r0, 4017d2 <xQueueGenericSend+0x3a>
  4017a2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017a4:	b301      	cbz	r1, 4017e8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017a6:	2b02      	cmp	r3, #2
  4017a8:	d02c      	beq.n	401804 <xQueueGenericSend+0x6c>
  4017aa:	461d      	mov	r5, r3
  4017ac:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4017ae:	4b66      	ldr	r3, [pc, #408]	; (401948 <xQueueGenericSend+0x1b0>)
  4017b0:	4798      	blx	r3
  4017b2:	2800      	cmp	r0, #0
  4017b4:	d134      	bne.n	401820 <xQueueGenericSend+0x88>
  4017b6:	9b01      	ldr	r3, [sp, #4]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d038      	beq.n	40182e <xQueueGenericSend+0x96>
  4017bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c0:	b672      	cpsid	i
  4017c2:	f383 8811 	msr	BASEPRI, r3
  4017c6:	f3bf 8f6f 	isb	sy
  4017ca:	f3bf 8f4f 	dsb	sy
  4017ce:	b662      	cpsie	i
  4017d0:	e7fe      	b.n	4017d0 <xQueueGenericSend+0x38>
  4017d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017d6:	b672      	cpsid	i
  4017d8:	f383 8811 	msr	BASEPRI, r3
  4017dc:	f3bf 8f6f 	isb	sy
  4017e0:	f3bf 8f4f 	dsb	sy
  4017e4:	b662      	cpsie	i
  4017e6:	e7fe      	b.n	4017e6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4017ea:	2a00      	cmp	r2, #0
  4017ec:	d0db      	beq.n	4017a6 <xQueueGenericSend+0xe>
  4017ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017f2:	b672      	cpsid	i
  4017f4:	f383 8811 	msr	BASEPRI, r3
  4017f8:	f3bf 8f6f 	isb	sy
  4017fc:	f3bf 8f4f 	dsb	sy
  401800:	b662      	cpsie	i
  401802:	e7fe      	b.n	401802 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401804:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401806:	2a01      	cmp	r2, #1
  401808:	d0cf      	beq.n	4017aa <xQueueGenericSend+0x12>
  40180a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40180e:	b672      	cpsid	i
  401810:	f383 8811 	msr	BASEPRI, r3
  401814:	f3bf 8f6f 	isb	sy
  401818:	f3bf 8f4f 	dsb	sy
  40181c:	b662      	cpsie	i
  40181e:	e7fe      	b.n	40181e <xQueueGenericSend+0x86>
  401820:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401822:	4e4a      	ldr	r6, [pc, #296]	; (40194c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401824:	f8df a150 	ldr.w	sl, [pc, #336]	; 401978 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401828:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401958 <xQueueGenericSend+0x1c0>
  40182c:	e042      	b.n	4018b4 <xQueueGenericSend+0x11c>
  40182e:	2700      	movs	r7, #0
  401830:	e7f7      	b.n	401822 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401832:	462a      	mov	r2, r5
  401834:	4641      	mov	r1, r8
  401836:	4620      	mov	r0, r4
  401838:	4b45      	ldr	r3, [pc, #276]	; (401950 <xQueueGenericSend+0x1b8>)
  40183a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40183c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40183e:	b19b      	cbz	r3, 401868 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401840:	4629      	mov	r1, r5
  401842:	4620      	mov	r0, r4
  401844:	4b43      	ldr	r3, [pc, #268]	; (401954 <xQueueGenericSend+0x1bc>)
  401846:	4798      	blx	r3
  401848:	2801      	cmp	r0, #1
  40184a:	d107      	bne.n	40185c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40184c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401850:	4b41      	ldr	r3, [pc, #260]	; (401958 <xQueueGenericSend+0x1c0>)
  401852:	601a      	str	r2, [r3, #0]
  401854:	f3bf 8f4f 	dsb	sy
  401858:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40185c:	4b3f      	ldr	r3, [pc, #252]	; (40195c <xQueueGenericSend+0x1c4>)
  40185e:	4798      	blx	r3
				return pdPASS;
  401860:	2001      	movs	r0, #1
}
  401862:	b005      	add	sp, #20
  401864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401868:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40186a:	b173      	cbz	r3, 40188a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40186c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401870:	4b3b      	ldr	r3, [pc, #236]	; (401960 <xQueueGenericSend+0x1c8>)
  401872:	4798      	blx	r3
  401874:	2801      	cmp	r0, #1
  401876:	d1f1      	bne.n	40185c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40187c:	4b36      	ldr	r3, [pc, #216]	; (401958 <xQueueGenericSend+0x1c0>)
  40187e:	601a      	str	r2, [r3, #0]
  401880:	f3bf 8f4f 	dsb	sy
  401884:	f3bf 8f6f 	isb	sy
  401888:	e7e8      	b.n	40185c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40188a:	2800      	cmp	r0, #0
  40188c:	d0e6      	beq.n	40185c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40188e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401892:	4b31      	ldr	r3, [pc, #196]	; (401958 <xQueueGenericSend+0x1c0>)
  401894:	601a      	str	r2, [r3, #0]
  401896:	f3bf 8f4f 	dsb	sy
  40189a:	f3bf 8f6f 	isb	sy
  40189e:	e7dd      	b.n	40185c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4018a0:	4b2e      	ldr	r3, [pc, #184]	; (40195c <xQueueGenericSend+0x1c4>)
  4018a2:	4798      	blx	r3
					return errQUEUE_FULL;
  4018a4:	2000      	movs	r0, #0
  4018a6:	e7dc      	b.n	401862 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4018a8:	4620      	mov	r0, r4
  4018aa:	4b2e      	ldr	r3, [pc, #184]	; (401964 <xQueueGenericSend+0x1cc>)
  4018ac:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4018ae:	4b2e      	ldr	r3, [pc, #184]	; (401968 <xQueueGenericSend+0x1d0>)
  4018b0:	4798      	blx	r3
  4018b2:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4018b4:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018ba:	429a      	cmp	r2, r3
  4018bc:	d3b9      	bcc.n	401832 <xQueueGenericSend+0x9a>
  4018be:	2d02      	cmp	r5, #2
  4018c0:	d0b7      	beq.n	401832 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4018c2:	9b01      	ldr	r3, [sp, #4]
  4018c4:	2b00      	cmp	r3, #0
  4018c6:	d0eb      	beq.n	4018a0 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4018c8:	b90f      	cbnz	r7, 4018ce <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4018ca:	a802      	add	r0, sp, #8
  4018cc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4018ce:	4b23      	ldr	r3, [pc, #140]	; (40195c <xQueueGenericSend+0x1c4>)
  4018d0:	4798      	blx	r3
		vTaskSuspendAll();
  4018d2:	4b26      	ldr	r3, [pc, #152]	; (40196c <xQueueGenericSend+0x1d4>)
  4018d4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4018d6:	47b0      	blx	r6
  4018d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4018da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018de:	d101      	bne.n	4018e4 <xQueueGenericSend+0x14c>
  4018e0:	2300      	movs	r3, #0
  4018e2:	6463      	str	r3, [r4, #68]	; 0x44
  4018e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018ea:	d101      	bne.n	4018f0 <xQueueGenericSend+0x158>
  4018ec:	2300      	movs	r3, #0
  4018ee:	64a3      	str	r3, [r4, #72]	; 0x48
  4018f0:	4b1a      	ldr	r3, [pc, #104]	; (40195c <xQueueGenericSend+0x1c4>)
  4018f2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4018f4:	a901      	add	r1, sp, #4
  4018f6:	a802      	add	r0, sp, #8
  4018f8:	4b1d      	ldr	r3, [pc, #116]	; (401970 <xQueueGenericSend+0x1d8>)
  4018fa:	4798      	blx	r3
  4018fc:	b9e0      	cbnz	r0, 401938 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4018fe:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401900:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401904:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401906:	4b15      	ldr	r3, [pc, #84]	; (40195c <xQueueGenericSend+0x1c4>)
  401908:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40190a:	45bb      	cmp	fp, r7
  40190c:	d1cc      	bne.n	4018a8 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40190e:	9901      	ldr	r1, [sp, #4]
  401910:	f104 0010 	add.w	r0, r4, #16
  401914:	4b17      	ldr	r3, [pc, #92]	; (401974 <xQueueGenericSend+0x1dc>)
  401916:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401918:	4620      	mov	r0, r4
  40191a:	4b12      	ldr	r3, [pc, #72]	; (401964 <xQueueGenericSend+0x1cc>)
  40191c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40191e:	4b12      	ldr	r3, [pc, #72]	; (401968 <xQueueGenericSend+0x1d0>)
  401920:	4798      	blx	r3
  401922:	2800      	cmp	r0, #0
  401924:	d1c5      	bne.n	4018b2 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40192a:	f8c9 3000 	str.w	r3, [r9]
  40192e:	f3bf 8f4f 	dsb	sy
  401932:	f3bf 8f6f 	isb	sy
  401936:	e7bc      	b.n	4018b2 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401938:	4620      	mov	r0, r4
  40193a:	4b0a      	ldr	r3, [pc, #40]	; (401964 <xQueueGenericSend+0x1cc>)
  40193c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40193e:	4b0a      	ldr	r3, [pc, #40]	; (401968 <xQueueGenericSend+0x1d0>)
  401940:	4798      	blx	r3
			return errQUEUE_FULL;
  401942:	2000      	movs	r0, #0
  401944:	e78d      	b.n	401862 <xQueueGenericSend+0xca>
  401946:	bf00      	nop
  401948:	004027e9 	.word	0x004027e9
  40194c:	004011c5 	.word	0x004011c5
  401950:	004014ad 	.word	0x004014ad
  401954:	00401535 	.word	0x00401535
  401958:	e000ed04 	.word	0xe000ed04
  40195c:	00401211 	.word	0x00401211
  401960:	00402681 	.word	0x00402681
  401964:	004015e5 	.word	0x004015e5
  401968:	00402265 	.word	0x00402265
  40196c:	004020fd 	.word	0x004020fd
  401970:	00402749 	.word	0x00402749
  401974:	0040257d 	.word	0x0040257d
  401978:	00402719 	.word	0x00402719

0040197c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  40197c:	2800      	cmp	r0, #0
  40197e:	d036      	beq.n	4019ee <xQueueGenericSendFromISR+0x72>
{
  401980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401984:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401986:	2900      	cmp	r1, #0
  401988:	d03c      	beq.n	401a04 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40198a:	2b02      	cmp	r3, #2
  40198c:	d048      	beq.n	401a20 <xQueueGenericSendFromISR+0xa4>
  40198e:	461e      	mov	r6, r3
  401990:	4615      	mov	r5, r2
  401992:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401994:	4b35      	ldr	r3, [pc, #212]	; (401a6c <xQueueGenericSendFromISR+0xf0>)
  401996:	4798      	blx	r3
	__asm volatile
  401998:	f3ef 8711 	mrs	r7, BASEPRI
  40199c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019a0:	b672      	cpsid	i
  4019a2:	f383 8811 	msr	BASEPRI, r3
  4019a6:	f3bf 8f6f 	isb	sy
  4019aa:	f3bf 8f4f 	dsb	sy
  4019ae:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4019b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4019b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019b4:	429a      	cmp	r2, r3
  4019b6:	d301      	bcc.n	4019bc <xQueueGenericSendFromISR+0x40>
  4019b8:	2e02      	cmp	r6, #2
  4019ba:	d14f      	bne.n	401a5c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4019bc:	4632      	mov	r2, r6
  4019be:	4641      	mov	r1, r8
  4019c0:	4620      	mov	r0, r4
  4019c2:	4b2b      	ldr	r3, [pc, #172]	; (401a70 <xQueueGenericSendFromISR+0xf4>)
  4019c4:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4019c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019cc:	d141      	bne.n	401a52 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4019ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019d0:	2b00      	cmp	r3, #0
  4019d2:	d033      	beq.n	401a3c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4019d4:	4631      	mov	r1, r6
  4019d6:	4620      	mov	r0, r4
  4019d8:	4b26      	ldr	r3, [pc, #152]	; (401a74 <xQueueGenericSendFromISR+0xf8>)
  4019da:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4019dc:	2d00      	cmp	r5, #0
  4019de:	d03f      	beq.n	401a60 <xQueueGenericSendFromISR+0xe4>
  4019e0:	2801      	cmp	r0, #1
  4019e2:	d13d      	bne.n	401a60 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4019e4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4019e6:	f387 8811 	msr	BASEPRI, r7
}
  4019ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4019ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019f2:	b672      	cpsid	i
  4019f4:	f383 8811 	msr	BASEPRI, r3
  4019f8:	f3bf 8f6f 	isb	sy
  4019fc:	f3bf 8f4f 	dsb	sy
  401a00:	b662      	cpsie	i
  401a02:	e7fe      	b.n	401a02 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a04:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401a06:	2800      	cmp	r0, #0
  401a08:	d0bf      	beq.n	40198a <xQueueGenericSendFromISR+0xe>
  401a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a0e:	b672      	cpsid	i
  401a10:	f383 8811 	msr	BASEPRI, r3
  401a14:	f3bf 8f6f 	isb	sy
  401a18:	f3bf 8f4f 	dsb	sy
  401a1c:	b662      	cpsie	i
  401a1e:	e7fe      	b.n	401a1e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401a20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401a22:	2801      	cmp	r0, #1
  401a24:	d0b3      	beq.n	40198e <xQueueGenericSendFromISR+0x12>
  401a26:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a2a:	b672      	cpsid	i
  401a2c:	f383 8811 	msr	BASEPRI, r3
  401a30:	f3bf 8f6f 	isb	sy
  401a34:	f3bf 8f4f 	dsb	sy
  401a38:	b662      	cpsie	i
  401a3a:	e7fe      	b.n	401a3a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a3e:	b18b      	cbz	r3, 401a64 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a40:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a44:	4b0c      	ldr	r3, [pc, #48]	; (401a78 <xQueueGenericSendFromISR+0xfc>)
  401a46:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a48:	b175      	cbz	r5, 401a68 <xQueueGenericSendFromISR+0xec>
  401a4a:	b168      	cbz	r0, 401a68 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a4c:	2001      	movs	r0, #1
  401a4e:	6028      	str	r0, [r5, #0]
  401a50:	e7c9      	b.n	4019e6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401a52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a54:	3301      	adds	r3, #1
  401a56:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a58:	2001      	movs	r0, #1
  401a5a:	e7c4      	b.n	4019e6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401a5c:	2000      	movs	r0, #0
  401a5e:	e7c2      	b.n	4019e6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401a60:	2001      	movs	r0, #1
  401a62:	e7c0      	b.n	4019e6 <xQueueGenericSendFromISR+0x6a>
  401a64:	2001      	movs	r0, #1
  401a66:	e7be      	b.n	4019e6 <xQueueGenericSendFromISR+0x6a>
  401a68:	2001      	movs	r0, #1
  401a6a:	e7bc      	b.n	4019e6 <xQueueGenericSendFromISR+0x6a>
  401a6c:	004013bd 	.word	0x004013bd
  401a70:	004014ad 	.word	0x004014ad
  401a74:	00401535 	.word	0x00401535
  401a78:	00402681 	.word	0x00402681

00401a7c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401a7c:	b170      	cbz	r0, 401a9c <xQueueGiveFromISR+0x20>
{
  401a7e:	b570      	push	{r4, r5, r6, lr}
  401a80:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401a82:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401a84:	b1ab      	cbz	r3, 401ab2 <xQueueGiveFromISR+0x36>
  401a86:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a8a:	b672      	cpsid	i
  401a8c:	f383 8811 	msr	BASEPRI, r3
  401a90:	f3bf 8f6f 	isb	sy
  401a94:	f3bf 8f4f 	dsb	sy
  401a98:	b662      	cpsie	i
  401a9a:	e7fe      	b.n	401a9a <xQueueGiveFromISR+0x1e>
  401a9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa0:	b672      	cpsid	i
  401aa2:	f383 8811 	msr	BASEPRI, r3
  401aa6:	f3bf 8f6f 	isb	sy
  401aaa:	f3bf 8f4f 	dsb	sy
  401aae:	b662      	cpsie	i
  401ab0:	e7fe      	b.n	401ab0 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401ab2:	6803      	ldr	r3, [r0, #0]
  401ab4:	b333      	cbz	r3, 401b04 <xQueueGiveFromISR+0x88>
  401ab6:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401ab8:	4b25      	ldr	r3, [pc, #148]	; (401b50 <xQueueGiveFromISR+0xd4>)
  401aba:	4798      	blx	r3
	__asm volatile
  401abc:	f3ef 8611 	mrs	r6, BASEPRI
  401ac0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac4:	b672      	cpsid	i
  401ac6:	f383 8811 	msr	BASEPRI, r3
  401aca:	f3bf 8f6f 	isb	sy
  401ace:	f3bf 8f4f 	dsb	sy
  401ad2:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401ad4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ad6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ad8:	429a      	cmp	r2, r3
  401ada:	d231      	bcs.n	401b40 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ade:	3301      	adds	r3, #1
  401ae0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401ae2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ae8:	d125      	bne.n	401b36 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401aea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401aec:	b1c3      	cbz	r3, 401b20 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401aee:	2100      	movs	r1, #0
  401af0:	4620      	mov	r0, r4
  401af2:	4b18      	ldr	r3, [pc, #96]	; (401b54 <xQueueGiveFromISR+0xd8>)
  401af4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401af6:	b32d      	cbz	r5, 401b44 <xQueueGiveFromISR+0xc8>
  401af8:	2801      	cmp	r0, #1
  401afa:	d123      	bne.n	401b44 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401afc:	6028      	str	r0, [r5, #0]
	__asm volatile
  401afe:	f386 8811 	msr	BASEPRI, r6
}
  401b02:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401b04:	6843      	ldr	r3, [r0, #4]
  401b06:	2b00      	cmp	r3, #0
  401b08:	d0d5      	beq.n	401ab6 <xQueueGiveFromISR+0x3a>
	__asm volatile
  401b0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b0e:	b672      	cpsid	i
  401b10:	f383 8811 	msr	BASEPRI, r3
  401b14:	f3bf 8f6f 	isb	sy
  401b18:	f3bf 8f4f 	dsb	sy
  401b1c:	b662      	cpsie	i
  401b1e:	e7fe      	b.n	401b1e <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b22:	b18b      	cbz	r3, 401b48 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401b24:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b28:	4b0b      	ldr	r3, [pc, #44]	; (401b58 <xQueueGiveFromISR+0xdc>)
  401b2a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401b2c:	b175      	cbz	r5, 401b4c <xQueueGiveFromISR+0xd0>
  401b2e:	b168      	cbz	r0, 401b4c <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401b30:	2001      	movs	r0, #1
  401b32:	6028      	str	r0, [r5, #0]
  401b34:	e7e3      	b.n	401afe <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401b36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b38:	3301      	adds	r3, #1
  401b3a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401b3c:	2001      	movs	r0, #1
  401b3e:	e7de      	b.n	401afe <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401b40:	2000      	movs	r0, #0
  401b42:	e7dc      	b.n	401afe <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401b44:	2001      	movs	r0, #1
  401b46:	e7da      	b.n	401afe <xQueueGiveFromISR+0x82>
  401b48:	2001      	movs	r0, #1
  401b4a:	e7d8      	b.n	401afe <xQueueGiveFromISR+0x82>
  401b4c:	2001      	movs	r0, #1
  401b4e:	e7d6      	b.n	401afe <xQueueGiveFromISR+0x82>
  401b50:	004013bd 	.word	0x004013bd
  401b54:	00401535 	.word	0x00401535
  401b58:	00402681 	.word	0x00402681

00401b5c <xQueueGenericReceive>:
{
  401b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b60:	b084      	sub	sp, #16
  401b62:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b64:	b198      	cbz	r0, 401b8e <xQueueGenericReceive+0x32>
  401b66:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b68:	b1e1      	cbz	r1, 401ba4 <xQueueGenericReceive+0x48>
  401b6a:	4698      	mov	r8, r3
  401b6c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b6e:	4b61      	ldr	r3, [pc, #388]	; (401cf4 <xQueueGenericReceive+0x198>)
  401b70:	4798      	blx	r3
  401b72:	bb28      	cbnz	r0, 401bc0 <xQueueGenericReceive+0x64>
  401b74:	9b01      	ldr	r3, [sp, #4]
  401b76:	b353      	cbz	r3, 401bce <xQueueGenericReceive+0x72>
  401b78:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b7c:	b672      	cpsid	i
  401b7e:	f383 8811 	msr	BASEPRI, r3
  401b82:	f3bf 8f6f 	isb	sy
  401b86:	f3bf 8f4f 	dsb	sy
  401b8a:	b662      	cpsie	i
  401b8c:	e7fe      	b.n	401b8c <xQueueGenericReceive+0x30>
  401b8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b92:	b672      	cpsid	i
  401b94:	f383 8811 	msr	BASEPRI, r3
  401b98:	f3bf 8f6f 	isb	sy
  401b9c:	f3bf 8f4f 	dsb	sy
  401ba0:	b662      	cpsie	i
  401ba2:	e7fe      	b.n	401ba2 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ba4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401ba6:	2a00      	cmp	r2, #0
  401ba8:	d0df      	beq.n	401b6a <xQueueGenericReceive+0xe>
  401baa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bae:	b672      	cpsid	i
  401bb0:	f383 8811 	msr	BASEPRI, r3
  401bb4:	f3bf 8f6f 	isb	sy
  401bb8:	f3bf 8f4f 	dsb	sy
  401bbc:	b662      	cpsie	i
  401bbe:	e7fe      	b.n	401bbe <xQueueGenericReceive+0x62>
  401bc0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401bc2:	4d4d      	ldr	r5, [pc, #308]	; (401cf8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401bc4:	f8df a160 	ldr.w	sl, [pc, #352]	; 401d28 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401bc8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401d08 <xQueueGenericReceive+0x1ac>
  401bcc:	e04b      	b.n	401c66 <xQueueGenericReceive+0x10a>
  401bce:	2600      	movs	r6, #0
  401bd0:	e7f7      	b.n	401bc2 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401bd2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401bd4:	4639      	mov	r1, r7
  401bd6:	4620      	mov	r0, r4
  401bd8:	4b48      	ldr	r3, [pc, #288]	; (401cfc <xQueueGenericReceive+0x1a0>)
  401bda:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401bdc:	f1b8 0f00 	cmp.w	r8, #0
  401be0:	d11d      	bne.n	401c1e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401be4:	3b01      	subs	r3, #1
  401be6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401be8:	6823      	ldr	r3, [r4, #0]
  401bea:	b913      	cbnz	r3, 401bf2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401bec:	4b44      	ldr	r3, [pc, #272]	; (401d00 <xQueueGenericReceive+0x1a4>)
  401bee:	4798      	blx	r3
  401bf0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401bf2:	6923      	ldr	r3, [r4, #16]
  401bf4:	b16b      	cbz	r3, 401c12 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401bf6:	f104 0010 	add.w	r0, r4, #16
  401bfa:	4b42      	ldr	r3, [pc, #264]	; (401d04 <xQueueGenericReceive+0x1a8>)
  401bfc:	4798      	blx	r3
  401bfe:	2801      	cmp	r0, #1
  401c00:	d107      	bne.n	401c12 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c06:	4b40      	ldr	r3, [pc, #256]	; (401d08 <xQueueGenericReceive+0x1ac>)
  401c08:	601a      	str	r2, [r3, #0]
  401c0a:	f3bf 8f4f 	dsb	sy
  401c0e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401c12:	4b3e      	ldr	r3, [pc, #248]	; (401d0c <xQueueGenericReceive+0x1b0>)
  401c14:	4798      	blx	r3
				return pdPASS;
  401c16:	2001      	movs	r0, #1
}
  401c18:	b004      	add	sp, #16
  401c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401c1e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c22:	2b00      	cmp	r3, #0
  401c24:	d0f5      	beq.n	401c12 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c2a:	4b36      	ldr	r3, [pc, #216]	; (401d04 <xQueueGenericReceive+0x1a8>)
  401c2c:	4798      	blx	r3
  401c2e:	2800      	cmp	r0, #0
  401c30:	d0ef      	beq.n	401c12 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c36:	4b34      	ldr	r3, [pc, #208]	; (401d08 <xQueueGenericReceive+0x1ac>)
  401c38:	601a      	str	r2, [r3, #0]
  401c3a:	f3bf 8f4f 	dsb	sy
  401c3e:	f3bf 8f6f 	isb	sy
  401c42:	e7e6      	b.n	401c12 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401c44:	4b31      	ldr	r3, [pc, #196]	; (401d0c <xQueueGenericReceive+0x1b0>)
  401c46:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401c48:	2000      	movs	r0, #0
  401c4a:	e7e5      	b.n	401c18 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401c4c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401c4e:	6860      	ldr	r0, [r4, #4]
  401c50:	4b2f      	ldr	r3, [pc, #188]	; (401d10 <xQueueGenericReceive+0x1b4>)
  401c52:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401c54:	4b2d      	ldr	r3, [pc, #180]	; (401d0c <xQueueGenericReceive+0x1b0>)
  401c56:	4798      	blx	r3
  401c58:	e030      	b.n	401cbc <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401c5a:	4620      	mov	r0, r4
  401c5c:	4b2d      	ldr	r3, [pc, #180]	; (401d14 <xQueueGenericReceive+0x1b8>)
  401c5e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c60:	4b2d      	ldr	r3, [pc, #180]	; (401d18 <xQueueGenericReceive+0x1bc>)
  401c62:	4798      	blx	r3
  401c64:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401c66:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d1b1      	bne.n	401bd2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c6e:	9b01      	ldr	r3, [sp, #4]
  401c70:	2b00      	cmp	r3, #0
  401c72:	d0e7      	beq.n	401c44 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401c74:	b90e      	cbnz	r6, 401c7a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401c76:	a802      	add	r0, sp, #8
  401c78:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c7a:	4b24      	ldr	r3, [pc, #144]	; (401d0c <xQueueGenericReceive+0x1b0>)
  401c7c:	4798      	blx	r3
		vTaskSuspendAll();
  401c7e:	4b27      	ldr	r3, [pc, #156]	; (401d1c <xQueueGenericReceive+0x1c0>)
  401c80:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c82:	47a8      	blx	r5
  401c84:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c86:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c8a:	d101      	bne.n	401c90 <xQueueGenericReceive+0x134>
  401c8c:	2300      	movs	r3, #0
  401c8e:	6463      	str	r3, [r4, #68]	; 0x44
  401c90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c92:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c96:	d101      	bne.n	401c9c <xQueueGenericReceive+0x140>
  401c98:	2300      	movs	r3, #0
  401c9a:	64a3      	str	r3, [r4, #72]	; 0x48
  401c9c:	4b1b      	ldr	r3, [pc, #108]	; (401d0c <xQueueGenericReceive+0x1b0>)
  401c9e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401ca0:	a901      	add	r1, sp, #4
  401ca2:	a802      	add	r0, sp, #8
  401ca4:	4b1e      	ldr	r3, [pc, #120]	; (401d20 <xQueueGenericReceive+0x1c4>)
  401ca6:	4798      	blx	r3
  401ca8:	b9e8      	cbnz	r0, 401ce6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401caa:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401cac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401cae:	4b17      	ldr	r3, [pc, #92]	; (401d0c <xQueueGenericReceive+0x1b0>)
  401cb0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401cb2:	2e00      	cmp	r6, #0
  401cb4:	d1d1      	bne.n	401c5a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401cb6:	6823      	ldr	r3, [r4, #0]
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d0c7      	beq.n	401c4c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401cbc:	9901      	ldr	r1, [sp, #4]
  401cbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cc2:	4b18      	ldr	r3, [pc, #96]	; (401d24 <xQueueGenericReceive+0x1c8>)
  401cc4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401cc6:	4620      	mov	r0, r4
  401cc8:	4b12      	ldr	r3, [pc, #72]	; (401d14 <xQueueGenericReceive+0x1b8>)
  401cca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ccc:	4b12      	ldr	r3, [pc, #72]	; (401d18 <xQueueGenericReceive+0x1bc>)
  401cce:	4798      	blx	r3
  401cd0:	2800      	cmp	r0, #0
  401cd2:	d1c7      	bne.n	401c64 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cd8:	f8c9 3000 	str.w	r3, [r9]
  401cdc:	f3bf 8f4f 	dsb	sy
  401ce0:	f3bf 8f6f 	isb	sy
  401ce4:	e7be      	b.n	401c64 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401ce6:	4620      	mov	r0, r4
  401ce8:	4b0a      	ldr	r3, [pc, #40]	; (401d14 <xQueueGenericReceive+0x1b8>)
  401cea:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401cec:	4b0a      	ldr	r3, [pc, #40]	; (401d18 <xQueueGenericReceive+0x1bc>)
  401cee:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401cf0:	2000      	movs	r0, #0
  401cf2:	e791      	b.n	401c18 <xQueueGenericReceive+0xbc>
  401cf4:	004027e9 	.word	0x004027e9
  401cf8:	004011c5 	.word	0x004011c5
  401cfc:	004015bd 	.word	0x004015bd
  401d00:	00402969 	.word	0x00402969
  401d04:	00402681 	.word	0x00402681
  401d08:	e000ed04 	.word	0xe000ed04
  401d0c:	00401211 	.word	0x00401211
  401d10:	00402809 	.word	0x00402809
  401d14:	004015e5 	.word	0x004015e5
  401d18:	00402265 	.word	0x00402265
  401d1c:	004020fd 	.word	0x004020fd
  401d20:	00402749 	.word	0x00402749
  401d24:	0040257d 	.word	0x0040257d
  401d28:	00402719 	.word	0x00402719

00401d2c <vQueueAddToRegistry>:
	{
  401d2c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401d2e:	4b0b      	ldr	r3, [pc, #44]	; (401d5c <vQueueAddToRegistry+0x30>)
  401d30:	681b      	ldr	r3, [r3, #0]
  401d32:	b153      	cbz	r3, 401d4a <vQueueAddToRegistry+0x1e>
  401d34:	2301      	movs	r3, #1
  401d36:	4c09      	ldr	r4, [pc, #36]	; (401d5c <vQueueAddToRegistry+0x30>)
  401d38:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401d3c:	b132      	cbz	r2, 401d4c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d3e:	3301      	adds	r3, #1
  401d40:	2b08      	cmp	r3, #8
  401d42:	d1f9      	bne.n	401d38 <vQueueAddToRegistry+0xc>
	}
  401d44:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d48:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401d4a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401d4c:	4a03      	ldr	r2, [pc, #12]	; (401d5c <vQueueAddToRegistry+0x30>)
  401d4e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401d52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401d56:	6058      	str	r0, [r3, #4]
				break;
  401d58:	e7f4      	b.n	401d44 <vQueueAddToRegistry+0x18>
  401d5a:	bf00      	nop
  401d5c:	2040c458 	.word	0x2040c458

00401d60 <vQueueWaitForMessageRestricted>:
	{
  401d60:	b570      	push	{r4, r5, r6, lr}
  401d62:	4604      	mov	r4, r0
  401d64:	460d      	mov	r5, r1
  401d66:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401d68:	4b0f      	ldr	r3, [pc, #60]	; (401da8 <vQueueWaitForMessageRestricted+0x48>)
  401d6a:	4798      	blx	r3
  401d6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d72:	d00b      	beq.n	401d8c <vQueueWaitForMessageRestricted+0x2c>
  401d74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d76:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d7a:	d00a      	beq.n	401d92 <vQueueWaitForMessageRestricted+0x32>
  401d7c:	4b0b      	ldr	r3, [pc, #44]	; (401dac <vQueueWaitForMessageRestricted+0x4c>)
  401d7e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d82:	b14b      	cbz	r3, 401d98 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401d84:	4620      	mov	r0, r4
  401d86:	4b0a      	ldr	r3, [pc, #40]	; (401db0 <vQueueWaitForMessageRestricted+0x50>)
  401d88:	4798      	blx	r3
  401d8a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d8c:	2300      	movs	r3, #0
  401d8e:	6463      	str	r3, [r4, #68]	; 0x44
  401d90:	e7f0      	b.n	401d74 <vQueueWaitForMessageRestricted+0x14>
  401d92:	2300      	movs	r3, #0
  401d94:	64a3      	str	r3, [r4, #72]	; 0x48
  401d96:	e7f1      	b.n	401d7c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d98:	4632      	mov	r2, r6
  401d9a:	4629      	mov	r1, r5
  401d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401da0:	4b04      	ldr	r3, [pc, #16]	; (401db4 <vQueueWaitForMessageRestricted+0x54>)
  401da2:	4798      	blx	r3
  401da4:	e7ee      	b.n	401d84 <vQueueWaitForMessageRestricted+0x24>
  401da6:	bf00      	nop
  401da8:	004011c5 	.word	0x004011c5
  401dac:	00401211 	.word	0x00401211
  401db0:	004015e5 	.word	0x004015e5
  401db4:	00402601 	.word	0x00402601

00401db8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401db8:	4b08      	ldr	r3, [pc, #32]	; (401ddc <prvResetNextTaskUnblockTime+0x24>)
  401dba:	681b      	ldr	r3, [r3, #0]
  401dbc:	681b      	ldr	r3, [r3, #0]
  401dbe:	b13b      	cbz	r3, 401dd0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401dc0:	4b06      	ldr	r3, [pc, #24]	; (401ddc <prvResetNextTaskUnblockTime+0x24>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401dc6:	68db      	ldr	r3, [r3, #12]
  401dc8:	685a      	ldr	r2, [r3, #4]
  401dca:	4b05      	ldr	r3, [pc, #20]	; (401de0 <prvResetNextTaskUnblockTime+0x28>)
  401dcc:	601a      	str	r2, [r3, #0]
  401dce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401dd0:	f04f 32ff 	mov.w	r2, #4294967295
  401dd4:	4b02      	ldr	r3, [pc, #8]	; (401de0 <prvResetNextTaskUnblockTime+0x28>)
  401dd6:	601a      	str	r2, [r3, #0]
  401dd8:	4770      	bx	lr
  401dda:	bf00      	nop
  401ddc:	2040c264 	.word	0x2040c264
  401de0:	2040c310 	.word	0x2040c310

00401de4 <prvAddCurrentTaskToDelayedList>:
{
  401de4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401de6:	4b0f      	ldr	r3, [pc, #60]	; (401e24 <prvAddCurrentTaskToDelayedList+0x40>)
  401de8:	681b      	ldr	r3, [r3, #0]
  401dea:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401dec:	4b0e      	ldr	r3, [pc, #56]	; (401e28 <prvAddCurrentTaskToDelayedList+0x44>)
  401dee:	681b      	ldr	r3, [r3, #0]
  401df0:	4298      	cmp	r0, r3
  401df2:	d30e      	bcc.n	401e12 <prvAddCurrentTaskToDelayedList+0x2e>
  401df4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401df6:	4b0d      	ldr	r3, [pc, #52]	; (401e2c <prvAddCurrentTaskToDelayedList+0x48>)
  401df8:	6818      	ldr	r0, [r3, #0]
  401dfa:	4b0a      	ldr	r3, [pc, #40]	; (401e24 <prvAddCurrentTaskToDelayedList+0x40>)
  401dfc:	6819      	ldr	r1, [r3, #0]
  401dfe:	3104      	adds	r1, #4
  401e00:	4b0b      	ldr	r3, [pc, #44]	; (401e30 <prvAddCurrentTaskToDelayedList+0x4c>)
  401e02:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401e04:	4b0b      	ldr	r3, [pc, #44]	; (401e34 <prvAddCurrentTaskToDelayedList+0x50>)
  401e06:	681b      	ldr	r3, [r3, #0]
  401e08:	429c      	cmp	r4, r3
  401e0a:	d201      	bcs.n	401e10 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401e0c:	4b09      	ldr	r3, [pc, #36]	; (401e34 <prvAddCurrentTaskToDelayedList+0x50>)
  401e0e:	601c      	str	r4, [r3, #0]
  401e10:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401e12:	4b09      	ldr	r3, [pc, #36]	; (401e38 <prvAddCurrentTaskToDelayedList+0x54>)
  401e14:	6818      	ldr	r0, [r3, #0]
  401e16:	4b03      	ldr	r3, [pc, #12]	; (401e24 <prvAddCurrentTaskToDelayedList+0x40>)
  401e18:	6819      	ldr	r1, [r3, #0]
  401e1a:	3104      	adds	r1, #4
  401e1c:	4b04      	ldr	r3, [pc, #16]	; (401e30 <prvAddCurrentTaskToDelayedList+0x4c>)
  401e1e:	4798      	blx	r3
  401e20:	bd10      	pop	{r4, pc}
  401e22:	bf00      	nop
  401e24:	2040c260 	.word	0x2040c260
  401e28:	2040c358 	.word	0x2040c358
  401e2c:	2040c264 	.word	0x2040c264
  401e30:	004010ad 	.word	0x004010ad
  401e34:	2040c310 	.word	0x2040c310
  401e38:	2040c268 	.word	0x2040c268

00401e3c <xTaskGenericCreate>:
{
  401e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e40:	b083      	sub	sp, #12
  401e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401e44:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401e48:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401e4a:	b160      	cbz	r0, 401e66 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401e4c:	2d04      	cmp	r5, #4
  401e4e:	d915      	bls.n	401e7c <xTaskGenericCreate+0x40>
  401e50:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e54:	b672      	cpsid	i
  401e56:	f383 8811 	msr	BASEPRI, r3
  401e5a:	f3bf 8f6f 	isb	sy
  401e5e:	f3bf 8f4f 	dsb	sy
  401e62:	b662      	cpsie	i
  401e64:	e7fe      	b.n	401e64 <xTaskGenericCreate+0x28>
  401e66:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6a:	b672      	cpsid	i
  401e6c:	f383 8811 	msr	BASEPRI, r3
  401e70:	f3bf 8f6f 	isb	sy
  401e74:	f3bf 8f4f 	dsb	sy
  401e78:	b662      	cpsie	i
  401e7a:	e7fe      	b.n	401e7a <xTaskGenericCreate+0x3e>
  401e7c:	9001      	str	r0, [sp, #4]
  401e7e:	4698      	mov	r8, r3
  401e80:	4691      	mov	r9, r2
  401e82:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e84:	b936      	cbnz	r6, 401e94 <xTaskGenericCreate+0x58>
  401e86:	0090      	lsls	r0, r2, #2
  401e88:	4b62      	ldr	r3, [pc, #392]	; (402014 <xTaskGenericCreate+0x1d8>)
  401e8a:	4798      	blx	r3
		if( pxStack != NULL )
  401e8c:	4606      	mov	r6, r0
  401e8e:	2800      	cmp	r0, #0
  401e90:	f000 809e 	beq.w	401fd0 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401e94:	2058      	movs	r0, #88	; 0x58
  401e96:	4b5f      	ldr	r3, [pc, #380]	; (402014 <xTaskGenericCreate+0x1d8>)
  401e98:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401e9a:	4604      	mov	r4, r0
  401e9c:	2800      	cmp	r0, #0
  401e9e:	f000 8094 	beq.w	401fca <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401ea2:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401ea4:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401ea8:	21a5      	movs	r1, #165	; 0xa5
  401eaa:	4630      	mov	r0, r6
  401eac:	4b5a      	ldr	r3, [pc, #360]	; (402018 <xTaskGenericCreate+0x1dc>)
  401eae:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401eb0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401eb4:	444e      	add	r6, r9
  401eb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401eb8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401ebc:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401ec0:	783b      	ldrb	r3, [r7, #0]
  401ec2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401ec6:	783b      	ldrb	r3, [r7, #0]
  401ec8:	2b00      	cmp	r3, #0
  401eca:	f040 8084 	bne.w	401fd6 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401ece:	2700      	movs	r7, #0
  401ed0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401ed4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401ed6:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401ed8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401eda:	f104 0904 	add.w	r9, r4, #4
  401ede:	4648      	mov	r0, r9
  401ee0:	f8df b184 	ldr.w	fp, [pc, #388]	; 402068 <xTaskGenericCreate+0x22c>
  401ee4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401ee6:	f104 0018 	add.w	r0, r4, #24
  401eea:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401eec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401eee:	f1c5 0305 	rsb	r3, r5, #5
  401ef2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401ef4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401ef6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401ef8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401efc:	4642      	mov	r2, r8
  401efe:	9901      	ldr	r1, [sp, #4]
  401f00:	4630      	mov	r0, r6
  401f02:	4b46      	ldr	r3, [pc, #280]	; (40201c <xTaskGenericCreate+0x1e0>)
  401f04:	4798      	blx	r3
  401f06:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401f08:	f1ba 0f00 	cmp.w	sl, #0
  401f0c:	d001      	beq.n	401f12 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401f0e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401f12:	4b43      	ldr	r3, [pc, #268]	; (402020 <xTaskGenericCreate+0x1e4>)
  401f14:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401f16:	4a43      	ldr	r2, [pc, #268]	; (402024 <xTaskGenericCreate+0x1e8>)
  401f18:	6813      	ldr	r3, [r2, #0]
  401f1a:	3301      	adds	r3, #1
  401f1c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401f1e:	4b42      	ldr	r3, [pc, #264]	; (402028 <xTaskGenericCreate+0x1ec>)
  401f20:	681b      	ldr	r3, [r3, #0]
  401f22:	2b00      	cmp	r3, #0
  401f24:	d166      	bne.n	401ff4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401f26:	4b40      	ldr	r3, [pc, #256]	; (402028 <xTaskGenericCreate+0x1ec>)
  401f28:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401f2a:	6813      	ldr	r3, [r2, #0]
  401f2c:	2b01      	cmp	r3, #1
  401f2e:	d121      	bne.n	401f74 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401f30:	4f3e      	ldr	r7, [pc, #248]	; (40202c <xTaskGenericCreate+0x1f0>)
  401f32:	4638      	mov	r0, r7
  401f34:	4e3e      	ldr	r6, [pc, #248]	; (402030 <xTaskGenericCreate+0x1f4>)
  401f36:	47b0      	blx	r6
  401f38:	f107 0014 	add.w	r0, r7, #20
  401f3c:	47b0      	blx	r6
  401f3e:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401f42:	47b0      	blx	r6
  401f44:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401f48:	47b0      	blx	r6
  401f4a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401f4e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401f50:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40206c <xTaskGenericCreate+0x230>
  401f54:	4640      	mov	r0, r8
  401f56:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401f58:	4f36      	ldr	r7, [pc, #216]	; (402034 <xTaskGenericCreate+0x1f8>)
  401f5a:	4638      	mov	r0, r7
  401f5c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401f5e:	4836      	ldr	r0, [pc, #216]	; (402038 <xTaskGenericCreate+0x1fc>)
  401f60:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401f62:	4836      	ldr	r0, [pc, #216]	; (40203c <xTaskGenericCreate+0x200>)
  401f64:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401f66:	4836      	ldr	r0, [pc, #216]	; (402040 <xTaskGenericCreate+0x204>)
  401f68:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401f6a:	4b36      	ldr	r3, [pc, #216]	; (402044 <xTaskGenericCreate+0x208>)
  401f6c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401f70:	4b35      	ldr	r3, [pc, #212]	; (402048 <xTaskGenericCreate+0x20c>)
  401f72:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401f74:	4a35      	ldr	r2, [pc, #212]	; (40204c <xTaskGenericCreate+0x210>)
  401f76:	6813      	ldr	r3, [r2, #0]
  401f78:	3301      	adds	r3, #1
  401f7a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401f7c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401f7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f80:	4a33      	ldr	r2, [pc, #204]	; (402050 <xTaskGenericCreate+0x214>)
  401f82:	6811      	ldr	r1, [r2, #0]
  401f84:	2301      	movs	r3, #1
  401f86:	4083      	lsls	r3, r0
  401f88:	430b      	orrs	r3, r1
  401f8a:	6013      	str	r3, [r2, #0]
  401f8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f90:	4649      	mov	r1, r9
  401f92:	4b26      	ldr	r3, [pc, #152]	; (40202c <xTaskGenericCreate+0x1f0>)
  401f94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f98:	4b2e      	ldr	r3, [pc, #184]	; (402054 <xTaskGenericCreate+0x218>)
  401f9a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401f9c:	4b2e      	ldr	r3, [pc, #184]	; (402058 <xTaskGenericCreate+0x21c>)
  401f9e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401fa0:	4b2e      	ldr	r3, [pc, #184]	; (40205c <xTaskGenericCreate+0x220>)
  401fa2:	681b      	ldr	r3, [r3, #0]
  401fa4:	2b00      	cmp	r3, #0
  401fa6:	d031      	beq.n	40200c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401fa8:	4b1f      	ldr	r3, [pc, #124]	; (402028 <xTaskGenericCreate+0x1ec>)
  401faa:	681b      	ldr	r3, [r3, #0]
  401fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401fae:	429d      	cmp	r5, r3
  401fb0:	d92e      	bls.n	402010 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fb6:	4b2a      	ldr	r3, [pc, #168]	; (402060 <xTaskGenericCreate+0x224>)
  401fb8:	601a      	str	r2, [r3, #0]
  401fba:	f3bf 8f4f 	dsb	sy
  401fbe:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401fc2:	2001      	movs	r0, #1
}
  401fc4:	b003      	add	sp, #12
  401fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401fca:	4630      	mov	r0, r6
  401fcc:	4b25      	ldr	r3, [pc, #148]	; (402064 <xTaskGenericCreate+0x228>)
  401fce:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401fd0:	f04f 30ff 	mov.w	r0, #4294967295
  401fd4:	e7f6      	b.n	401fc4 <xTaskGenericCreate+0x188>
  401fd6:	463b      	mov	r3, r7
  401fd8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401fdc:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401fde:	7859      	ldrb	r1, [r3, #1]
  401fe0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401fe4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401fe8:	2900      	cmp	r1, #0
  401fea:	f43f af70 	beq.w	401ece <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401fee:	42bb      	cmp	r3, r7
  401ff0:	d1f5      	bne.n	401fde <xTaskGenericCreate+0x1a2>
  401ff2:	e76c      	b.n	401ece <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401ff4:	4b19      	ldr	r3, [pc, #100]	; (40205c <xTaskGenericCreate+0x220>)
  401ff6:	681b      	ldr	r3, [r3, #0]
  401ff8:	2b00      	cmp	r3, #0
  401ffa:	d1bb      	bne.n	401f74 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401ffc:	4b0a      	ldr	r3, [pc, #40]	; (402028 <xTaskGenericCreate+0x1ec>)
  401ffe:	681b      	ldr	r3, [r3, #0]
  402000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402002:	429d      	cmp	r5, r3
  402004:	d3b6      	bcc.n	401f74 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402006:	4b08      	ldr	r3, [pc, #32]	; (402028 <xTaskGenericCreate+0x1ec>)
  402008:	601c      	str	r4, [r3, #0]
  40200a:	e7b3      	b.n	401f74 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40200c:	2001      	movs	r0, #1
  40200e:	e7d9      	b.n	401fc4 <xTaskGenericCreate+0x188>
  402010:	2001      	movs	r0, #1
	return xReturn;
  402012:	e7d7      	b.n	401fc4 <xTaskGenericCreate+0x188>
  402014:	00401421 	.word	0x00401421
  402018:	00404101 	.word	0x00404101
  40201c:	00401179 	.word	0x00401179
  402020:	004011c5 	.word	0x004011c5
  402024:	2040c2d0 	.word	0x2040c2d0
  402028:	2040c260 	.word	0x2040c260
  40202c:	2040c26c 	.word	0x2040c26c
  402030:	00401079 	.word	0x00401079
  402034:	2040c2fc 	.word	0x2040c2fc
  402038:	2040c318 	.word	0x2040c318
  40203c:	2040c344 	.word	0x2040c344
  402040:	2040c330 	.word	0x2040c330
  402044:	2040c264 	.word	0x2040c264
  402048:	2040c268 	.word	0x2040c268
  40204c:	2040c2dc 	.word	0x2040c2dc
  402050:	2040c2e4 	.word	0x2040c2e4
  402054:	00401095 	.word	0x00401095
  402058:	00401211 	.word	0x00401211
  40205c:	2040c32c 	.word	0x2040c32c
  402060:	e000ed04 	.word	0xe000ed04
  402064:	00401491 	.word	0x00401491
  402068:	0040108f 	.word	0x0040108f
  40206c:	2040c2e8 	.word	0x2040c2e8

00402070 <vTaskStartScheduler>:
{
  402070:	b510      	push	{r4, lr}
  402072:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402074:	2300      	movs	r3, #0
  402076:	9303      	str	r3, [sp, #12]
  402078:	9302      	str	r3, [sp, #8]
  40207a:	9301      	str	r3, [sp, #4]
  40207c:	9300      	str	r3, [sp, #0]
  40207e:	2282      	movs	r2, #130	; 0x82
  402080:	4916      	ldr	r1, [pc, #88]	; (4020dc <vTaskStartScheduler+0x6c>)
  402082:	4817      	ldr	r0, [pc, #92]	; (4020e0 <vTaskStartScheduler+0x70>)
  402084:	4c17      	ldr	r4, [pc, #92]	; (4020e4 <vTaskStartScheduler+0x74>)
  402086:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402088:	2801      	cmp	r0, #1
  40208a:	d00b      	beq.n	4020a4 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40208c:	bb20      	cbnz	r0, 4020d8 <vTaskStartScheduler+0x68>
  40208e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402092:	b672      	cpsid	i
  402094:	f383 8811 	msr	BASEPRI, r3
  402098:	f3bf 8f6f 	isb	sy
  40209c:	f3bf 8f4f 	dsb	sy
  4020a0:	b662      	cpsie	i
  4020a2:	e7fe      	b.n	4020a2 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4020a4:	4b10      	ldr	r3, [pc, #64]	; (4020e8 <vTaskStartScheduler+0x78>)
  4020a6:	4798      	blx	r3
	if( xReturn == pdPASS )
  4020a8:	2801      	cmp	r0, #1
  4020aa:	d1ef      	bne.n	40208c <vTaskStartScheduler+0x1c>
  4020ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020b0:	b672      	cpsid	i
  4020b2:	f383 8811 	msr	BASEPRI, r3
  4020b6:	f3bf 8f6f 	isb	sy
  4020ba:	f3bf 8f4f 	dsb	sy
  4020be:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4020c0:	f04f 32ff 	mov.w	r2, #4294967295
  4020c4:	4b09      	ldr	r3, [pc, #36]	; (4020ec <vTaskStartScheduler+0x7c>)
  4020c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4020c8:	2201      	movs	r2, #1
  4020ca:	4b09      	ldr	r3, [pc, #36]	; (4020f0 <vTaskStartScheduler+0x80>)
  4020cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4020ce:	2200      	movs	r2, #0
  4020d0:	4b08      	ldr	r3, [pc, #32]	; (4020f4 <vTaskStartScheduler+0x84>)
  4020d2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4020d4:	4b08      	ldr	r3, [pc, #32]	; (4020f8 <vTaskStartScheduler+0x88>)
  4020d6:	4798      	blx	r3
}
  4020d8:	b004      	add	sp, #16
  4020da:	bd10      	pop	{r4, pc}
  4020dc:	00406958 	.word	0x00406958
  4020e0:	00402415 	.word	0x00402415
  4020e4:	00401e3d 	.word	0x00401e3d
  4020e8:	00402a55 	.word	0x00402a55
  4020ec:	2040c310 	.word	0x2040c310
  4020f0:	2040c32c 	.word	0x2040c32c
  4020f4:	2040c358 	.word	0x2040c358
  4020f8:	004012f9 	.word	0x004012f9

004020fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4020fc:	4a02      	ldr	r2, [pc, #8]	; (402108 <vTaskSuspendAll+0xc>)
  4020fe:	6813      	ldr	r3, [r2, #0]
  402100:	3301      	adds	r3, #1
  402102:	6013      	str	r3, [r2, #0]
  402104:	4770      	bx	lr
  402106:	bf00      	nop
  402108:	2040c2d8 	.word	0x2040c2d8

0040210c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40210c:	4b01      	ldr	r3, [pc, #4]	; (402114 <xTaskGetTickCount+0x8>)
  40210e:	6818      	ldr	r0, [r3, #0]
}
  402110:	4770      	bx	lr
  402112:	bf00      	nop
  402114:	2040c358 	.word	0x2040c358

00402118 <xTaskIncrementTick>:
{
  402118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40211c:	4b42      	ldr	r3, [pc, #264]	; (402228 <xTaskIncrementTick+0x110>)
  40211e:	681b      	ldr	r3, [r3, #0]
  402120:	2b00      	cmp	r3, #0
  402122:	d178      	bne.n	402216 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402124:	4b41      	ldr	r3, [pc, #260]	; (40222c <xTaskIncrementTick+0x114>)
  402126:	681a      	ldr	r2, [r3, #0]
  402128:	3201      	adds	r2, #1
  40212a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  40212c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40212e:	b9d6      	cbnz	r6, 402166 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402130:	4b3f      	ldr	r3, [pc, #252]	; (402230 <xTaskIncrementTick+0x118>)
  402132:	681b      	ldr	r3, [r3, #0]
  402134:	681b      	ldr	r3, [r3, #0]
  402136:	b153      	cbz	r3, 40214e <xTaskIncrementTick+0x36>
  402138:	f04f 0380 	mov.w	r3, #128	; 0x80
  40213c:	b672      	cpsid	i
  40213e:	f383 8811 	msr	BASEPRI, r3
  402142:	f3bf 8f6f 	isb	sy
  402146:	f3bf 8f4f 	dsb	sy
  40214a:	b662      	cpsie	i
  40214c:	e7fe      	b.n	40214c <xTaskIncrementTick+0x34>
  40214e:	4a38      	ldr	r2, [pc, #224]	; (402230 <xTaskIncrementTick+0x118>)
  402150:	6811      	ldr	r1, [r2, #0]
  402152:	4b38      	ldr	r3, [pc, #224]	; (402234 <xTaskIncrementTick+0x11c>)
  402154:	6818      	ldr	r0, [r3, #0]
  402156:	6010      	str	r0, [r2, #0]
  402158:	6019      	str	r1, [r3, #0]
  40215a:	4a37      	ldr	r2, [pc, #220]	; (402238 <xTaskIncrementTick+0x120>)
  40215c:	6813      	ldr	r3, [r2, #0]
  40215e:	3301      	adds	r3, #1
  402160:	6013      	str	r3, [r2, #0]
  402162:	4b36      	ldr	r3, [pc, #216]	; (40223c <xTaskIncrementTick+0x124>)
  402164:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402166:	4b36      	ldr	r3, [pc, #216]	; (402240 <xTaskIncrementTick+0x128>)
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	429e      	cmp	r6, r3
  40216c:	d218      	bcs.n	4021a0 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40216e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402170:	4b34      	ldr	r3, [pc, #208]	; (402244 <xTaskIncrementTick+0x12c>)
  402172:	681b      	ldr	r3, [r3, #0]
  402174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402176:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40217a:	4a33      	ldr	r2, [pc, #204]	; (402248 <xTaskIncrementTick+0x130>)
  40217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402180:	2b02      	cmp	r3, #2
  402182:	bf28      	it	cs
  402184:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402186:	4b31      	ldr	r3, [pc, #196]	; (40224c <xTaskIncrementTick+0x134>)
  402188:	681b      	ldr	r3, [r3, #0]
  40218a:	b90b      	cbnz	r3, 402190 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40218c:	4b30      	ldr	r3, [pc, #192]	; (402250 <xTaskIncrementTick+0x138>)
  40218e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402190:	4b30      	ldr	r3, [pc, #192]	; (402254 <xTaskIncrementTick+0x13c>)
  402192:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402194:	2b00      	cmp	r3, #0
}
  402196:	bf0c      	ite	eq
  402198:	4620      	moveq	r0, r4
  40219a:	2001      	movne	r0, #1
  40219c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021a0:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4021a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402230 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021a6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402260 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4021aa:	4f2b      	ldr	r7, [pc, #172]	; (402258 <xTaskIncrementTick+0x140>)
  4021ac:	e01f      	b.n	4021ee <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4021ae:	f04f 32ff 	mov.w	r2, #4294967295
  4021b2:	4b23      	ldr	r3, [pc, #140]	; (402240 <xTaskIncrementTick+0x128>)
  4021b4:	601a      	str	r2, [r3, #0]
						break;
  4021b6:	e7db      	b.n	402170 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4021b8:	4a21      	ldr	r2, [pc, #132]	; (402240 <xTaskIncrementTick+0x128>)
  4021ba:	6013      	str	r3, [r2, #0]
							break;
  4021bc:	e7d8      	b.n	402170 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4021be:	f105 0018 	add.w	r0, r5, #24
  4021c2:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4021c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4021c6:	683a      	ldr	r2, [r7, #0]
  4021c8:	2301      	movs	r3, #1
  4021ca:	4083      	lsls	r3, r0
  4021cc:	4313      	orrs	r3, r2
  4021ce:	603b      	str	r3, [r7, #0]
  4021d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021d4:	4651      	mov	r1, sl
  4021d6:	4b1c      	ldr	r3, [pc, #112]	; (402248 <xTaskIncrementTick+0x130>)
  4021d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021dc:	4b1f      	ldr	r3, [pc, #124]	; (40225c <xTaskIncrementTick+0x144>)
  4021de:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4021e0:	4b18      	ldr	r3, [pc, #96]	; (402244 <xTaskIncrementTick+0x12c>)
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4021e8:	429a      	cmp	r2, r3
  4021ea:	bf28      	it	cs
  4021ec:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4021ee:	f8d9 3000 	ldr.w	r3, [r9]
  4021f2:	681b      	ldr	r3, [r3, #0]
  4021f4:	2b00      	cmp	r3, #0
  4021f6:	d0da      	beq.n	4021ae <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4021f8:	f8d9 3000 	ldr.w	r3, [r9]
  4021fc:	68db      	ldr	r3, [r3, #12]
  4021fe:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402200:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402202:	429e      	cmp	r6, r3
  402204:	d3d8      	bcc.n	4021b8 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402206:	f105 0a04 	add.w	sl, r5, #4
  40220a:	4650      	mov	r0, sl
  40220c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40220e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402210:	2b00      	cmp	r3, #0
  402212:	d1d4      	bne.n	4021be <xTaskIncrementTick+0xa6>
  402214:	e7d6      	b.n	4021c4 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402216:	4a0d      	ldr	r2, [pc, #52]	; (40224c <xTaskIncrementTick+0x134>)
  402218:	6813      	ldr	r3, [r2, #0]
  40221a:	3301      	adds	r3, #1
  40221c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40221e:	4b0c      	ldr	r3, [pc, #48]	; (402250 <xTaskIncrementTick+0x138>)
  402220:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402222:	2400      	movs	r4, #0
  402224:	e7b4      	b.n	402190 <xTaskIncrementTick+0x78>
  402226:	bf00      	nop
  402228:	2040c2d8 	.word	0x2040c2d8
  40222c:	2040c358 	.word	0x2040c358
  402230:	2040c264 	.word	0x2040c264
  402234:	2040c268 	.word	0x2040c268
  402238:	2040c314 	.word	0x2040c314
  40223c:	00401db9 	.word	0x00401db9
  402240:	2040c310 	.word	0x2040c310
  402244:	2040c260 	.word	0x2040c260
  402248:	2040c26c 	.word	0x2040c26c
  40224c:	2040c2d4 	.word	0x2040c2d4
  402250:	00403331 	.word	0x00403331
  402254:	2040c35c 	.word	0x2040c35c
  402258:	2040c2e4 	.word	0x2040c2e4
  40225c:	00401095 	.word	0x00401095
  402260:	004010e1 	.word	0x004010e1

00402264 <xTaskResumeAll>:
{
  402264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402268:	4b38      	ldr	r3, [pc, #224]	; (40234c <xTaskResumeAll+0xe8>)
  40226a:	681b      	ldr	r3, [r3, #0]
  40226c:	b953      	cbnz	r3, 402284 <xTaskResumeAll+0x20>
  40226e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402272:	b672      	cpsid	i
  402274:	f383 8811 	msr	BASEPRI, r3
  402278:	f3bf 8f6f 	isb	sy
  40227c:	f3bf 8f4f 	dsb	sy
  402280:	b662      	cpsie	i
  402282:	e7fe      	b.n	402282 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402284:	4b32      	ldr	r3, [pc, #200]	; (402350 <xTaskResumeAll+0xec>)
  402286:	4798      	blx	r3
		--uxSchedulerSuspended;
  402288:	4b30      	ldr	r3, [pc, #192]	; (40234c <xTaskResumeAll+0xe8>)
  40228a:	681a      	ldr	r2, [r3, #0]
  40228c:	3a01      	subs	r2, #1
  40228e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402290:	681b      	ldr	r3, [r3, #0]
  402292:	2b00      	cmp	r3, #0
  402294:	d155      	bne.n	402342 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402296:	4b2f      	ldr	r3, [pc, #188]	; (402354 <xTaskResumeAll+0xf0>)
  402298:	681b      	ldr	r3, [r3, #0]
  40229a:	2b00      	cmp	r3, #0
  40229c:	d132      	bne.n	402304 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40229e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4022a0:	4b2d      	ldr	r3, [pc, #180]	; (402358 <xTaskResumeAll+0xf4>)
  4022a2:	4798      	blx	r3
}
  4022a4:	4620      	mov	r0, r4
  4022a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4022aa:	68fb      	ldr	r3, [r7, #12]
  4022ac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4022ae:	f104 0018 	add.w	r0, r4, #24
  4022b2:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4022b4:	f104 0804 	add.w	r8, r4, #4
  4022b8:	4640      	mov	r0, r8
  4022ba:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4022bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4022be:	682a      	ldr	r2, [r5, #0]
  4022c0:	2301      	movs	r3, #1
  4022c2:	4083      	lsls	r3, r0
  4022c4:	4313      	orrs	r3, r2
  4022c6:	602b      	str	r3, [r5, #0]
  4022c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022cc:	4641      	mov	r1, r8
  4022ce:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4022d2:	4b22      	ldr	r3, [pc, #136]	; (40235c <xTaskResumeAll+0xf8>)
  4022d4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4022d6:	4b22      	ldr	r3, [pc, #136]	; (402360 <xTaskResumeAll+0xfc>)
  4022d8:	681b      	ldr	r3, [r3, #0]
  4022da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022de:	429a      	cmp	r2, r3
  4022e0:	d20c      	bcs.n	4022fc <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4022e2:	683b      	ldr	r3, [r7, #0]
  4022e4:	2b00      	cmp	r3, #0
  4022e6:	d1e0      	bne.n	4022aa <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4022e8:	4b1e      	ldr	r3, [pc, #120]	; (402364 <xTaskResumeAll+0x100>)
  4022ea:	681b      	ldr	r3, [r3, #0]
  4022ec:	b1db      	cbz	r3, 402326 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4022ee:	4b1d      	ldr	r3, [pc, #116]	; (402364 <xTaskResumeAll+0x100>)
  4022f0:	681b      	ldr	r3, [r3, #0]
  4022f2:	b1c3      	cbz	r3, 402326 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022f4:	4e1c      	ldr	r6, [pc, #112]	; (402368 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4022f6:	4d1d      	ldr	r5, [pc, #116]	; (40236c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4022f8:	4c1a      	ldr	r4, [pc, #104]	; (402364 <xTaskResumeAll+0x100>)
  4022fa:	e00e      	b.n	40231a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4022fc:	2201      	movs	r2, #1
  4022fe:	4b1b      	ldr	r3, [pc, #108]	; (40236c <xTaskResumeAll+0x108>)
  402300:	601a      	str	r2, [r3, #0]
  402302:	e7ee      	b.n	4022e2 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402304:	4f1a      	ldr	r7, [pc, #104]	; (402370 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402306:	4e1b      	ldr	r6, [pc, #108]	; (402374 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402308:	4d1b      	ldr	r5, [pc, #108]	; (402378 <xTaskResumeAll+0x114>)
  40230a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402380 <xTaskResumeAll+0x11c>
  40230e:	e7e8      	b.n	4022e2 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402310:	6823      	ldr	r3, [r4, #0]
  402312:	3b01      	subs	r3, #1
  402314:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402316:	6823      	ldr	r3, [r4, #0]
  402318:	b12b      	cbz	r3, 402326 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40231a:	47b0      	blx	r6
  40231c:	2800      	cmp	r0, #0
  40231e:	d0f7      	beq.n	402310 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402320:	2301      	movs	r3, #1
  402322:	602b      	str	r3, [r5, #0]
  402324:	e7f4      	b.n	402310 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402326:	4b11      	ldr	r3, [pc, #68]	; (40236c <xTaskResumeAll+0x108>)
  402328:	681b      	ldr	r3, [r3, #0]
  40232a:	2b01      	cmp	r3, #1
  40232c:	d10b      	bne.n	402346 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402332:	4b12      	ldr	r3, [pc, #72]	; (40237c <xTaskResumeAll+0x118>)
  402334:	601a      	str	r2, [r3, #0]
  402336:	f3bf 8f4f 	dsb	sy
  40233a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40233e:	2401      	movs	r4, #1
  402340:	e7ae      	b.n	4022a0 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402342:	2400      	movs	r4, #0
  402344:	e7ac      	b.n	4022a0 <xTaskResumeAll+0x3c>
  402346:	2400      	movs	r4, #0
  402348:	e7aa      	b.n	4022a0 <xTaskResumeAll+0x3c>
  40234a:	bf00      	nop
  40234c:	2040c2d8 	.word	0x2040c2d8
  402350:	004011c5 	.word	0x004011c5
  402354:	2040c2d0 	.word	0x2040c2d0
  402358:	00401211 	.word	0x00401211
  40235c:	00401095 	.word	0x00401095
  402360:	2040c260 	.word	0x2040c260
  402364:	2040c2d4 	.word	0x2040c2d4
  402368:	00402119 	.word	0x00402119
  40236c:	2040c35c 	.word	0x2040c35c
  402370:	2040c318 	.word	0x2040c318
  402374:	004010e1 	.word	0x004010e1
  402378:	2040c2e4 	.word	0x2040c2e4
  40237c:	e000ed04 	.word	0xe000ed04
  402380:	2040c26c 	.word	0x2040c26c

00402384 <vTaskDelay>:
	{
  402384:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402386:	2800      	cmp	r0, #0
  402388:	d029      	beq.n	4023de <vTaskDelay+0x5a>
  40238a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40238c:	4b18      	ldr	r3, [pc, #96]	; (4023f0 <vTaskDelay+0x6c>)
  40238e:	681b      	ldr	r3, [r3, #0]
  402390:	b153      	cbz	r3, 4023a8 <vTaskDelay+0x24>
  402392:	f04f 0380 	mov.w	r3, #128	; 0x80
  402396:	b672      	cpsid	i
  402398:	f383 8811 	msr	BASEPRI, r3
  40239c:	f3bf 8f6f 	isb	sy
  4023a0:	f3bf 8f4f 	dsb	sy
  4023a4:	b662      	cpsie	i
  4023a6:	e7fe      	b.n	4023a6 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4023a8:	4b12      	ldr	r3, [pc, #72]	; (4023f4 <vTaskDelay+0x70>)
  4023aa:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4023ac:	4b12      	ldr	r3, [pc, #72]	; (4023f8 <vTaskDelay+0x74>)
  4023ae:	681b      	ldr	r3, [r3, #0]
  4023b0:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4023b2:	4b12      	ldr	r3, [pc, #72]	; (4023fc <vTaskDelay+0x78>)
  4023b4:	6818      	ldr	r0, [r3, #0]
  4023b6:	3004      	adds	r0, #4
  4023b8:	4b11      	ldr	r3, [pc, #68]	; (402400 <vTaskDelay+0x7c>)
  4023ba:	4798      	blx	r3
  4023bc:	b948      	cbnz	r0, 4023d2 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4023be:	4b0f      	ldr	r3, [pc, #60]	; (4023fc <vTaskDelay+0x78>)
  4023c0:	681a      	ldr	r2, [r3, #0]
  4023c2:	4910      	ldr	r1, [pc, #64]	; (402404 <vTaskDelay+0x80>)
  4023c4:	680b      	ldr	r3, [r1, #0]
  4023c6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4023c8:	2201      	movs	r2, #1
  4023ca:	4082      	lsls	r2, r0
  4023cc:	ea23 0302 	bic.w	r3, r3, r2
  4023d0:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4023d2:	4620      	mov	r0, r4
  4023d4:	4b0c      	ldr	r3, [pc, #48]	; (402408 <vTaskDelay+0x84>)
  4023d6:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4023d8:	4b0c      	ldr	r3, [pc, #48]	; (40240c <vTaskDelay+0x88>)
  4023da:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4023dc:	b938      	cbnz	r0, 4023ee <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4023de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4023e2:	4b0b      	ldr	r3, [pc, #44]	; (402410 <vTaskDelay+0x8c>)
  4023e4:	601a      	str	r2, [r3, #0]
  4023e6:	f3bf 8f4f 	dsb	sy
  4023ea:	f3bf 8f6f 	isb	sy
  4023ee:	bd10      	pop	{r4, pc}
  4023f0:	2040c2d8 	.word	0x2040c2d8
  4023f4:	004020fd 	.word	0x004020fd
  4023f8:	2040c358 	.word	0x2040c358
  4023fc:	2040c260 	.word	0x2040c260
  402400:	004010e1 	.word	0x004010e1
  402404:	2040c2e4 	.word	0x2040c2e4
  402408:	00401de5 	.word	0x00401de5
  40240c:	00402265 	.word	0x00402265
  402410:	e000ed04 	.word	0xe000ed04

00402414 <prvIdleTask>:
{
  402414:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402416:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4024a0 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40241a:	4e19      	ldr	r6, [pc, #100]	; (402480 <prvIdleTask+0x6c>)
				taskYIELD();
  40241c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4024a4 <prvIdleTask+0x90>
  402420:	e02a      	b.n	402478 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402422:	4b18      	ldr	r3, [pc, #96]	; (402484 <prvIdleTask+0x70>)
  402424:	681b      	ldr	r3, [r3, #0]
  402426:	2b01      	cmp	r3, #1
  402428:	d81e      	bhi.n	402468 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40242a:	682b      	ldr	r3, [r5, #0]
  40242c:	2b00      	cmp	r3, #0
  40242e:	d0f8      	beq.n	402422 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402430:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402432:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402434:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402436:	2c00      	cmp	r4, #0
  402438:	d0f7      	beq.n	40242a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <prvIdleTask+0x74>)
  40243c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40243e:	68f3      	ldr	r3, [r6, #12]
  402440:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402442:	1d20      	adds	r0, r4, #4
  402444:	4b11      	ldr	r3, [pc, #68]	; (40248c <prvIdleTask+0x78>)
  402446:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402448:	4a11      	ldr	r2, [pc, #68]	; (402490 <prvIdleTask+0x7c>)
  40244a:	6813      	ldr	r3, [r2, #0]
  40244c:	3b01      	subs	r3, #1
  40244e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402450:	682b      	ldr	r3, [r5, #0]
  402452:	3b01      	subs	r3, #1
  402454:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402456:	4b0f      	ldr	r3, [pc, #60]	; (402494 <prvIdleTask+0x80>)
  402458:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40245a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40245c:	f8df a048 	ldr.w	sl, [pc, #72]	; 4024a8 <prvIdleTask+0x94>
  402460:	47d0      	blx	sl
		vPortFree( pxTCB );
  402462:	4620      	mov	r0, r4
  402464:	47d0      	blx	sl
  402466:	e7e0      	b.n	40242a <prvIdleTask+0x16>
				taskYIELD();
  402468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40246c:	f8c9 3000 	str.w	r3, [r9]
  402470:	f3bf 8f4f 	dsb	sy
  402474:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402478:	4d07      	ldr	r5, [pc, #28]	; (402498 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40247a:	4f08      	ldr	r7, [pc, #32]	; (40249c <prvIdleTask+0x88>)
  40247c:	e7d5      	b.n	40242a <prvIdleTask+0x16>
  40247e:	bf00      	nop
  402480:	2040c344 	.word	0x2040c344
  402484:	2040c26c 	.word	0x2040c26c
  402488:	004011c5 	.word	0x004011c5
  40248c:	004010e1 	.word	0x004010e1
  402490:	2040c2d0 	.word	0x2040c2d0
  402494:	00401211 	.word	0x00401211
  402498:	2040c2e0 	.word	0x2040c2e0
  40249c:	00402265 	.word	0x00402265
  4024a0:	004020fd 	.word	0x004020fd
  4024a4:	e000ed04 	.word	0xe000ed04
  4024a8:	00401491 	.word	0x00401491

004024ac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4024ac:	4b2d      	ldr	r3, [pc, #180]	; (402564 <vTaskSwitchContext+0xb8>)
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	2b00      	cmp	r3, #0
  4024b2:	d12c      	bne.n	40250e <vTaskSwitchContext+0x62>
{
  4024b4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4024b6:	2200      	movs	r2, #0
  4024b8:	4b2b      	ldr	r3, [pc, #172]	; (402568 <vTaskSwitchContext+0xbc>)
  4024ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4024bc:	4b2b      	ldr	r3, [pc, #172]	; (40256c <vTaskSwitchContext+0xc0>)
  4024be:	681b      	ldr	r3, [r3, #0]
  4024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024c2:	681a      	ldr	r2, [r3, #0]
  4024c4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4024c8:	d103      	bne.n	4024d2 <vTaskSwitchContext+0x26>
  4024ca:	685a      	ldr	r2, [r3, #4]
  4024cc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4024d0:	d021      	beq.n	402516 <vTaskSwitchContext+0x6a>
  4024d2:	4b26      	ldr	r3, [pc, #152]	; (40256c <vTaskSwitchContext+0xc0>)
  4024d4:	6818      	ldr	r0, [r3, #0]
  4024d6:	6819      	ldr	r1, [r3, #0]
  4024d8:	3134      	adds	r1, #52	; 0x34
  4024da:	4b25      	ldr	r3, [pc, #148]	; (402570 <vTaskSwitchContext+0xc4>)
  4024dc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4024de:	4b25      	ldr	r3, [pc, #148]	; (402574 <vTaskSwitchContext+0xc8>)
  4024e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4024e2:	fab3 f383 	clz	r3, r3
  4024e6:	b2db      	uxtb	r3, r3
  4024e8:	f1c3 031f 	rsb	r3, r3, #31
  4024ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4024f0:	4a21      	ldr	r2, [pc, #132]	; (402578 <vTaskSwitchContext+0xcc>)
  4024f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4024f6:	b9ba      	cbnz	r2, 402528 <vTaskSwitchContext+0x7c>
	__asm volatile
  4024f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024fc:	b672      	cpsid	i
  4024fe:	f383 8811 	msr	BASEPRI, r3
  402502:	f3bf 8f6f 	isb	sy
  402506:	f3bf 8f4f 	dsb	sy
  40250a:	b662      	cpsie	i
  40250c:	e7fe      	b.n	40250c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40250e:	2201      	movs	r2, #1
  402510:	4b15      	ldr	r3, [pc, #84]	; (402568 <vTaskSwitchContext+0xbc>)
  402512:	601a      	str	r2, [r3, #0]
  402514:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402516:	689a      	ldr	r2, [r3, #8]
  402518:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40251c:	d1d9      	bne.n	4024d2 <vTaskSwitchContext+0x26>
  40251e:	68db      	ldr	r3, [r3, #12]
  402520:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402524:	d1d5      	bne.n	4024d2 <vTaskSwitchContext+0x26>
  402526:	e7da      	b.n	4024de <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402528:	4a13      	ldr	r2, [pc, #76]	; (402578 <vTaskSwitchContext+0xcc>)
  40252a:	0099      	lsls	r1, r3, #2
  40252c:	18c8      	adds	r0, r1, r3
  40252e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402532:	6844      	ldr	r4, [r0, #4]
  402534:	6864      	ldr	r4, [r4, #4]
  402536:	6044      	str	r4, [r0, #4]
  402538:	4419      	add	r1, r3
  40253a:	4602      	mov	r2, r0
  40253c:	3208      	adds	r2, #8
  40253e:	4294      	cmp	r4, r2
  402540:	d009      	beq.n	402556 <vTaskSwitchContext+0xaa>
  402542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402546:	4a0c      	ldr	r2, [pc, #48]	; (402578 <vTaskSwitchContext+0xcc>)
  402548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40254c:	685b      	ldr	r3, [r3, #4]
  40254e:	68da      	ldr	r2, [r3, #12]
  402550:	4b06      	ldr	r3, [pc, #24]	; (40256c <vTaskSwitchContext+0xc0>)
  402552:	601a      	str	r2, [r3, #0]
  402554:	bd10      	pop	{r4, pc}
  402556:	6860      	ldr	r0, [r4, #4]
  402558:	4a07      	ldr	r2, [pc, #28]	; (402578 <vTaskSwitchContext+0xcc>)
  40255a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40255e:	6050      	str	r0, [r2, #4]
  402560:	e7ef      	b.n	402542 <vTaskSwitchContext+0x96>
  402562:	bf00      	nop
  402564:	2040c2d8 	.word	0x2040c2d8
  402568:	2040c35c 	.word	0x2040c35c
  40256c:	2040c260 	.word	0x2040c260
  402570:	00403319 	.word	0x00403319
  402574:	2040c2e4 	.word	0x2040c2e4
  402578:	2040c26c 	.word	0x2040c26c

0040257c <vTaskPlaceOnEventList>:
{
  40257c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40257e:	b1e0      	cbz	r0, 4025ba <vTaskPlaceOnEventList+0x3e>
  402580:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402582:	4d17      	ldr	r5, [pc, #92]	; (4025e0 <vTaskPlaceOnEventList+0x64>)
  402584:	6829      	ldr	r1, [r5, #0]
  402586:	3118      	adds	r1, #24
  402588:	4b16      	ldr	r3, [pc, #88]	; (4025e4 <vTaskPlaceOnEventList+0x68>)
  40258a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40258c:	6828      	ldr	r0, [r5, #0]
  40258e:	3004      	adds	r0, #4
  402590:	4b15      	ldr	r3, [pc, #84]	; (4025e8 <vTaskPlaceOnEventList+0x6c>)
  402592:	4798      	blx	r3
  402594:	b940      	cbnz	r0, 4025a8 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402596:	682a      	ldr	r2, [r5, #0]
  402598:	4914      	ldr	r1, [pc, #80]	; (4025ec <vTaskPlaceOnEventList+0x70>)
  40259a:	680b      	ldr	r3, [r1, #0]
  40259c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40259e:	2201      	movs	r2, #1
  4025a0:	4082      	lsls	r2, r0
  4025a2:	ea23 0302 	bic.w	r3, r3, r2
  4025a6:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4025a8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4025ac:	d010      	beq.n	4025d0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4025ae:	4b10      	ldr	r3, [pc, #64]	; (4025f0 <vTaskPlaceOnEventList+0x74>)
  4025b0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4025b2:	4420      	add	r0, r4
  4025b4:	4b0f      	ldr	r3, [pc, #60]	; (4025f4 <vTaskPlaceOnEventList+0x78>)
  4025b6:	4798      	blx	r3
  4025b8:	bd38      	pop	{r3, r4, r5, pc}
  4025ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025be:	b672      	cpsid	i
  4025c0:	f383 8811 	msr	BASEPRI, r3
  4025c4:	f3bf 8f6f 	isb	sy
  4025c8:	f3bf 8f4f 	dsb	sy
  4025cc:	b662      	cpsie	i
  4025ce:	e7fe      	b.n	4025ce <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4025d0:	4b03      	ldr	r3, [pc, #12]	; (4025e0 <vTaskPlaceOnEventList+0x64>)
  4025d2:	6819      	ldr	r1, [r3, #0]
  4025d4:	3104      	adds	r1, #4
  4025d6:	4808      	ldr	r0, [pc, #32]	; (4025f8 <vTaskPlaceOnEventList+0x7c>)
  4025d8:	4b08      	ldr	r3, [pc, #32]	; (4025fc <vTaskPlaceOnEventList+0x80>)
  4025da:	4798      	blx	r3
  4025dc:	bd38      	pop	{r3, r4, r5, pc}
  4025de:	bf00      	nop
  4025e0:	2040c260 	.word	0x2040c260
  4025e4:	004010ad 	.word	0x004010ad
  4025e8:	004010e1 	.word	0x004010e1
  4025ec:	2040c2e4 	.word	0x2040c2e4
  4025f0:	2040c358 	.word	0x2040c358
  4025f4:	00401de5 	.word	0x00401de5
  4025f8:	2040c330 	.word	0x2040c330
  4025fc:	00401095 	.word	0x00401095

00402600 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402600:	b1e8      	cbz	r0, 40263e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402602:	b570      	push	{r4, r5, r6, lr}
  402604:	4615      	mov	r5, r2
  402606:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402608:	4e16      	ldr	r6, [pc, #88]	; (402664 <vTaskPlaceOnEventListRestricted+0x64>)
  40260a:	6831      	ldr	r1, [r6, #0]
  40260c:	3118      	adds	r1, #24
  40260e:	4b16      	ldr	r3, [pc, #88]	; (402668 <vTaskPlaceOnEventListRestricted+0x68>)
  402610:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402612:	6830      	ldr	r0, [r6, #0]
  402614:	3004      	adds	r0, #4
  402616:	4b15      	ldr	r3, [pc, #84]	; (40266c <vTaskPlaceOnEventListRestricted+0x6c>)
  402618:	4798      	blx	r3
  40261a:	b940      	cbnz	r0, 40262e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40261c:	6832      	ldr	r2, [r6, #0]
  40261e:	4914      	ldr	r1, [pc, #80]	; (402670 <vTaskPlaceOnEventListRestricted+0x70>)
  402620:	680b      	ldr	r3, [r1, #0]
  402622:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402624:	2201      	movs	r2, #1
  402626:	4082      	lsls	r2, r0
  402628:	ea23 0302 	bic.w	r3, r3, r2
  40262c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40262e:	2d01      	cmp	r5, #1
  402630:	d010      	beq.n	402654 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402632:	4b10      	ldr	r3, [pc, #64]	; (402674 <vTaskPlaceOnEventListRestricted+0x74>)
  402634:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402636:	4420      	add	r0, r4
  402638:	4b0f      	ldr	r3, [pc, #60]	; (402678 <vTaskPlaceOnEventListRestricted+0x78>)
  40263a:	4798      	blx	r3
  40263c:	bd70      	pop	{r4, r5, r6, pc}
  40263e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402642:	b672      	cpsid	i
  402644:	f383 8811 	msr	BASEPRI, r3
  402648:	f3bf 8f6f 	isb	sy
  40264c:	f3bf 8f4f 	dsb	sy
  402650:	b662      	cpsie	i
  402652:	e7fe      	b.n	402652 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402654:	4b03      	ldr	r3, [pc, #12]	; (402664 <vTaskPlaceOnEventListRestricted+0x64>)
  402656:	6819      	ldr	r1, [r3, #0]
  402658:	3104      	adds	r1, #4
  40265a:	4808      	ldr	r0, [pc, #32]	; (40267c <vTaskPlaceOnEventListRestricted+0x7c>)
  40265c:	4b02      	ldr	r3, [pc, #8]	; (402668 <vTaskPlaceOnEventListRestricted+0x68>)
  40265e:	4798      	blx	r3
  402660:	bd70      	pop	{r4, r5, r6, pc}
  402662:	bf00      	nop
  402664:	2040c260 	.word	0x2040c260
  402668:	00401095 	.word	0x00401095
  40266c:	004010e1 	.word	0x004010e1
  402670:	2040c2e4 	.word	0x2040c2e4
  402674:	2040c358 	.word	0x2040c358
  402678:	00401de5 	.word	0x00401de5
  40267c:	2040c330 	.word	0x2040c330

00402680 <xTaskRemoveFromEventList>:
{
  402680:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402682:	68c3      	ldr	r3, [r0, #12]
  402684:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402686:	b324      	cbz	r4, 4026d2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402688:	f104 0518 	add.w	r5, r4, #24
  40268c:	4628      	mov	r0, r5
  40268e:	4b1a      	ldr	r3, [pc, #104]	; (4026f8 <xTaskRemoveFromEventList+0x78>)
  402690:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402692:	4b1a      	ldr	r3, [pc, #104]	; (4026fc <xTaskRemoveFromEventList+0x7c>)
  402694:	681b      	ldr	r3, [r3, #0]
  402696:	bb3b      	cbnz	r3, 4026e8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402698:	1d25      	adds	r5, r4, #4
  40269a:	4628      	mov	r0, r5
  40269c:	4b16      	ldr	r3, [pc, #88]	; (4026f8 <xTaskRemoveFromEventList+0x78>)
  40269e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4026a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4026a2:	4a17      	ldr	r2, [pc, #92]	; (402700 <xTaskRemoveFromEventList+0x80>)
  4026a4:	6811      	ldr	r1, [r2, #0]
  4026a6:	2301      	movs	r3, #1
  4026a8:	4083      	lsls	r3, r0
  4026aa:	430b      	orrs	r3, r1
  4026ac:	6013      	str	r3, [r2, #0]
  4026ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4026b2:	4629      	mov	r1, r5
  4026b4:	4b13      	ldr	r3, [pc, #76]	; (402704 <xTaskRemoveFromEventList+0x84>)
  4026b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4026ba:	4b13      	ldr	r3, [pc, #76]	; (402708 <xTaskRemoveFromEventList+0x88>)
  4026bc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4026be:	4b13      	ldr	r3, [pc, #76]	; (40270c <xTaskRemoveFromEventList+0x8c>)
  4026c0:	681b      	ldr	r3, [r3, #0]
  4026c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4026c6:	429a      	cmp	r2, r3
  4026c8:	d913      	bls.n	4026f2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4026ca:	2001      	movs	r0, #1
  4026cc:	4b10      	ldr	r3, [pc, #64]	; (402710 <xTaskRemoveFromEventList+0x90>)
  4026ce:	6018      	str	r0, [r3, #0]
  4026d0:	bd38      	pop	{r3, r4, r5, pc}
  4026d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d6:	b672      	cpsid	i
  4026d8:	f383 8811 	msr	BASEPRI, r3
  4026dc:	f3bf 8f6f 	isb	sy
  4026e0:	f3bf 8f4f 	dsb	sy
  4026e4:	b662      	cpsie	i
  4026e6:	e7fe      	b.n	4026e6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4026e8:	4629      	mov	r1, r5
  4026ea:	480a      	ldr	r0, [pc, #40]	; (402714 <xTaskRemoveFromEventList+0x94>)
  4026ec:	4b06      	ldr	r3, [pc, #24]	; (402708 <xTaskRemoveFromEventList+0x88>)
  4026ee:	4798      	blx	r3
  4026f0:	e7e5      	b.n	4026be <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4026f2:	2000      	movs	r0, #0
}
  4026f4:	bd38      	pop	{r3, r4, r5, pc}
  4026f6:	bf00      	nop
  4026f8:	004010e1 	.word	0x004010e1
  4026fc:	2040c2d8 	.word	0x2040c2d8
  402700:	2040c2e4 	.word	0x2040c2e4
  402704:	2040c26c 	.word	0x2040c26c
  402708:	00401095 	.word	0x00401095
  40270c:	2040c260 	.word	0x2040c260
  402710:	2040c35c 	.word	0x2040c35c
  402714:	2040c318 	.word	0x2040c318

00402718 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402718:	b130      	cbz	r0, 402728 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40271a:	4a09      	ldr	r2, [pc, #36]	; (402740 <vTaskSetTimeOutState+0x28>)
  40271c:	6812      	ldr	r2, [r2, #0]
  40271e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402720:	4a08      	ldr	r2, [pc, #32]	; (402744 <vTaskSetTimeOutState+0x2c>)
  402722:	6812      	ldr	r2, [r2, #0]
  402724:	6042      	str	r2, [r0, #4]
  402726:	4770      	bx	lr
  402728:	f04f 0380 	mov.w	r3, #128	; 0x80
  40272c:	b672      	cpsid	i
  40272e:	f383 8811 	msr	BASEPRI, r3
  402732:	f3bf 8f6f 	isb	sy
  402736:	f3bf 8f4f 	dsb	sy
  40273a:	b662      	cpsie	i
  40273c:	e7fe      	b.n	40273c <vTaskSetTimeOutState+0x24>
  40273e:	bf00      	nop
  402740:	2040c314 	.word	0x2040c314
  402744:	2040c358 	.word	0x2040c358

00402748 <xTaskCheckForTimeOut>:
{
  402748:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40274a:	b1c0      	cbz	r0, 40277e <xTaskCheckForTimeOut+0x36>
  40274c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40274e:	b309      	cbz	r1, 402794 <xTaskCheckForTimeOut+0x4c>
  402750:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402752:	4b1d      	ldr	r3, [pc, #116]	; (4027c8 <xTaskCheckForTimeOut+0x80>)
  402754:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402756:	4b1d      	ldr	r3, [pc, #116]	; (4027cc <xTaskCheckForTimeOut+0x84>)
  402758:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40275a:	682b      	ldr	r3, [r5, #0]
  40275c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402760:	d02e      	beq.n	4027c0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402762:	491b      	ldr	r1, [pc, #108]	; (4027d0 <xTaskCheckForTimeOut+0x88>)
  402764:	6809      	ldr	r1, [r1, #0]
  402766:	6820      	ldr	r0, [r4, #0]
  402768:	4288      	cmp	r0, r1
  40276a:	d002      	beq.n	402772 <xTaskCheckForTimeOut+0x2a>
  40276c:	6861      	ldr	r1, [r4, #4]
  40276e:	428a      	cmp	r2, r1
  402770:	d228      	bcs.n	4027c4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402772:	6861      	ldr	r1, [r4, #4]
  402774:	1a50      	subs	r0, r2, r1
  402776:	4283      	cmp	r3, r0
  402778:	d817      	bhi.n	4027aa <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40277a:	2401      	movs	r4, #1
  40277c:	e01c      	b.n	4027b8 <xTaskCheckForTimeOut+0x70>
  40277e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402782:	b672      	cpsid	i
  402784:	f383 8811 	msr	BASEPRI, r3
  402788:	f3bf 8f6f 	isb	sy
  40278c:	f3bf 8f4f 	dsb	sy
  402790:	b662      	cpsie	i
  402792:	e7fe      	b.n	402792 <xTaskCheckForTimeOut+0x4a>
  402794:	f04f 0380 	mov.w	r3, #128	; 0x80
  402798:	b672      	cpsid	i
  40279a:	f383 8811 	msr	BASEPRI, r3
  40279e:	f3bf 8f6f 	isb	sy
  4027a2:	f3bf 8f4f 	dsb	sy
  4027a6:	b662      	cpsie	i
  4027a8:	e7fe      	b.n	4027a8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4027aa:	1a9b      	subs	r3, r3, r2
  4027ac:	440b      	add	r3, r1
  4027ae:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4027b0:	4620      	mov	r0, r4
  4027b2:	4b08      	ldr	r3, [pc, #32]	; (4027d4 <xTaskCheckForTimeOut+0x8c>)
  4027b4:	4798      	blx	r3
			xReturn = pdFALSE;
  4027b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4027b8:	4b07      	ldr	r3, [pc, #28]	; (4027d8 <xTaskCheckForTimeOut+0x90>)
  4027ba:	4798      	blx	r3
}
  4027bc:	4620      	mov	r0, r4
  4027be:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4027c0:	2400      	movs	r4, #0
  4027c2:	e7f9      	b.n	4027b8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4027c4:	2401      	movs	r4, #1
  4027c6:	e7f7      	b.n	4027b8 <xTaskCheckForTimeOut+0x70>
  4027c8:	004011c5 	.word	0x004011c5
  4027cc:	2040c358 	.word	0x2040c358
  4027d0:	2040c314 	.word	0x2040c314
  4027d4:	00402719 	.word	0x00402719
  4027d8:	00401211 	.word	0x00401211

004027dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4027dc:	2201      	movs	r2, #1
  4027de:	4b01      	ldr	r3, [pc, #4]	; (4027e4 <vTaskMissedYield+0x8>)
  4027e0:	601a      	str	r2, [r3, #0]
  4027e2:	4770      	bx	lr
  4027e4:	2040c35c 	.word	0x2040c35c

004027e8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4027e8:	4b05      	ldr	r3, [pc, #20]	; (402800 <xTaskGetSchedulerState+0x18>)
  4027ea:	681b      	ldr	r3, [r3, #0]
  4027ec:	b133      	cbz	r3, 4027fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4027ee:	4b05      	ldr	r3, [pc, #20]	; (402804 <xTaskGetSchedulerState+0x1c>)
  4027f0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4027f2:	2b00      	cmp	r3, #0
  4027f4:	bf0c      	ite	eq
  4027f6:	2002      	moveq	r0, #2
  4027f8:	2000      	movne	r0, #0
  4027fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4027fc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4027fe:	4770      	bx	lr
  402800:	2040c32c 	.word	0x2040c32c
  402804:	2040c2d8 	.word	0x2040c2d8

00402808 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402808:	2800      	cmp	r0, #0
  40280a:	d044      	beq.n	402896 <vTaskPriorityInherit+0x8e>
	{
  40280c:	b538      	push	{r3, r4, r5, lr}
  40280e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402810:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402812:	4921      	ldr	r1, [pc, #132]	; (402898 <vTaskPriorityInherit+0x90>)
  402814:	6809      	ldr	r1, [r1, #0]
  402816:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402818:	428a      	cmp	r2, r1
  40281a:	d214      	bcs.n	402846 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40281c:	6981      	ldr	r1, [r0, #24]
  40281e:	2900      	cmp	r1, #0
  402820:	db05      	blt.n	40282e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402822:	491d      	ldr	r1, [pc, #116]	; (402898 <vTaskPriorityInherit+0x90>)
  402824:	6809      	ldr	r1, [r1, #0]
  402826:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402828:	f1c1 0105 	rsb	r1, r1, #5
  40282c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40282e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402832:	491a      	ldr	r1, [pc, #104]	; (40289c <vTaskPriorityInherit+0x94>)
  402834:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402838:	6961      	ldr	r1, [r4, #20]
  40283a:	4291      	cmp	r1, r2
  40283c:	d004      	beq.n	402848 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40283e:	4a16      	ldr	r2, [pc, #88]	; (402898 <vTaskPriorityInherit+0x90>)
  402840:	6812      	ldr	r2, [r2, #0]
  402842:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402844:	62e2      	str	r2, [r4, #44]	; 0x2c
  402846:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402848:	1d25      	adds	r5, r4, #4
  40284a:	4628      	mov	r0, r5
  40284c:	4b14      	ldr	r3, [pc, #80]	; (4028a0 <vTaskPriorityInherit+0x98>)
  40284e:	4798      	blx	r3
  402850:	b970      	cbnz	r0, 402870 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402852:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402854:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402858:	4a10      	ldr	r2, [pc, #64]	; (40289c <vTaskPriorityInherit+0x94>)
  40285a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40285e:	b93a      	cbnz	r2, 402870 <vTaskPriorityInherit+0x68>
  402860:	4810      	ldr	r0, [pc, #64]	; (4028a4 <vTaskPriorityInherit+0x9c>)
  402862:	6802      	ldr	r2, [r0, #0]
  402864:	2101      	movs	r1, #1
  402866:	fa01 f303 	lsl.w	r3, r1, r3
  40286a:	ea22 0303 	bic.w	r3, r2, r3
  40286e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402870:	4b09      	ldr	r3, [pc, #36]	; (402898 <vTaskPriorityInherit+0x90>)
  402872:	681b      	ldr	r3, [r3, #0]
  402874:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402876:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402878:	4a0a      	ldr	r2, [pc, #40]	; (4028a4 <vTaskPriorityInherit+0x9c>)
  40287a:	6811      	ldr	r1, [r2, #0]
  40287c:	2301      	movs	r3, #1
  40287e:	4083      	lsls	r3, r0
  402880:	430b      	orrs	r3, r1
  402882:	6013      	str	r3, [r2, #0]
  402884:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402888:	4629      	mov	r1, r5
  40288a:	4b04      	ldr	r3, [pc, #16]	; (40289c <vTaskPriorityInherit+0x94>)
  40288c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402890:	4b05      	ldr	r3, [pc, #20]	; (4028a8 <vTaskPriorityInherit+0xa0>)
  402892:	4798      	blx	r3
  402894:	bd38      	pop	{r3, r4, r5, pc}
  402896:	4770      	bx	lr
  402898:	2040c260 	.word	0x2040c260
  40289c:	2040c26c 	.word	0x2040c26c
  4028a0:	004010e1 	.word	0x004010e1
  4028a4:	2040c2e4 	.word	0x2040c2e4
  4028a8:	00401095 	.word	0x00401095

004028ac <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4028ac:	2800      	cmp	r0, #0
  4028ae:	d04d      	beq.n	40294c <xTaskPriorityDisinherit+0xa0>
	{
  4028b0:	b538      	push	{r3, r4, r5, lr}
  4028b2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4028b4:	4a27      	ldr	r2, [pc, #156]	; (402954 <xTaskPriorityDisinherit+0xa8>)
  4028b6:	6812      	ldr	r2, [r2, #0]
  4028b8:	4290      	cmp	r0, r2
  4028ba:	d00a      	beq.n	4028d2 <xTaskPriorityDisinherit+0x26>
  4028bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028c0:	b672      	cpsid	i
  4028c2:	f383 8811 	msr	BASEPRI, r3
  4028c6:	f3bf 8f6f 	isb	sy
  4028ca:	f3bf 8f4f 	dsb	sy
  4028ce:	b662      	cpsie	i
  4028d0:	e7fe      	b.n	4028d0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4028d2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4028d4:	b952      	cbnz	r2, 4028ec <xTaskPriorityDisinherit+0x40>
  4028d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028da:	b672      	cpsid	i
  4028dc:	f383 8811 	msr	BASEPRI, r3
  4028e0:	f3bf 8f6f 	isb	sy
  4028e4:	f3bf 8f4f 	dsb	sy
  4028e8:	b662      	cpsie	i
  4028ea:	e7fe      	b.n	4028ea <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4028ec:	3a01      	subs	r2, #1
  4028ee:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4028f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4028f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4028f4:	4288      	cmp	r0, r1
  4028f6:	d02b      	beq.n	402950 <xTaskPriorityDisinherit+0xa4>
  4028f8:	bb52      	cbnz	r2, 402950 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028fa:	1d25      	adds	r5, r4, #4
  4028fc:	4628      	mov	r0, r5
  4028fe:	4b16      	ldr	r3, [pc, #88]	; (402958 <xTaskPriorityDisinherit+0xac>)
  402900:	4798      	blx	r3
  402902:	b968      	cbnz	r0, 402920 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402904:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402906:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40290a:	4b14      	ldr	r3, [pc, #80]	; (40295c <xTaskPriorityDisinherit+0xb0>)
  40290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402910:	b933      	cbnz	r3, 402920 <xTaskPriorityDisinherit+0x74>
  402912:	4813      	ldr	r0, [pc, #76]	; (402960 <xTaskPriorityDisinherit+0xb4>)
  402914:	6803      	ldr	r3, [r0, #0]
  402916:	2201      	movs	r2, #1
  402918:	408a      	lsls	r2, r1
  40291a:	ea23 0302 	bic.w	r3, r3, r2
  40291e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402920:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402922:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402924:	f1c0 0305 	rsb	r3, r0, #5
  402928:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40292a:	4a0d      	ldr	r2, [pc, #52]	; (402960 <xTaskPriorityDisinherit+0xb4>)
  40292c:	6811      	ldr	r1, [r2, #0]
  40292e:	2401      	movs	r4, #1
  402930:	fa04 f300 	lsl.w	r3, r4, r0
  402934:	430b      	orrs	r3, r1
  402936:	6013      	str	r3, [r2, #0]
  402938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40293c:	4629      	mov	r1, r5
  40293e:	4b07      	ldr	r3, [pc, #28]	; (40295c <xTaskPriorityDisinherit+0xb0>)
  402940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402944:	4b07      	ldr	r3, [pc, #28]	; (402964 <xTaskPriorityDisinherit+0xb8>)
  402946:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402948:	4620      	mov	r0, r4
  40294a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40294c:	2000      	movs	r0, #0
  40294e:	4770      	bx	lr
  402950:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402952:	bd38      	pop	{r3, r4, r5, pc}
  402954:	2040c260 	.word	0x2040c260
  402958:	004010e1 	.word	0x004010e1
  40295c:	2040c26c 	.word	0x2040c26c
  402960:	2040c2e4 	.word	0x2040c2e4
  402964:	00401095 	.word	0x00401095

00402968 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402968:	4b05      	ldr	r3, [pc, #20]	; (402980 <pvTaskIncrementMutexHeldCount+0x18>)
  40296a:	681b      	ldr	r3, [r3, #0]
  40296c:	b123      	cbz	r3, 402978 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40296e:	4b04      	ldr	r3, [pc, #16]	; (402980 <pvTaskIncrementMutexHeldCount+0x18>)
  402970:	681a      	ldr	r2, [r3, #0]
  402972:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402974:	3301      	adds	r3, #1
  402976:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402978:	4b01      	ldr	r3, [pc, #4]	; (402980 <pvTaskIncrementMutexHeldCount+0x18>)
  40297a:	6818      	ldr	r0, [r3, #0]
	}
  40297c:	4770      	bx	lr
  40297e:	bf00      	nop
  402980:	2040c260 	.word	0x2040c260

00402984 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402984:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402986:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402988:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40298a:	4291      	cmp	r1, r2
  40298c:	d80c      	bhi.n	4029a8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40298e:	1ad2      	subs	r2, r2, r3
  402990:	6983      	ldr	r3, [r0, #24]
  402992:	429a      	cmp	r2, r3
  402994:	d301      	bcc.n	40299a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402996:	2001      	movs	r0, #1
  402998:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40299a:	1d01      	adds	r1, r0, #4
  40299c:	4b09      	ldr	r3, [pc, #36]	; (4029c4 <prvInsertTimerInActiveList+0x40>)
  40299e:	6818      	ldr	r0, [r3, #0]
  4029a0:	4b09      	ldr	r3, [pc, #36]	; (4029c8 <prvInsertTimerInActiveList+0x44>)
  4029a2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4029a4:	2000      	movs	r0, #0
  4029a6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4029a8:	429a      	cmp	r2, r3
  4029aa:	d203      	bcs.n	4029b4 <prvInsertTimerInActiveList+0x30>
  4029ac:	4299      	cmp	r1, r3
  4029ae:	d301      	bcc.n	4029b4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4029b0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4029b2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4029b4:	1d01      	adds	r1, r0, #4
  4029b6:	4b05      	ldr	r3, [pc, #20]	; (4029cc <prvInsertTimerInActiveList+0x48>)
  4029b8:	6818      	ldr	r0, [r3, #0]
  4029ba:	4b03      	ldr	r3, [pc, #12]	; (4029c8 <prvInsertTimerInActiveList+0x44>)
  4029bc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4029be:	2000      	movs	r0, #0
  4029c0:	bd08      	pop	{r3, pc}
  4029c2:	bf00      	nop
  4029c4:	2040c364 	.word	0x2040c364
  4029c8:	004010ad 	.word	0x004010ad
  4029cc:	2040c360 	.word	0x2040c360

004029d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4029d0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4029d2:	4b15      	ldr	r3, [pc, #84]	; (402a28 <prvCheckForValidListAndQueue+0x58>)
  4029d4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4029d6:	4b15      	ldr	r3, [pc, #84]	; (402a2c <prvCheckForValidListAndQueue+0x5c>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	b113      	cbz	r3, 4029e2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4029dc:	4b14      	ldr	r3, [pc, #80]	; (402a30 <prvCheckForValidListAndQueue+0x60>)
  4029de:	4798      	blx	r3
  4029e0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4029e2:	4d14      	ldr	r5, [pc, #80]	; (402a34 <prvCheckForValidListAndQueue+0x64>)
  4029e4:	4628      	mov	r0, r5
  4029e6:	4e14      	ldr	r6, [pc, #80]	; (402a38 <prvCheckForValidListAndQueue+0x68>)
  4029e8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4029ea:	4c14      	ldr	r4, [pc, #80]	; (402a3c <prvCheckForValidListAndQueue+0x6c>)
  4029ec:	4620      	mov	r0, r4
  4029ee:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4029f0:	4b13      	ldr	r3, [pc, #76]	; (402a40 <prvCheckForValidListAndQueue+0x70>)
  4029f2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4029f4:	4b13      	ldr	r3, [pc, #76]	; (402a44 <prvCheckForValidListAndQueue+0x74>)
  4029f6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4029f8:	2200      	movs	r2, #0
  4029fa:	2110      	movs	r1, #16
  4029fc:	2005      	movs	r0, #5
  4029fe:	4b12      	ldr	r3, [pc, #72]	; (402a48 <prvCheckForValidListAndQueue+0x78>)
  402a00:	4798      	blx	r3
  402a02:	4b0a      	ldr	r3, [pc, #40]	; (402a2c <prvCheckForValidListAndQueue+0x5c>)
  402a04:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402a06:	b118      	cbz	r0, 402a10 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402a08:	4910      	ldr	r1, [pc, #64]	; (402a4c <prvCheckForValidListAndQueue+0x7c>)
  402a0a:	4b11      	ldr	r3, [pc, #68]	; (402a50 <prvCheckForValidListAndQueue+0x80>)
  402a0c:	4798      	blx	r3
  402a0e:	e7e5      	b.n	4029dc <prvCheckForValidListAndQueue+0xc>
  402a10:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a14:	b672      	cpsid	i
  402a16:	f383 8811 	msr	BASEPRI, r3
  402a1a:	f3bf 8f6f 	isb	sy
  402a1e:	f3bf 8f4f 	dsb	sy
  402a22:	b662      	cpsie	i
  402a24:	e7fe      	b.n	402a24 <prvCheckForValidListAndQueue+0x54>
  402a26:	bf00      	nop
  402a28:	004011c5 	.word	0x004011c5
  402a2c:	2040c394 	.word	0x2040c394
  402a30:	00401211 	.word	0x00401211
  402a34:	2040c368 	.word	0x2040c368
  402a38:	00401079 	.word	0x00401079
  402a3c:	2040c37c 	.word	0x2040c37c
  402a40:	2040c360 	.word	0x2040c360
  402a44:	2040c364 	.word	0x2040c364
  402a48:	0040171d 	.word	0x0040171d
  402a4c:	00406960 	.word	0x00406960
  402a50:	00401d2d 	.word	0x00401d2d

00402a54 <xTimerCreateTimerTask>:
{
  402a54:	b510      	push	{r4, lr}
  402a56:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402a58:	4b0f      	ldr	r3, [pc, #60]	; (402a98 <xTimerCreateTimerTask+0x44>)
  402a5a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402a5c:	4b0f      	ldr	r3, [pc, #60]	; (402a9c <xTimerCreateTimerTask+0x48>)
  402a5e:	681b      	ldr	r3, [r3, #0]
  402a60:	b173      	cbz	r3, 402a80 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402a62:	2300      	movs	r3, #0
  402a64:	9303      	str	r3, [sp, #12]
  402a66:	9302      	str	r3, [sp, #8]
  402a68:	9301      	str	r3, [sp, #4]
  402a6a:	2204      	movs	r2, #4
  402a6c:	9200      	str	r2, [sp, #0]
  402a6e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402a72:	490b      	ldr	r1, [pc, #44]	; (402aa0 <xTimerCreateTimerTask+0x4c>)
  402a74:	480b      	ldr	r0, [pc, #44]	; (402aa4 <xTimerCreateTimerTask+0x50>)
  402a76:	4c0c      	ldr	r4, [pc, #48]	; (402aa8 <xTimerCreateTimerTask+0x54>)
  402a78:	47a0      	blx	r4
	configASSERT( xReturn );
  402a7a:	b108      	cbz	r0, 402a80 <xTimerCreateTimerTask+0x2c>
}
  402a7c:	b004      	add	sp, #16
  402a7e:	bd10      	pop	{r4, pc}
  402a80:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a84:	b672      	cpsid	i
  402a86:	f383 8811 	msr	BASEPRI, r3
  402a8a:	f3bf 8f6f 	isb	sy
  402a8e:	f3bf 8f4f 	dsb	sy
  402a92:	b662      	cpsie	i
  402a94:	e7fe      	b.n	402a94 <xTimerCreateTimerTask+0x40>
  402a96:	bf00      	nop
  402a98:	004029d1 	.word	0x004029d1
  402a9c:	2040c394 	.word	0x2040c394
  402aa0:	00406968 	.word	0x00406968
  402aa4:	00402bd5 	.word	0x00402bd5
  402aa8:	00401e3d 	.word	0x00401e3d

00402aac <xTimerGenericCommand>:
	configASSERT( xTimer );
  402aac:	b1d8      	cbz	r0, 402ae6 <xTimerGenericCommand+0x3a>
{
  402aae:	b530      	push	{r4, r5, lr}
  402ab0:	b085      	sub	sp, #20
  402ab2:	4615      	mov	r5, r2
  402ab4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402ab6:	4a15      	ldr	r2, [pc, #84]	; (402b0c <xTimerGenericCommand+0x60>)
  402ab8:	6810      	ldr	r0, [r2, #0]
  402aba:	b320      	cbz	r0, 402b06 <xTimerGenericCommand+0x5a>
  402abc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402abe:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402ac0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402ac2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402ac4:	2905      	cmp	r1, #5
  402ac6:	dc19      	bgt.n	402afc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402ac8:	4b11      	ldr	r3, [pc, #68]	; (402b10 <xTimerGenericCommand+0x64>)
  402aca:	4798      	blx	r3
  402acc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402ace:	f04f 0300 	mov.w	r3, #0
  402ad2:	bf0c      	ite	eq
  402ad4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402ad6:	461a      	movne	r2, r3
  402ad8:	4669      	mov	r1, sp
  402ada:	480c      	ldr	r0, [pc, #48]	; (402b0c <xTimerGenericCommand+0x60>)
  402adc:	6800      	ldr	r0, [r0, #0]
  402ade:	4c0d      	ldr	r4, [pc, #52]	; (402b14 <xTimerGenericCommand+0x68>)
  402ae0:	47a0      	blx	r4
}
  402ae2:	b005      	add	sp, #20
  402ae4:	bd30      	pop	{r4, r5, pc}
  402ae6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402aea:	b672      	cpsid	i
  402aec:	f383 8811 	msr	BASEPRI, r3
  402af0:	f3bf 8f6f 	isb	sy
  402af4:	f3bf 8f4f 	dsb	sy
  402af8:	b662      	cpsie	i
  402afa:	e7fe      	b.n	402afa <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402afc:	2300      	movs	r3, #0
  402afe:	4669      	mov	r1, sp
  402b00:	4c05      	ldr	r4, [pc, #20]	; (402b18 <xTimerGenericCommand+0x6c>)
  402b02:	47a0      	blx	r4
  402b04:	e7ed      	b.n	402ae2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402b06:	2000      	movs	r0, #0
	return xReturn;
  402b08:	e7eb      	b.n	402ae2 <xTimerGenericCommand+0x36>
  402b0a:	bf00      	nop
  402b0c:	2040c394 	.word	0x2040c394
  402b10:	004027e9 	.word	0x004027e9
  402b14:	00401799 	.word	0x00401799
  402b18:	0040197d 	.word	0x0040197d

00402b1c <prvSampleTimeNow>:
{
  402b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b20:	b082      	sub	sp, #8
  402b22:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402b24:	4b24      	ldr	r3, [pc, #144]	; (402bb8 <prvSampleTimeNow+0x9c>)
  402b26:	4798      	blx	r3
  402b28:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402b2a:	4b24      	ldr	r3, [pc, #144]	; (402bbc <prvSampleTimeNow+0xa0>)
  402b2c:	681b      	ldr	r3, [r3, #0]
  402b2e:	4298      	cmp	r0, r3
  402b30:	d31b      	bcc.n	402b6a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402b32:	2300      	movs	r3, #0
  402b34:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402b38:	4b20      	ldr	r3, [pc, #128]	; (402bbc <prvSampleTimeNow+0xa0>)
  402b3a:	601f      	str	r7, [r3, #0]
}
  402b3c:	4638      	mov	r0, r7
  402b3e:	b002      	add	sp, #8
  402b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b44:	2100      	movs	r1, #0
  402b46:	9100      	str	r1, [sp, #0]
  402b48:	460b      	mov	r3, r1
  402b4a:	4652      	mov	r2, sl
  402b4c:	4620      	mov	r0, r4
  402b4e:	4c1c      	ldr	r4, [pc, #112]	; (402bc0 <prvSampleTimeNow+0xa4>)
  402b50:	47a0      	blx	r4
				configASSERT( xResult );
  402b52:	b960      	cbnz	r0, 402b6e <prvSampleTimeNow+0x52>
  402b54:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b58:	b672      	cpsid	i
  402b5a:	f383 8811 	msr	BASEPRI, r3
  402b5e:	f3bf 8f6f 	isb	sy
  402b62:	f3bf 8f4f 	dsb	sy
  402b66:	b662      	cpsie	i
  402b68:	e7fe      	b.n	402b68 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b6a:	4d16      	ldr	r5, [pc, #88]	; (402bc4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b6c:	4e16      	ldr	r6, [pc, #88]	; (402bc8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b6e:	682b      	ldr	r3, [r5, #0]
  402b70:	681a      	ldr	r2, [r3, #0]
  402b72:	b1c2      	cbz	r2, 402ba6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b74:	68db      	ldr	r3, [r3, #12]
  402b76:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b7a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b7c:	f104 0904 	add.w	r9, r4, #4
  402b80:	4648      	mov	r0, r9
  402b82:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b86:	4620      	mov	r0, r4
  402b88:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b8a:	69e3      	ldr	r3, [r4, #28]
  402b8c:	2b01      	cmp	r3, #1
  402b8e:	d1ee      	bne.n	402b6e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402b90:	69a3      	ldr	r3, [r4, #24]
  402b92:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402b94:	459a      	cmp	sl, r3
  402b96:	d2d5      	bcs.n	402b44 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402b98:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402b9a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b9c:	4649      	mov	r1, r9
  402b9e:	6828      	ldr	r0, [r5, #0]
  402ba0:	4b0a      	ldr	r3, [pc, #40]	; (402bcc <prvSampleTimeNow+0xb0>)
  402ba2:	4798      	blx	r3
  402ba4:	e7e3      	b.n	402b6e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402ba6:	4a0a      	ldr	r2, [pc, #40]	; (402bd0 <prvSampleTimeNow+0xb4>)
  402ba8:	6810      	ldr	r0, [r2, #0]
  402baa:	4906      	ldr	r1, [pc, #24]	; (402bc4 <prvSampleTimeNow+0xa8>)
  402bac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402bae:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402bb0:	2301      	movs	r3, #1
  402bb2:	f8c8 3000 	str.w	r3, [r8]
  402bb6:	e7bf      	b.n	402b38 <prvSampleTimeNow+0x1c>
  402bb8:	0040210d 	.word	0x0040210d
  402bbc:	2040c390 	.word	0x2040c390
  402bc0:	00402aad 	.word	0x00402aad
  402bc4:	2040c360 	.word	0x2040c360
  402bc8:	004010e1 	.word	0x004010e1
  402bcc:	004010ad 	.word	0x004010ad
  402bd0:	2040c364 	.word	0x2040c364

00402bd4 <prvTimerTask>:
{
  402bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402bd8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402bda:	4e75      	ldr	r6, [pc, #468]	; (402db0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402bdc:	4f75      	ldr	r7, [pc, #468]	; (402db4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402bde:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402ddc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402be2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402de0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402be6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402be8:	681a      	ldr	r2, [r3, #0]
  402bea:	2a00      	cmp	r2, #0
  402bec:	f000 80ce 	beq.w	402d8c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402bf0:	68db      	ldr	r3, [r3, #12]
  402bf2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402bf4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bf6:	a804      	add	r0, sp, #16
  402bf8:	4b6f      	ldr	r3, [pc, #444]	; (402db8 <prvTimerTask+0x1e4>)
  402bfa:	4798      	blx	r3
  402bfc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bfe:	9b04      	ldr	r3, [sp, #16]
  402c00:	2b00      	cmp	r3, #0
  402c02:	d144      	bne.n	402c8e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402c04:	42a0      	cmp	r0, r4
  402c06:	d212      	bcs.n	402c2e <prvTimerTask+0x5a>
  402c08:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402c0a:	1b61      	subs	r1, r4, r5
  402c0c:	4b6b      	ldr	r3, [pc, #428]	; (402dbc <prvTimerTask+0x1e8>)
  402c0e:	6818      	ldr	r0, [r3, #0]
  402c10:	4b6b      	ldr	r3, [pc, #428]	; (402dc0 <prvTimerTask+0x1ec>)
  402c12:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402c14:	4b6b      	ldr	r3, [pc, #428]	; (402dc4 <prvTimerTask+0x1f0>)
  402c16:	4798      	blx	r3
  402c18:	2800      	cmp	r0, #0
  402c1a:	d13a      	bne.n	402c92 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402c1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402c20:	f8c9 3000 	str.w	r3, [r9]
  402c24:	f3bf 8f4f 	dsb	sy
  402c28:	f3bf 8f6f 	isb	sy
  402c2c:	e031      	b.n	402c92 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402c2e:	4b65      	ldr	r3, [pc, #404]	; (402dc4 <prvTimerTask+0x1f0>)
  402c30:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402c32:	6833      	ldr	r3, [r6, #0]
  402c34:	68db      	ldr	r3, [r3, #12]
  402c36:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c3a:	f10a 0004 	add.w	r0, sl, #4
  402c3e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c40:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c44:	2b01      	cmp	r3, #1
  402c46:	d004      	beq.n	402c52 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c48:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c4c:	4650      	mov	r0, sl
  402c4e:	4798      	blx	r3
  402c50:	e01f      	b.n	402c92 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402c52:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c56:	4623      	mov	r3, r4
  402c58:	462a      	mov	r2, r5
  402c5a:	4421      	add	r1, r4
  402c5c:	4650      	mov	r0, sl
  402c5e:	4d5a      	ldr	r5, [pc, #360]	; (402dc8 <prvTimerTask+0x1f4>)
  402c60:	47a8      	blx	r5
  402c62:	2801      	cmp	r0, #1
  402c64:	d1f0      	bne.n	402c48 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c66:	2100      	movs	r1, #0
  402c68:	9100      	str	r1, [sp, #0]
  402c6a:	460b      	mov	r3, r1
  402c6c:	4622      	mov	r2, r4
  402c6e:	4650      	mov	r0, sl
  402c70:	4c56      	ldr	r4, [pc, #344]	; (402dcc <prvTimerTask+0x1f8>)
  402c72:	47a0      	blx	r4
			configASSERT( xResult );
  402c74:	2800      	cmp	r0, #0
  402c76:	d1e7      	bne.n	402c48 <prvTimerTask+0x74>
  402c78:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c7c:	b672      	cpsid	i
  402c7e:	f383 8811 	msr	BASEPRI, r3
  402c82:	f3bf 8f6f 	isb	sy
  402c86:	f3bf 8f4f 	dsb	sy
  402c8a:	b662      	cpsie	i
  402c8c:	e7fe      	b.n	402c8c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402c8e:	4b4d      	ldr	r3, [pc, #308]	; (402dc4 <prvTimerTask+0x1f0>)
  402c90:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c92:	4d4a      	ldr	r5, [pc, #296]	; (402dbc <prvTimerTask+0x1e8>)
  402c94:	4c4e      	ldr	r4, [pc, #312]	; (402dd0 <prvTimerTask+0x1fc>)
  402c96:	e006      	b.n	402ca6 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402c98:	9907      	ldr	r1, [sp, #28]
  402c9a:	9806      	ldr	r0, [sp, #24]
  402c9c:	9b05      	ldr	r3, [sp, #20]
  402c9e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402ca0:	9b04      	ldr	r3, [sp, #16]
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	da09      	bge.n	402cba <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402ca6:	2300      	movs	r3, #0
  402ca8:	461a      	mov	r2, r3
  402caa:	a904      	add	r1, sp, #16
  402cac:	6828      	ldr	r0, [r5, #0]
  402cae:	47a0      	blx	r4
  402cb0:	2800      	cmp	r0, #0
  402cb2:	d098      	beq.n	402be6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402cb4:	9b04      	ldr	r3, [sp, #16]
  402cb6:	2b00      	cmp	r3, #0
  402cb8:	dbee      	blt.n	402c98 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402cba:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402cbe:	f8da 3014 	ldr.w	r3, [sl, #20]
  402cc2:	b113      	cbz	r3, 402cca <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402cc4:	f10a 0004 	add.w	r0, sl, #4
  402cc8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402cca:	a803      	add	r0, sp, #12
  402ccc:	4b3a      	ldr	r3, [pc, #232]	; (402db8 <prvTimerTask+0x1e4>)
  402cce:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402cd0:	9b04      	ldr	r3, [sp, #16]
  402cd2:	2b09      	cmp	r3, #9
  402cd4:	d8e7      	bhi.n	402ca6 <prvTimerTask+0xd2>
  402cd6:	a201      	add	r2, pc, #4	; (adr r2, 402cdc <prvTimerTask+0x108>)
  402cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402cdc:	00402d05 	.word	0x00402d05
  402ce0:	00402d05 	.word	0x00402d05
  402ce4:	00402d05 	.word	0x00402d05
  402ce8:	00402ca7 	.word	0x00402ca7
  402cec:	00402d59 	.word	0x00402d59
  402cf0:	00402d85 	.word	0x00402d85
  402cf4:	00402d05 	.word	0x00402d05
  402cf8:	00402d05 	.word	0x00402d05
  402cfc:	00402ca7 	.word	0x00402ca7
  402d00:	00402d59 	.word	0x00402d59
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402d04:	9c05      	ldr	r4, [sp, #20]
  402d06:	f8da 1018 	ldr.w	r1, [sl, #24]
  402d0a:	4623      	mov	r3, r4
  402d0c:	4602      	mov	r2, r0
  402d0e:	4421      	add	r1, r4
  402d10:	4650      	mov	r0, sl
  402d12:	4c2d      	ldr	r4, [pc, #180]	; (402dc8 <prvTimerTask+0x1f4>)
  402d14:	47a0      	blx	r4
  402d16:	2801      	cmp	r0, #1
  402d18:	d1bc      	bne.n	402c94 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402d1a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402d1e:	4650      	mov	r0, sl
  402d20:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402d22:	f8da 301c 	ldr.w	r3, [sl, #28]
  402d26:	2b01      	cmp	r3, #1
  402d28:	d1b4      	bne.n	402c94 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402d2a:	f8da 2018 	ldr.w	r2, [sl, #24]
  402d2e:	2100      	movs	r1, #0
  402d30:	9100      	str	r1, [sp, #0]
  402d32:	460b      	mov	r3, r1
  402d34:	9805      	ldr	r0, [sp, #20]
  402d36:	4402      	add	r2, r0
  402d38:	4650      	mov	r0, sl
  402d3a:	4c24      	ldr	r4, [pc, #144]	; (402dcc <prvTimerTask+0x1f8>)
  402d3c:	47a0      	blx	r4
							configASSERT( xResult );
  402d3e:	2800      	cmp	r0, #0
  402d40:	d1a8      	bne.n	402c94 <prvTimerTask+0xc0>
  402d42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d46:	b672      	cpsid	i
  402d48:	f383 8811 	msr	BASEPRI, r3
  402d4c:	f3bf 8f6f 	isb	sy
  402d50:	f3bf 8f4f 	dsb	sy
  402d54:	b662      	cpsie	i
  402d56:	e7fe      	b.n	402d56 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402d58:	9905      	ldr	r1, [sp, #20]
  402d5a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402d5e:	b131      	cbz	r1, 402d6e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402d60:	4603      	mov	r3, r0
  402d62:	4602      	mov	r2, r0
  402d64:	4401      	add	r1, r0
  402d66:	4650      	mov	r0, sl
  402d68:	4c17      	ldr	r4, [pc, #92]	; (402dc8 <prvTimerTask+0x1f4>)
  402d6a:	47a0      	blx	r4
  402d6c:	e792      	b.n	402c94 <prvTimerTask+0xc0>
  402d6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d72:	b672      	cpsid	i
  402d74:	f383 8811 	msr	BASEPRI, r3
  402d78:	f3bf 8f6f 	isb	sy
  402d7c:	f3bf 8f4f 	dsb	sy
  402d80:	b662      	cpsie	i
  402d82:	e7fe      	b.n	402d82 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402d84:	4650      	mov	r0, sl
  402d86:	4b13      	ldr	r3, [pc, #76]	; (402dd4 <prvTimerTask+0x200>)
  402d88:	4798      	blx	r3
  402d8a:	e783      	b.n	402c94 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402d8c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402d8e:	a804      	add	r0, sp, #16
  402d90:	4b09      	ldr	r3, [pc, #36]	; (402db8 <prvTimerTask+0x1e4>)
  402d92:	4798      	blx	r3
  402d94:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402d96:	9b04      	ldr	r3, [sp, #16]
  402d98:	2b00      	cmp	r3, #0
  402d9a:	f47f af78 	bne.w	402c8e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402d9e:	4b0e      	ldr	r3, [pc, #56]	; (402dd8 <prvTimerTask+0x204>)
  402da0:	681b      	ldr	r3, [r3, #0]
  402da2:	681a      	ldr	r2, [r3, #0]
  402da4:	fab2 f282 	clz	r2, r2
  402da8:	0952      	lsrs	r2, r2, #5
  402daa:	2400      	movs	r4, #0
  402dac:	e72d      	b.n	402c0a <prvTimerTask+0x36>
  402dae:	bf00      	nop
  402db0:	2040c360 	.word	0x2040c360
  402db4:	004020fd 	.word	0x004020fd
  402db8:	00402b1d 	.word	0x00402b1d
  402dbc:	2040c394 	.word	0x2040c394
  402dc0:	00401d61 	.word	0x00401d61
  402dc4:	00402265 	.word	0x00402265
  402dc8:	00402985 	.word	0x00402985
  402dcc:	00402aad 	.word	0x00402aad
  402dd0:	00401b5d 	.word	0x00401b5d
  402dd4:	00401491 	.word	0x00401491
  402dd8:	2040c364 	.word	0x2040c364
  402ddc:	e000ed04 	.word	0xe000ed04
  402de0:	004010e1 	.word	0x004010e1

00402de4 <but_callback>:
/************************************************************************/

uint8_t maqEst = 0;

void but_callback(void)
{
  402de4:	b500      	push	{lr}
  402de6:	b083      	sub	sp, #12
	
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402de8:	a902      	add	r1, sp, #8
  402dea:	2300      	movs	r3, #0
  402dec:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB1, &xHigherPriorityTaskWoken);
  402df0:	4b03      	ldr	r3, [pc, #12]	; (402e00 <but_callback+0x1c>)
  402df2:	6818      	ldr	r0, [r3, #0]
  402df4:	4b03      	ldr	r3, [pc, #12]	; (402e04 <but_callback+0x20>)
  402df6:	4798      	blx	r3
}
  402df8:	b003      	add	sp, #12
  402dfa:	f85d fb04 	ldr.w	pc, [sp], #4
  402dfe:	bf00      	nop
  402e00:	2040c4e8 	.word	0x2040c4e8
  402e04:	00401a7d 	.word	0x00401a7d

00402e08 <but_verde_callback>:

void but_verde_callback(void)
{
  402e08:	b500      	push	{lr}
  402e0a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e0c:	a902      	add	r1, sp, #8
  402e0e:	2300      	movs	r3, #0
  402e10:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB2, &xHigherPriorityTaskWoken);
  402e14:	4b03      	ldr	r3, [pc, #12]	; (402e24 <but_verde_callback+0x1c>)
  402e16:	6818      	ldr	r0, [r3, #0]
  402e18:	4b03      	ldr	r3, [pc, #12]	; (402e28 <but_verde_callback+0x20>)
  402e1a:	4798      	blx	r3

}
  402e1c:	b003      	add	sp, #12
  402e1e:	f85d fb04 	ldr.w	pc, [sp], #4
  402e22:	bf00      	nop
  402e24:	2040c4e0 	.word	0x2040c4e0
  402e28:	00401a7d 	.word	0x00401a7d

00402e2c <but_vermelho_callback>:

void but_vermelho_callback(void)
{
  402e2c:	b500      	push	{lr}
  402e2e:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e30:	a902      	add	r1, sp, #8
  402e32:	2300      	movs	r3, #0
  402e34:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB3, &xHigherPriorityTaskWoken);
  402e38:	4b03      	ldr	r3, [pc, #12]	; (402e48 <but_vermelho_callback+0x1c>)
  402e3a:	6818      	ldr	r0, [r3, #0]
  402e3c:	4b03      	ldr	r3, [pc, #12]	; (402e4c <but_vermelho_callback+0x20>)
  402e3e:	4798      	blx	r3

}
  402e40:	b003      	add	sp, #12
  402e42:	f85d fb04 	ldr.w	pc, [sp], #4
  402e46:	bf00      	nop
  402e48:	2040c498 	.word	0x2040c498
  402e4c:	00401a7d 	.word	0x00401a7d

00402e50 <but_branco_callback>:

void but_branco_callback(void)
{
  402e50:	b500      	push	{lr}
  402e52:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e54:	a902      	add	r1, sp, #8
  402e56:	2300      	movs	r3, #0
  402e58:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB4, &xHigherPriorityTaskWoken);
  402e5c:	4b03      	ldr	r3, [pc, #12]	; (402e6c <but_branco_callback+0x1c>)
  402e5e:	6818      	ldr	r0, [r3, #0]
  402e60:	4b03      	ldr	r3, [pc, #12]	; (402e70 <but_branco_callback+0x20>)
  402e62:	4798      	blx	r3
}
  402e64:	b003      	add	sp, #12
  402e66:	f85d fb04 	ldr.w	pc, [sp], #4
  402e6a:	bf00      	nop
  402e6c:	2040c4dc 	.word	0x2040c4dc
  402e70:	00401a7d 	.word	0x00401a7d

00402e74 <but_amarelo_callback>:

void but_amarelo_callback(void)
{
  402e74:	b500      	push	{lr}
  402e76:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e78:	a902      	add	r1, sp, #8
  402e7a:	2300      	movs	r3, #0
  402e7c:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB5, &xHigherPriorityTaskWoken);
  402e80:	4b03      	ldr	r3, [pc, #12]	; (402e90 <but_amarelo_callback+0x1c>)
  402e82:	6818      	ldr	r0, [r3, #0]
  402e84:	4b03      	ldr	r3, [pc, #12]	; (402e94 <but_amarelo_callback+0x20>)
  402e86:	4798      	blx	r3
}
  402e88:	b003      	add	sp, #12
  402e8a:	f85d fb04 	ldr.w	pc, [sp], #4
  402e8e:	bf00      	nop
  402e90:	2040c4ec 	.word	0x2040c4ec
  402e94:	00401a7d 	.word	0x00401a7d

00402e98 <but_preto_callback>:

void but_preto_callback(void)
{
  402e98:	b500      	push	{lr}
  402e9a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402e9c:	a902      	add	r1, sp, #8
  402e9e:	2300      	movs	r3, #0
  402ea0:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreB6, &xHigherPriorityTaskWoken);
  402ea4:	4b03      	ldr	r3, [pc, #12]	; (402eb4 <but_preto_callback+0x1c>)
  402ea6:	6818      	ldr	r0, [r3, #0]
  402ea8:	4b03      	ldr	r3, [pc, #12]	; (402eb8 <but_preto_callback+0x20>)
  402eaa:	4798      	blx	r3
}
  402eac:	b003      	add	sp, #12
  402eae:	f85d fb04 	ldr.w	pc, [sp], #4
  402eb2:	bf00      	nop
  402eb4:	2040c49c 	.word	0x2040c49c
  402eb8:	00401a7d 	.word	0x00401a7d

00402ebc <usart_serial_putchar>:
{
  402ebc:	b570      	push	{r4, r5, r6, lr}
  402ebe:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402ec0:	4b2a      	ldr	r3, [pc, #168]	; (402f6c <usart_serial_putchar+0xb0>)
  402ec2:	4298      	cmp	r0, r3
  402ec4:	d013      	beq.n	402eee <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402ec6:	4b2a      	ldr	r3, [pc, #168]	; (402f70 <usart_serial_putchar+0xb4>)
  402ec8:	4298      	cmp	r0, r3
  402eca:	d019      	beq.n	402f00 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402ecc:	4b29      	ldr	r3, [pc, #164]	; (402f74 <usart_serial_putchar+0xb8>)
  402ece:	4298      	cmp	r0, r3
  402ed0:	d01f      	beq.n	402f12 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402ed2:	4b29      	ldr	r3, [pc, #164]	; (402f78 <usart_serial_putchar+0xbc>)
  402ed4:	4298      	cmp	r0, r3
  402ed6:	d025      	beq.n	402f24 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402ed8:	4b28      	ldr	r3, [pc, #160]	; (402f7c <usart_serial_putchar+0xc0>)
  402eda:	4298      	cmp	r0, r3
  402edc:	d02b      	beq.n	402f36 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402ede:	4b28      	ldr	r3, [pc, #160]	; (402f80 <usart_serial_putchar+0xc4>)
  402ee0:	4298      	cmp	r0, r3
  402ee2:	d031      	beq.n	402f48 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402ee4:	4b27      	ldr	r3, [pc, #156]	; (402f84 <usart_serial_putchar+0xc8>)
  402ee6:	4298      	cmp	r0, r3
  402ee8:	d037      	beq.n	402f5a <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402eea:	2000      	movs	r0, #0
}
  402eec:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402eee:	461e      	mov	r6, r3
  402ef0:	4d25      	ldr	r5, [pc, #148]	; (402f88 <usart_serial_putchar+0xcc>)
  402ef2:	4621      	mov	r1, r4
  402ef4:	4630      	mov	r0, r6
  402ef6:	47a8      	blx	r5
  402ef8:	2800      	cmp	r0, #0
  402efa:	d1fa      	bne.n	402ef2 <usart_serial_putchar+0x36>
		return 1;
  402efc:	2001      	movs	r0, #1
  402efe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f00:	461e      	mov	r6, r3
  402f02:	4d21      	ldr	r5, [pc, #132]	; (402f88 <usart_serial_putchar+0xcc>)
  402f04:	4621      	mov	r1, r4
  402f06:	4630      	mov	r0, r6
  402f08:	47a8      	blx	r5
  402f0a:	2800      	cmp	r0, #0
  402f0c:	d1fa      	bne.n	402f04 <usart_serial_putchar+0x48>
		return 1;
  402f0e:	2001      	movs	r0, #1
  402f10:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f12:	461e      	mov	r6, r3
  402f14:	4d1c      	ldr	r5, [pc, #112]	; (402f88 <usart_serial_putchar+0xcc>)
  402f16:	4621      	mov	r1, r4
  402f18:	4630      	mov	r0, r6
  402f1a:	47a8      	blx	r5
  402f1c:	2800      	cmp	r0, #0
  402f1e:	d1fa      	bne.n	402f16 <usart_serial_putchar+0x5a>
		return 1;
  402f20:	2001      	movs	r0, #1
  402f22:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402f24:	461e      	mov	r6, r3
  402f26:	4d18      	ldr	r5, [pc, #96]	; (402f88 <usart_serial_putchar+0xcc>)
  402f28:	4621      	mov	r1, r4
  402f2a:	4630      	mov	r0, r6
  402f2c:	47a8      	blx	r5
  402f2e:	2800      	cmp	r0, #0
  402f30:	d1fa      	bne.n	402f28 <usart_serial_putchar+0x6c>
		return 1;
  402f32:	2001      	movs	r0, #1
  402f34:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f36:	461e      	mov	r6, r3
  402f38:	4d14      	ldr	r5, [pc, #80]	; (402f8c <usart_serial_putchar+0xd0>)
  402f3a:	4621      	mov	r1, r4
  402f3c:	4630      	mov	r0, r6
  402f3e:	47a8      	blx	r5
  402f40:	2800      	cmp	r0, #0
  402f42:	d1fa      	bne.n	402f3a <usart_serial_putchar+0x7e>
		return 1;
  402f44:	2001      	movs	r0, #1
  402f46:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f48:	461e      	mov	r6, r3
  402f4a:	4d10      	ldr	r5, [pc, #64]	; (402f8c <usart_serial_putchar+0xd0>)
  402f4c:	4621      	mov	r1, r4
  402f4e:	4630      	mov	r0, r6
  402f50:	47a8      	blx	r5
  402f52:	2800      	cmp	r0, #0
  402f54:	d1fa      	bne.n	402f4c <usart_serial_putchar+0x90>
		return 1;
  402f56:	2001      	movs	r0, #1
  402f58:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f5a:	461e      	mov	r6, r3
  402f5c:	4d0b      	ldr	r5, [pc, #44]	; (402f8c <usart_serial_putchar+0xd0>)
  402f5e:	4621      	mov	r1, r4
  402f60:	4630      	mov	r0, r6
  402f62:	47a8      	blx	r5
  402f64:	2800      	cmp	r0, #0
  402f66:	d1fa      	bne.n	402f5e <usart_serial_putchar+0xa2>
		return 1;
  402f68:	2001      	movs	r0, #1
  402f6a:	bd70      	pop	{r4, r5, r6, pc}
  402f6c:	400e0800 	.word	0x400e0800
  402f70:	400e0a00 	.word	0x400e0a00
  402f74:	400e1a00 	.word	0x400e1a00
  402f78:	400e1c00 	.word	0x400e1c00
  402f7c:	40024000 	.word	0x40024000
  402f80:	40028000 	.word	0x40028000
  402f84:	4002c000 	.word	0x4002c000
  402f88:	00400c91 	.word	0x00400c91
  402f8c:	00400d99 	.word	0x00400d99

00402f90 <task_bomb1>:
	}
    vTaskDelay( 500 / portTICK_PERIOD_MS);
  }
}

void task_bomb1(void){
  402f90:	b580      	push	{r7, lr}
	while(true){
		if(xSemaphoreTake(xSemaphoreB1, ( TickType_t ) 100) == pdTRUE ){
			pio_set(VALVE_PIO, VALVE_IDX_MASK);
  402f92:	f8df 8064 	ldr.w	r8, [pc, #100]	; 402ff8 <task_bomb1+0x68>
			pio_clear(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  402f96:	4f12      	ldr	r7, [pc, #72]	; (402fe0 <task_bomb1+0x50>)
			// Tempo teste: descobrir o tempo para encher metade de um copo
			vTaskDelay(10000);
  402f98:	4d12      	ldr	r5, [pc, #72]	; (402fe4 <task_bomb1+0x54>)
  402f9a:	e001      	b.n	402fa0 <task_bomb1+0x10>
			pio_clear(VALVE_PIO, VALVE_IDX_MASK);
			pio_set(LED_AZUL_PIO, LED_AZUL_IDX_MASK);			
		}
		vTaskDelay(100);
  402f9c:	2064      	movs	r0, #100	; 0x64
  402f9e:	47a8      	blx	r5
		if(xSemaphoreTake(xSemaphoreB1, ( TickType_t ) 100) == pdTRUE ){
  402fa0:	2300      	movs	r3, #0
  402fa2:	2264      	movs	r2, #100	; 0x64
  402fa4:	4619      	mov	r1, r3
  402fa6:	4810      	ldr	r0, [pc, #64]	; (402fe8 <task_bomb1+0x58>)
  402fa8:	6800      	ldr	r0, [r0, #0]
  402faa:	4c10      	ldr	r4, [pc, #64]	; (402fec <task_bomb1+0x5c>)
  402fac:	47a0      	blx	r4
  402fae:	2801      	cmp	r0, #1
  402fb0:	d1f4      	bne.n	402f9c <task_bomb1+0xc>
			pio_set(VALVE_PIO, VALVE_IDX_MASK);
  402fb2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402fb6:	4640      	mov	r0, r8
  402fb8:	4c0d      	ldr	r4, [pc, #52]	; (402ff0 <task_bomb1+0x60>)
  402fba:	47a0      	blx	r4
			pio_clear(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  402fbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402fc0:	4638      	mov	r0, r7
  402fc2:	4e0c      	ldr	r6, [pc, #48]	; (402ff4 <task_bomb1+0x64>)
  402fc4:	47b0      	blx	r6
			vTaskDelay(10000);
  402fc6:	f242 7010 	movw	r0, #10000	; 0x2710
  402fca:	47a8      	blx	r5
			pio_clear(VALVE_PIO, VALVE_IDX_MASK);
  402fcc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402fd0:	4640      	mov	r0, r8
  402fd2:	47b0      	blx	r6
			pio_set(LED_AZUL_PIO, LED_AZUL_IDX_MASK);			
  402fd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402fd8:	4638      	mov	r0, r7
  402fda:	47a0      	blx	r4
  402fdc:	e7de      	b.n	402f9c <task_bomb1+0xc>
  402fde:	bf00      	nop
  402fe0:	400e0e00 	.word	0x400e0e00
  402fe4:	00402385 	.word	0x00402385
  402fe8:	2040c4e8 	.word	0x2040c4e8
  402fec:	00401b5d 	.word	0x00401b5d
  402ff0:	00400719 	.word	0x00400719
  402ff4:	0040071d 	.word	0x0040071d
  402ff8:	400e1200 	.word	0x400e1200

00402ffc <task_bomb2>:
	}
}

void task_bomb2(void){
  402ffc:	b580      	push	{r7, lr}
	while(true){
		if(xSemaphoreTake(xSemaphoreB2, ( TickType_t ) 100) == pdTRUE ){
  402ffe:	4e12      	ldr	r6, [pc, #72]	; (403048 <task_bomb2+0x4c>)
			pio_set(BOMBA_PIO, BOMBA_IDX_MASK);
  403000:	4f12      	ldr	r7, [pc, #72]	; (40304c <task_bomb2+0x50>)
			pio_clear(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
			// Tempo teste: descobrir o tempo para encher metade de um copo
			vTaskDelay(10000);
  403002:	4d13      	ldr	r5, [pc, #76]	; (403050 <task_bomb2+0x54>)
  403004:	e001      	b.n	40300a <task_bomb2+0xe>
			pio_clear(BOMBA_PIO, BOMBA_IDX_MASK);
			pio_set(LED_VERDE_PIO, LED_VERDE_IDX_MASK);			
		}
		vTaskDelay(100);
  403006:	2064      	movs	r0, #100	; 0x64
  403008:	47a8      	blx	r5
		if(xSemaphoreTake(xSemaphoreB2, ( TickType_t ) 100) == pdTRUE ){
  40300a:	2300      	movs	r3, #0
  40300c:	2264      	movs	r2, #100	; 0x64
  40300e:	4619      	mov	r1, r3
  403010:	6830      	ldr	r0, [r6, #0]
  403012:	4c10      	ldr	r4, [pc, #64]	; (403054 <task_bomb2+0x58>)
  403014:	47a0      	blx	r4
  403016:	2801      	cmp	r0, #1
  403018:	d1f5      	bne.n	403006 <task_bomb2+0xa>
			pio_set(BOMBA_PIO, BOMBA_IDX_MASK);
  40301a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40301e:	4638      	mov	r0, r7
  403020:	4c0d      	ldr	r4, [pc, #52]	; (403058 <task_bomb2+0x5c>)
  403022:	47a0      	blx	r4
			pio_clear(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
  403024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403028:	4638      	mov	r0, r7
  40302a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40305c <task_bomb2+0x60>
  40302e:	47c0      	blx	r8
			vTaskDelay(10000);
  403030:	f242 7010 	movw	r0, #10000	; 0x2710
  403034:	47a8      	blx	r5
			pio_clear(BOMBA_PIO, BOMBA_IDX_MASK);
  403036:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40303a:	4638      	mov	r0, r7
  40303c:	47c0      	blx	r8
			pio_set(LED_VERDE_PIO, LED_VERDE_IDX_MASK);			
  40303e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403042:	4638      	mov	r0, r7
  403044:	47a0      	blx	r4
  403046:	e7de      	b.n	403006 <task_bomb2+0xa>
  403048:	2040c4e0 	.word	0x2040c4e0
  40304c:	400e1400 	.word	0x400e1400
  403050:	00402385 	.word	0x00402385
  403054:	00401b5d 	.word	0x00401b5d
  403058:	00400719 	.word	0x00400719
  40305c:	0040071d 	.word	0x0040071d

00403060 <task_bomb3>:
	}
}

void task_bomb3(void){
  403060:	b580      	push	{r7, lr}
	while(true){
		if(xSemaphoreTake(xSemaphoreB3, ( TickType_t ) 100) == pdTRUE ){
			pio_set(BOMBA3_PIO, BOMBA3_IDX_MASK);
  403062:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4030c8 <task_bomb3+0x68>
			pio_clear(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  403066:	4f12      	ldr	r7, [pc, #72]	; (4030b0 <task_bomb3+0x50>)
			// Tempo teste: descobrir o tempo para encher metade de um copo
			vTaskDelay(10000);
  403068:	4d12      	ldr	r5, [pc, #72]	; (4030b4 <task_bomb3+0x54>)
  40306a:	e001      	b.n	403070 <task_bomb3+0x10>
			pio_clear(BOMBA3_PIO, BOMBA3_IDX_MASK);
			pio_set(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
		}
		vTaskDelay(100);
  40306c:	2064      	movs	r0, #100	; 0x64
  40306e:	47a8      	blx	r5
		if(xSemaphoreTake(xSemaphoreB3, ( TickType_t ) 100) == pdTRUE ){
  403070:	2300      	movs	r3, #0
  403072:	2264      	movs	r2, #100	; 0x64
  403074:	4619      	mov	r1, r3
  403076:	4810      	ldr	r0, [pc, #64]	; (4030b8 <task_bomb3+0x58>)
  403078:	6800      	ldr	r0, [r0, #0]
  40307a:	4c10      	ldr	r4, [pc, #64]	; (4030bc <task_bomb3+0x5c>)
  40307c:	47a0      	blx	r4
  40307e:	2801      	cmp	r0, #1
  403080:	d1f4      	bne.n	40306c <task_bomb3+0xc>
			pio_set(BOMBA3_PIO, BOMBA3_IDX_MASK);
  403082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403086:	4640      	mov	r0, r8
  403088:	4c0d      	ldr	r4, [pc, #52]	; (4030c0 <task_bomb3+0x60>)
  40308a:	47a0      	blx	r4
			pio_clear(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  40308c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403090:	4638      	mov	r0, r7
  403092:	4e0c      	ldr	r6, [pc, #48]	; (4030c4 <task_bomb3+0x64>)
  403094:	47b0      	blx	r6
			vTaskDelay(10000);
  403096:	f242 7010 	movw	r0, #10000	; 0x2710
  40309a:	47a8      	blx	r5
			pio_clear(BOMBA3_PIO, BOMBA3_IDX_MASK);
  40309c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4030a0:	4640      	mov	r0, r8
  4030a2:	47b0      	blx	r6
			pio_set(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  4030a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4030a8:	4638      	mov	r0, r7
  4030aa:	47a0      	blx	r4
  4030ac:	e7de      	b.n	40306c <task_bomb3+0xc>
  4030ae:	bf00      	nop
  4030b0:	400e1400 	.word	0x400e1400
  4030b4:	00402385 	.word	0x00402385
  4030b8:	2040c498 	.word	0x2040c498
  4030bc:	00401b5d 	.word	0x00401b5d
  4030c0:	00400719 	.word	0x00400719
  4030c4:	0040071d 	.word	0x0040071d
  4030c8:	400e0e00 	.word	0x400e0e00

004030cc <task_bomb4>:
	}
}

void task_bomb4(void){
  4030cc:	b580      	push	{r7, lr}
	while(true){
		if(xSemaphoreTake(xSemaphoreB4, ( TickType_t ) 100) == pdTRUE ){
			pio_set(BOMBA4_PIO, BOMBA4_IDX_MASK);
  4030ce:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403144 <task_bomb4+0x78>
			pio_clear(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  4030d2:	4e16      	ldr	r6, [pc, #88]	; (40312c <task_bomb4+0x60>)
			pio_clear(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
			// Tempo teste: descobrir o tempo para encher metade de um copo
			vTaskDelay(10000);
  4030d4:	4d16      	ldr	r5, [pc, #88]	; (403130 <task_bomb4+0x64>)
  4030d6:	e001      	b.n	4030dc <task_bomb4+0x10>
			pio_clear(BOMBA4_PIO, BOMBA4_IDX_MASK);
			pio_set(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
			pio_set(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
		}
		vTaskDelay(100);
  4030d8:	2064      	movs	r0, #100	; 0x64
  4030da:	47a8      	blx	r5
		if(xSemaphoreTake(xSemaphoreB4, ( TickType_t ) 100) == pdTRUE ){
  4030dc:	2300      	movs	r3, #0
  4030de:	2264      	movs	r2, #100	; 0x64
  4030e0:	4619      	mov	r1, r3
  4030e2:	4814      	ldr	r0, [pc, #80]	; (403134 <task_bomb4+0x68>)
  4030e4:	6800      	ldr	r0, [r0, #0]
  4030e6:	4c14      	ldr	r4, [pc, #80]	; (403138 <task_bomb4+0x6c>)
  4030e8:	47a0      	blx	r4
  4030ea:	2801      	cmp	r0, #1
  4030ec:	d1f4      	bne.n	4030d8 <task_bomb4+0xc>
			pio_set(BOMBA4_PIO, BOMBA4_IDX_MASK);
  4030ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4030f2:	4640      	mov	r0, r8
  4030f4:	4c11      	ldr	r4, [pc, #68]	; (40313c <task_bomb4+0x70>)
  4030f6:	47a0      	blx	r4
			pio_clear(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  4030f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4030fc:	4630      	mov	r0, r6
  4030fe:	4f10      	ldr	r7, [pc, #64]	; (403140 <task_bomb4+0x74>)
  403100:	47b8      	blx	r7
			pio_clear(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
  403102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403106:	4630      	mov	r0, r6
  403108:	47b8      	blx	r7
			vTaskDelay(10000);
  40310a:	f242 7010 	movw	r0, #10000	; 0x2710
  40310e:	47a8      	blx	r5
			pio_clear(BOMBA4_PIO, BOMBA4_IDX_MASK);
  403110:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403114:	4640      	mov	r0, r8
  403116:	47b8      	blx	r7
			pio_set(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
  403118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40311c:	4630      	mov	r0, r6
  40311e:	47a0      	blx	r4
			pio_set(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  403120:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403124:	4630      	mov	r0, r6
  403126:	47a0      	blx	r4
  403128:	e7d6      	b.n	4030d8 <task_bomb4+0xc>
  40312a:	bf00      	nop
  40312c:	400e1400 	.word	0x400e1400
  403130:	00402385 	.word	0x00402385
  403134:	2040c4dc 	.word	0x2040c4dc
  403138:	00401b5d 	.word	0x00401b5d
  40313c:	00400719 	.word	0x00400719
  403140:	0040071d 	.word	0x0040071d
  403144:	400e1200 	.word	0x400e1200

00403148 <task_bomb5>:
	}
}

void task_bomb5(void){
  403148:	b580      	push	{r7, lr}
	while(true){
		if(xSemaphoreTake(xSemaphoreB5, ( TickType_t ) 100) == pdTRUE ){
			pio_set(BOMBA5_PIO, BOMBA5_IDX_MASK);
  40314a:	4e17      	ldr	r6, [pc, #92]	; (4031a8 <task_bomb5+0x60>)
			pio_clear(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
			pio_clear(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  40314c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4031c0 <task_bomb5+0x78>
			// Tempo teste: descobrir o tempo para encher metade de um copo
			vTaskDelay(10000);
  403150:	4d16      	ldr	r5, [pc, #88]	; (4031ac <task_bomb5+0x64>)
  403152:	e001      	b.n	403158 <task_bomb5+0x10>
			pio_clear(BOMBA5_PIO, BOMBA5_IDX_MASK);
			pio_set(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
			pio_set(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
		}
		vTaskDelay(100);
  403154:	2064      	movs	r0, #100	; 0x64
  403156:	47a8      	blx	r5
		if(xSemaphoreTake(xSemaphoreB5, ( TickType_t ) 100) == pdTRUE ){
  403158:	2300      	movs	r3, #0
  40315a:	2264      	movs	r2, #100	; 0x64
  40315c:	4619      	mov	r1, r3
  40315e:	4814      	ldr	r0, [pc, #80]	; (4031b0 <task_bomb5+0x68>)
  403160:	6800      	ldr	r0, [r0, #0]
  403162:	4c14      	ldr	r4, [pc, #80]	; (4031b4 <task_bomb5+0x6c>)
  403164:	47a0      	blx	r4
  403166:	2801      	cmp	r0, #1
  403168:	d1f4      	bne.n	403154 <task_bomb5+0xc>
			pio_set(BOMBA5_PIO, BOMBA5_IDX_MASK);
  40316a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40316e:	4630      	mov	r0, r6
  403170:	4c11      	ldr	r4, [pc, #68]	; (4031b8 <task_bomb5+0x70>)
  403172:	47a0      	blx	r4
			pio_clear(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
  403174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403178:	4630      	mov	r0, r6
  40317a:	4f10      	ldr	r7, [pc, #64]	; (4031bc <task_bomb5+0x74>)
  40317c:	47b8      	blx	r7
			pio_clear(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  40317e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403182:	4640      	mov	r0, r8
  403184:	47b8      	blx	r7
			vTaskDelay(10000);
  403186:	f242 7010 	movw	r0, #10000	; 0x2710
  40318a:	47a8      	blx	r5
			pio_clear(BOMBA5_PIO, BOMBA5_IDX_MASK);
  40318c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403190:	4630      	mov	r0, r6
  403192:	47b8      	blx	r7
			pio_set(LED_VERDE_PIO, LED_VERDE_IDX_MASK);
  403194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403198:	4630      	mov	r0, r6
  40319a:	47a0      	blx	r4
			pio_set(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  40319c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031a0:	4640      	mov	r0, r8
  4031a2:	47a0      	blx	r4
  4031a4:	e7d6      	b.n	403154 <task_bomb5+0xc>
  4031a6:	bf00      	nop
  4031a8:	400e1400 	.word	0x400e1400
  4031ac:	00402385 	.word	0x00402385
  4031b0:	2040c4ec 	.word	0x2040c4ec
  4031b4:	00401b5d 	.word	0x00401b5d
  4031b8:	00400719 	.word	0x00400719
  4031bc:	0040071d 	.word	0x0040071d
  4031c0:	400e0e00 	.word	0x400e0e00

004031c4 <task_bomb6>:
	}
}

void task_bomb6(void){
  4031c4:	b580      	push	{r7, lr}
	while(true){
		if(xSemaphoreTake(xSemaphoreB6, ( TickType_t ) 100) == pdTRUE ){
			pio_set(BOMBA6_PIO, BOMBA6_IDX_MASK);
  4031c6:	4e16      	ldr	r6, [pc, #88]	; (403220 <task_bomb6+0x5c>)
			pio_clear(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
			pio_clear(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  4031c8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 403238 <task_bomb6+0x74>
			// Tempo teste: descobrir o tempo para encher metade de um copo
			vTaskDelay(10000);
  4031cc:	4d15      	ldr	r5, [pc, #84]	; (403224 <task_bomb6+0x60>)
  4031ce:	e001      	b.n	4031d4 <task_bomb6+0x10>
			pio_clear(BOMBA6_PIO, BOMBA6_IDX_MASK);
			pio_set(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
			pio_set(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
		}
		vTaskDelay(100);
  4031d0:	2064      	movs	r0, #100	; 0x64
  4031d2:	47a8      	blx	r5
		if(xSemaphoreTake(xSemaphoreB6, ( TickType_t ) 100) == pdTRUE ){
  4031d4:	2300      	movs	r3, #0
  4031d6:	2264      	movs	r2, #100	; 0x64
  4031d8:	4619      	mov	r1, r3
  4031da:	4813      	ldr	r0, [pc, #76]	; (403228 <task_bomb6+0x64>)
  4031dc:	6800      	ldr	r0, [r0, #0]
  4031de:	4c13      	ldr	r4, [pc, #76]	; (40322c <task_bomb6+0x68>)
  4031e0:	47a0      	blx	r4
  4031e2:	2801      	cmp	r0, #1
  4031e4:	d1f4      	bne.n	4031d0 <task_bomb6+0xc>
			pio_set(BOMBA6_PIO, BOMBA6_IDX_MASK);
  4031e6:	2120      	movs	r1, #32
  4031e8:	4630      	mov	r0, r6
  4031ea:	4c11      	ldr	r4, [pc, #68]	; (403230 <task_bomb6+0x6c>)
  4031ec:	47a0      	blx	r4
			pio_clear(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  4031ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4031f2:	4630      	mov	r0, r6
  4031f4:	4f0f      	ldr	r7, [pc, #60]	; (403234 <task_bomb6+0x70>)
  4031f6:	47b8      	blx	r7
			pio_clear(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  4031f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4031fc:	4640      	mov	r0, r8
  4031fe:	47b8      	blx	r7
			vTaskDelay(10000);
  403200:	f242 7010 	movw	r0, #10000	; 0x2710
  403204:	47a8      	blx	r5
			pio_clear(BOMBA6_PIO, BOMBA6_IDX_MASK);
  403206:	2120      	movs	r1, #32
  403208:	4630      	mov	r0, r6
  40320a:	47b8      	blx	r7
			pio_set(LED_VERMELHO_PIO, LED_VERMELHO_IDX_MASK);
  40320c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403210:	4640      	mov	r0, r8
  403212:	47a0      	blx	r4
			pio_set(LED_AZUL_PIO, LED_AZUL_IDX_MASK);
  403214:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403218:	4630      	mov	r0, r6
  40321a:	47a0      	blx	r4
  40321c:	e7d8      	b.n	4031d0 <task_bomb6+0xc>
  40321e:	bf00      	nop
  403220:	400e0e00 	.word	0x400e0e00
  403224:	00402385 	.word	0x00402385
  403228:	2040c49c 	.word	0x2040c49c
  40322c:	00401b5d 	.word	0x00401b5d
  403230:	00400719 	.word	0x00400719
  403234:	0040071d 	.word	0x0040071d
  403238:	400e1400 	.word	0x400e1400

0040323c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40323c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40323e:	b083      	sub	sp, #12
  403240:	4605      	mov	r5, r0
  403242:	460c      	mov	r4, r1
	uint32_t val = 0;
  403244:	2300      	movs	r3, #0
  403246:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403248:	4b2a      	ldr	r3, [pc, #168]	; (4032f4 <usart_serial_getchar+0xb8>)
  40324a:	4298      	cmp	r0, r3
  40324c:	d013      	beq.n	403276 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40324e:	4b2a      	ldr	r3, [pc, #168]	; (4032f8 <usart_serial_getchar+0xbc>)
  403250:	4298      	cmp	r0, r3
  403252:	d018      	beq.n	403286 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403254:	4b29      	ldr	r3, [pc, #164]	; (4032fc <usart_serial_getchar+0xc0>)
  403256:	4298      	cmp	r0, r3
  403258:	d01d      	beq.n	403296 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40325a:	4b29      	ldr	r3, [pc, #164]	; (403300 <usart_serial_getchar+0xc4>)
  40325c:	429d      	cmp	r5, r3
  40325e:	d022      	beq.n	4032a6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403260:	4b28      	ldr	r3, [pc, #160]	; (403304 <usart_serial_getchar+0xc8>)
  403262:	429d      	cmp	r5, r3
  403264:	d027      	beq.n	4032b6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403266:	4b28      	ldr	r3, [pc, #160]	; (403308 <usart_serial_getchar+0xcc>)
  403268:	429d      	cmp	r5, r3
  40326a:	d02e      	beq.n	4032ca <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40326c:	4b27      	ldr	r3, [pc, #156]	; (40330c <usart_serial_getchar+0xd0>)
  40326e:	429d      	cmp	r5, r3
  403270:	d035      	beq.n	4032de <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403272:	b003      	add	sp, #12
  403274:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403276:	461f      	mov	r7, r3
  403278:	4e25      	ldr	r6, [pc, #148]	; (403310 <usart_serial_getchar+0xd4>)
  40327a:	4621      	mov	r1, r4
  40327c:	4638      	mov	r0, r7
  40327e:	47b0      	blx	r6
  403280:	2800      	cmp	r0, #0
  403282:	d1fa      	bne.n	40327a <usart_serial_getchar+0x3e>
  403284:	e7e9      	b.n	40325a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403286:	461f      	mov	r7, r3
  403288:	4e21      	ldr	r6, [pc, #132]	; (403310 <usart_serial_getchar+0xd4>)
  40328a:	4621      	mov	r1, r4
  40328c:	4638      	mov	r0, r7
  40328e:	47b0      	blx	r6
  403290:	2800      	cmp	r0, #0
  403292:	d1fa      	bne.n	40328a <usart_serial_getchar+0x4e>
  403294:	e7e4      	b.n	403260 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403296:	461f      	mov	r7, r3
  403298:	4e1d      	ldr	r6, [pc, #116]	; (403310 <usart_serial_getchar+0xd4>)
  40329a:	4621      	mov	r1, r4
  40329c:	4638      	mov	r0, r7
  40329e:	47b0      	blx	r6
  4032a0:	2800      	cmp	r0, #0
  4032a2:	d1fa      	bne.n	40329a <usart_serial_getchar+0x5e>
  4032a4:	e7df      	b.n	403266 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4032a6:	461f      	mov	r7, r3
  4032a8:	4e19      	ldr	r6, [pc, #100]	; (403310 <usart_serial_getchar+0xd4>)
  4032aa:	4621      	mov	r1, r4
  4032ac:	4638      	mov	r0, r7
  4032ae:	47b0      	blx	r6
  4032b0:	2800      	cmp	r0, #0
  4032b2:	d1fa      	bne.n	4032aa <usart_serial_getchar+0x6e>
  4032b4:	e7da      	b.n	40326c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4032b6:	461e      	mov	r6, r3
  4032b8:	4d16      	ldr	r5, [pc, #88]	; (403314 <usart_serial_getchar+0xd8>)
  4032ba:	a901      	add	r1, sp, #4
  4032bc:	4630      	mov	r0, r6
  4032be:	47a8      	blx	r5
  4032c0:	2800      	cmp	r0, #0
  4032c2:	d1fa      	bne.n	4032ba <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4032c4:	9b01      	ldr	r3, [sp, #4]
  4032c6:	7023      	strb	r3, [r4, #0]
  4032c8:	e7d3      	b.n	403272 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4032ca:	461e      	mov	r6, r3
  4032cc:	4d11      	ldr	r5, [pc, #68]	; (403314 <usart_serial_getchar+0xd8>)
  4032ce:	a901      	add	r1, sp, #4
  4032d0:	4630      	mov	r0, r6
  4032d2:	47a8      	blx	r5
  4032d4:	2800      	cmp	r0, #0
  4032d6:	d1fa      	bne.n	4032ce <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4032d8:	9b01      	ldr	r3, [sp, #4]
  4032da:	7023      	strb	r3, [r4, #0]
  4032dc:	e7c9      	b.n	403272 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4032de:	461e      	mov	r6, r3
  4032e0:	4d0c      	ldr	r5, [pc, #48]	; (403314 <usart_serial_getchar+0xd8>)
  4032e2:	a901      	add	r1, sp, #4
  4032e4:	4630      	mov	r0, r6
  4032e6:	47a8      	blx	r5
  4032e8:	2800      	cmp	r0, #0
  4032ea:	d1fa      	bne.n	4032e2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4032ec:	9b01      	ldr	r3, [sp, #4]
  4032ee:	7023      	strb	r3, [r4, #0]
}
  4032f0:	e7bf      	b.n	403272 <usart_serial_getchar+0x36>
  4032f2:	bf00      	nop
  4032f4:	400e0800 	.word	0x400e0800
  4032f8:	400e0a00 	.word	0x400e0a00
  4032fc:	400e1a00 	.word	0x400e1a00
  403300:	400e1c00 	.word	0x400e1c00
  403304:	40024000 	.word	0x40024000
  403308:	40028000 	.word	0x40028000
  40330c:	4002c000 	.word	0x4002c000
  403310:	00400ca3 	.word	0x00400ca3
  403314:	00400daf 	.word	0x00400daf

00403318 <vApplicationStackOverflowHook>:
{
  403318:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40331a:	460a      	mov	r2, r1
  40331c:	4601      	mov	r1, r0
  40331e:	4802      	ldr	r0, [pc, #8]	; (403328 <vApplicationStackOverflowHook+0x10>)
  403320:	4b02      	ldr	r3, [pc, #8]	; (40332c <vApplicationStackOverflowHook+0x14>)
  403322:	4798      	blx	r3
  403324:	e7fe      	b.n	403324 <vApplicationStackOverflowHook+0xc>
  403326:	bf00      	nop
  403328:	00406a24 	.word	0x00406a24
  40332c:	00403a35 	.word	0x00403a35

00403330 <vApplicationTickHook>:
{
  403330:	4770      	bx	lr

00403332 <vApplicationMallocFailedHook>:
  403332:	f04f 0380 	mov.w	r3, #128	; 0x80
  403336:	b672      	cpsid	i
  403338:	f383 8811 	msr	BASEPRI, r3
  40333c:	f3bf 8f6f 	isb	sy
  403340:	f3bf 8f4f 	dsb	sy
  403344:	b662      	cpsie	i
  403346:	e7fe      	b.n	403346 <vApplicationMallocFailedHook+0x14>

00403348 <io_init>:
{
  403348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40334c:	b082      	sub	sp, #8
	pmc_enable_periph_clk(VALVE_PIO_ID);
  40334e:	200c      	movs	r0, #12
  403350:	4d74      	ldr	r5, [pc, #464]	; (403524 <io_init+0x1dc>)
  403352:	47a8      	blx	r5
	pio_configure(VALVE_PIO, PIO_OUTPUT_0, VALVE_IDX_MASK, PIO_DEFAULT);
  403354:	4f74      	ldr	r7, [pc, #464]	; (403528 <io_init+0x1e0>)
  403356:	2300      	movs	r3, #0
  403358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40335c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403360:	4638      	mov	r0, r7
  403362:	4c72      	ldr	r4, [pc, #456]	; (40352c <io_init+0x1e4>)
  403364:	47a0      	blx	r4
	pmc_enable_periph_clk(BOMBA_PIO_ID);
  403366:	2010      	movs	r0, #16
  403368:	47a8      	blx	r5
	pio_configure(BOMBA_PIO, PIO_OUTPUT_0, BOMBA_IDX_MASK, PIO_DEFAULT);
  40336a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 40355c <io_init+0x214>
  40336e:	2300      	movs	r3, #0
  403370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403374:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403378:	4640      	mov	r0, r8
  40337a:	47a0      	blx	r4
	pmc_enable_periph_clk(BOMBA3_PIO_ID);
  40337c:	200a      	movs	r0, #10
  40337e:	47a8      	blx	r5
	pio_configure(BOMBA3_PIO, PIO_OUTPUT_0, BOMBA3_IDX_MASK, PIO_DEFAULT);
  403380:	4e6b      	ldr	r6, [pc, #428]	; (403530 <io_init+0x1e8>)
  403382:	2300      	movs	r3, #0
  403384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  403388:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40338c:	4630      	mov	r0, r6
  40338e:	47a0      	blx	r4
	pmc_enable_periph_clk(BOMBA4_PIO_ID);
  403390:	200c      	movs	r0, #12
  403392:	47a8      	blx	r5
	pio_configure(BOMBA4_PIO, PIO_OUTPUT_0, BOMBA4_IDX_MASK, PIO_DEFAULT);
  403394:	2300      	movs	r3, #0
  403396:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40339a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40339e:	4638      	mov	r0, r7
  4033a0:	47a0      	blx	r4
	pmc_enable_periph_clk(BOMBA5_PIO_ID);
  4033a2:	2010      	movs	r0, #16
  4033a4:	47a8      	blx	r5
	pio_configure(BOMBA5_PIO, PIO_OUTPUT_0, BOMBA5_IDX_MASK, PIO_DEFAULT);
  4033a6:	2300      	movs	r3, #0
  4033a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4033ac:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033b0:	4640      	mov	r0, r8
  4033b2:	47a0      	blx	r4
	pmc_enable_periph_clk(BOMBA6_PIO_ID);
  4033b4:	200a      	movs	r0, #10
  4033b6:	47a8      	blx	r5
	pio_configure(BOMBA6_PIO, PIO_OUTPUT_0, BOMBA6_IDX_MASK, PIO_DEFAULT);
  4033b8:	2300      	movs	r3, #0
  4033ba:	2220      	movs	r2, #32
  4033bc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033c0:	4630      	mov	r0, r6
  4033c2:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_VERMELHO_PIO_ID);
  4033c4:	2010      	movs	r0, #16
  4033c6:	47a8      	blx	r5
	pio_configure(LED_VERMELHO_PIO, PIO_OUTPUT_1, LED_VERMELHO_IDX_MASK, PIO_DEFAULT);
  4033c8:	2300      	movs	r3, #0
  4033ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4033ce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4033d2:	4640      	mov	r0, r8
  4033d4:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_VERDE_PIO_ID);
  4033d6:	2010      	movs	r0, #16
  4033d8:	47a8      	blx	r5
	pio_configure(LED_VERDE_PIO, PIO_OUTPUT_1,LED_VERDE_IDX_MASK, PIO_DEFAULT);
  4033da:	2300      	movs	r3, #0
  4033dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4033e0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4033e4:	4640      	mov	r0, r8
  4033e6:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_AZUL_PIO_ID);
  4033e8:	200a      	movs	r0, #10
  4033ea:	47a8      	blx	r5
	pio_configure(LED_AZUL_PIO, PIO_OUTPUT_1, LED_AZUL_IDX_MASK, PIO_DEFAULT);
  4033ec:	2300      	movs	r3, #0
  4033ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4033f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4033f6:	4630      	mov	r0, r6
  4033f8:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_PIO_ID);
  4033fa:	200a      	movs	r0, #10
  4033fc:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_VERDE_PIO_ID);
  4033fe:	200c      	movs	r0, #12
  403400:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_VERMELHO_PIO_ID);
  403402:	200b      	movs	r0, #11
  403404:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_BRANCO_PIO_ID);
  403406:	200b      	movs	r0, #11
  403408:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_AMARELO_PIO_ID);
  40340a:	200c      	movs	r0, #12
  40340c:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_PRETO_PIO_ID);
  40340e:	200a      	movs	r0, #10
  403410:	47a8      	blx	r5
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE );
  403412:	2309      	movs	r3, #9
  403414:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403418:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40341c:	4630      	mov	r0, r6
  40341e:	47a0      	blx	r4
	pio_configure(BUT_VERDE_PIO, PIO_INPUT, BUT_VERDE_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE );
  403420:	2309      	movs	r3, #9
  403422:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403426:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40342a:	4638      	mov	r0, r7
  40342c:	47a0      	blx	r4
	pio_configure(BUT_VERMELHO_PIO, PIO_INPUT, BUT_VERMELHO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE );
  40342e:	4d41      	ldr	r5, [pc, #260]	; (403534 <io_init+0x1ec>)
  403430:	2309      	movs	r3, #9
  403432:	2204      	movs	r2, #4
  403434:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403438:	4628      	mov	r0, r5
  40343a:	47a0      	blx	r4
	pio_configure(BUT_BRANCO_PIO, PIO_INPUT, BUT_BRANCO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE );
  40343c:	2309      	movs	r3, #9
  40343e:	2208      	movs	r2, #8
  403440:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403444:	4628      	mov	r0, r5
  403446:	47a0      	blx	r4
	pio_configure(BUT_AMARELO_PIO, PIO_INPUT, BUT_AMARELO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE );
  403448:	2309      	movs	r3, #9
  40344a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40344e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403452:	4638      	mov	r0, r7
  403454:	47a0      	blx	r4
	pio_configure(BUT_PRETO_PIO, PIO_INPUT, BUT_PRETO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE );
  403456:	2309      	movs	r3, #9
  403458:	2201      	movs	r2, #1
  40345a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40345e:	4630      	mov	r0, r6
  403460:	47a0      	blx	r4
	pio_handler_set(BUT_PIO,
  403462:	4b35      	ldr	r3, [pc, #212]	; (403538 <io_init+0x1f0>)
  403464:	9300      	str	r3, [sp, #0]
  403466:	2370      	movs	r3, #112	; 0x70
  403468:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40346c:	210a      	movs	r1, #10
  40346e:	4630      	mov	r0, r6
  403470:	4c32      	ldr	r4, [pc, #200]	; (40353c <io_init+0x1f4>)
  403472:	47a0      	blx	r4
	pio_handler_set(BUT_VERDE_PIO,
  403474:	4b32      	ldr	r3, [pc, #200]	; (403540 <io_init+0x1f8>)
  403476:	9300      	str	r3, [sp, #0]
  403478:	2370      	movs	r3, #112	; 0x70
  40347a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40347e:	210c      	movs	r1, #12
  403480:	4638      	mov	r0, r7
  403482:	47a0      	blx	r4
	pio_handler_set(BUT_VERMELHO_PIO,
  403484:	4b2f      	ldr	r3, [pc, #188]	; (403544 <io_init+0x1fc>)
  403486:	9300      	str	r3, [sp, #0]
  403488:	2370      	movs	r3, #112	; 0x70
  40348a:	2204      	movs	r2, #4
  40348c:	210b      	movs	r1, #11
  40348e:	4628      	mov	r0, r5
  403490:	47a0      	blx	r4
	pio_handler_set(BUT_BRANCO_PIO,
  403492:	4b2d      	ldr	r3, [pc, #180]	; (403548 <io_init+0x200>)
  403494:	9300      	str	r3, [sp, #0]
  403496:	2370      	movs	r3, #112	; 0x70
  403498:	2208      	movs	r2, #8
  40349a:	210b      	movs	r1, #11
  40349c:	4628      	mov	r0, r5
  40349e:	47a0      	blx	r4
	pio_handler_set(BUT_AMARELO_PIO,
  4034a0:	4b2a      	ldr	r3, [pc, #168]	; (40354c <io_init+0x204>)
  4034a2:	9300      	str	r3, [sp, #0]
  4034a4:	2370      	movs	r3, #112	; 0x70
  4034a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4034aa:	210c      	movs	r1, #12
  4034ac:	4638      	mov	r0, r7
  4034ae:	47a0      	blx	r4
	pio_handler_set(BUT_PRETO_PIO,
  4034b0:	4b27      	ldr	r3, [pc, #156]	; (403550 <io_init+0x208>)
  4034b2:	9300      	str	r3, [sp, #0]
  4034b4:	2370      	movs	r3, #112	; 0x70
  4034b6:	2201      	movs	r2, #1
  4034b8:	210a      	movs	r1, #10
  4034ba:	4630      	mov	r0, r6
  4034bc:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034be:	4b25      	ldr	r3, [pc, #148]	; (403554 <io_init+0x20c>)
  4034c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4034c4:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034c6:	22a0      	movs	r2, #160	; 0xa0
  4034c8:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4034d0:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034d2:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034d6:	f44f 6400 	mov.w	r4, #2048	; 0x800
  4034da:	601c      	str	r4, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034dc:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034e0:	601c      	str	r4, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034e2:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034e6:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034e8:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034ec:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034ee:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	pio_enable_interrupt(BUT_PIO, BUT_IDX_MASK);
  4034f2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4034f6:	4630      	mov	r0, r6
  4034f8:	4c17      	ldr	r4, [pc, #92]	; (403558 <io_init+0x210>)
  4034fa:	47a0      	blx	r4
	pio_enable_interrupt(BUT_VERDE_PIO, BUT_VERDE_IDX_MASK);
  4034fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403500:	4638      	mov	r0, r7
  403502:	47a0      	blx	r4
	pio_enable_interrupt(BUT_VERMELHO_PIO, BUT_VERMELHO_IDX_MASK);
  403504:	2104      	movs	r1, #4
  403506:	4628      	mov	r0, r5
  403508:	47a0      	blx	r4
	pio_enable_interrupt(BUT_BRANCO_PIO, BUT_BRANCO_IDX_MASK);
  40350a:	2108      	movs	r1, #8
  40350c:	4628      	mov	r0, r5
  40350e:	47a0      	blx	r4
	pio_enable_interrupt(BUT_AMARELO_PIO, BUT_AMARELO_IDX_MASK);
  403510:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403514:	4638      	mov	r0, r7
  403516:	47a0      	blx	r4
	pio_enable_interrupt(BUT_PRETO_PIO, BUT_PRETO_IDX_MASK);
  403518:	2101      	movs	r1, #1
  40351a:	4630      	mov	r0, r6
  40351c:	47a0      	blx	r4
}
  40351e:	b002      	add	sp, #8
  403520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403524:	00400c71 	.word	0x00400c71
  403528:	400e1200 	.word	0x400e1200
  40352c:	00400811 	.word	0x00400811
  403530:	400e0e00 	.word	0x400e0e00
  403534:	400e1000 	.word	0x400e1000
  403538:	00402de5 	.word	0x00402de5
  40353c:	00400a7d 	.word	0x00400a7d
  403540:	00402e09 	.word	0x00402e09
  403544:	00402e2d 	.word	0x00402e2d
  403548:	00402e51 	.word	0x00402e51
  40354c:	00402e75 	.word	0x00402e75
  403550:	00402e99 	.word	0x00402e99
  403554:	e000e100 	.word	0xe000e100
  403558:	004008d3 	.word	0x004008d3
  40355c:	400e1400 	.word	0x400e1400

00403560 <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  403560:	b538      	push	{r3, r4, r5, lr}
  403562:	4605      	mov	r5, r0
  403564:	460c      	mov	r4, r1
  usart_serial_write_packet(usart, str, strlen(str));
  403566:	4608      	mov	r0, r1
  403568:	4b03      	ldr	r3, [pc, #12]	; (403578 <usart_put_string+0x18>)
  40356a:	4798      	blx	r3
  40356c:	4602      	mov	r2, r0
  40356e:	4621      	mov	r1, r4
  403570:	4628      	mov	r0, r5
  403572:	4b02      	ldr	r3, [pc, #8]	; (40357c <usart_put_string+0x1c>)
  403574:	4798      	blx	r3
  403576:	bd38      	pop	{r3, r4, r5, pc}
  403578:	00404381 	.word	0x00404381
  40357c:	00400249 	.word	0x00400249

00403580 <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  403580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403584:	b082      	sub	sp, #8
  403586:	4689      	mov	r9, r1
  while( (timecounter > 0) && (counter < bufferlen - 1)) {
  403588:	b1c3      	cbz	r3, 4035bc <usart_get_string+0x3c>
  40358a:	4680      	mov	r8, r0
  40358c:	461d      	mov	r5, r3
  40358e:	1e56      	subs	r6, r2, #1
  403590:	d01c      	beq.n	4035cc <usart_get_string+0x4c>
  403592:	2400      	movs	r4, #0
    if(usart_read(usart, &rx) == 0) {
  403594:	4f0e      	ldr	r7, [pc, #56]	; (4035d0 <usart_get_string+0x50>)
      vTaskDelay(1);
  403596:	f8df a03c 	ldr.w	sl, [pc, #60]	; 4035d4 <usart_get_string+0x54>
  40359a:	e005      	b.n	4035a8 <usart_get_string+0x28>
      timecounter--;
  40359c:	3d01      	subs	r5, #1
      vTaskDelay(1);
  40359e:	2001      	movs	r0, #1
  4035a0:	47d0      	blx	sl
  while( (timecounter > 0) && (counter < bufferlen - 1)) {
  4035a2:	b165      	cbz	r5, 4035be <usart_get_string+0x3e>
  4035a4:	42b4      	cmp	r4, r6
  4035a6:	d20a      	bcs.n	4035be <usart_get_string+0x3e>
    if(usart_read(usart, &rx) == 0) {
  4035a8:	a901      	add	r1, sp, #4
  4035aa:	4640      	mov	r0, r8
  4035ac:	47b8      	blx	r7
  4035ae:	2800      	cmp	r0, #0
  4035b0:	d1f4      	bne.n	40359c <usart_get_string+0x1c>
      buffer[counter++] = rx;
  4035b2:	9b01      	ldr	r3, [sp, #4]
  4035b4:	f809 3004 	strb.w	r3, [r9, r4]
  4035b8:	3401      	adds	r4, #1
  4035ba:	e7f2      	b.n	4035a2 <usart_get_string+0x22>
  uint32_t counter = 0;
  4035bc:	2400      	movs	r4, #0
  buffer[counter] = 0x00;
  4035be:	2300      	movs	r3, #0
  4035c0:	f809 3004 	strb.w	r3, [r9, r4]
}
  4035c4:	4620      	mov	r0, r4
  4035c6:	b002      	add	sp, #8
  4035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t counter = 0;
  4035cc:	4634      	mov	r4, r6
  4035ce:	e7f6      	b.n	4035be <usart_get_string+0x3e>
  4035d0:	00400daf 	.word	0x00400daf
  4035d4:	00402385 	.word	0x00402385

004035d8 <usart_send_command>:
void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  4035d8:	b570      	push	{r4, r5, r6, lr}
  4035da:	4604      	mov	r4, r0
  4035dc:	460d      	mov	r5, r1
  4035de:	4616      	mov	r6, r2
  usart_put_string(usart, buffer_tx);
  4035e0:	4619      	mov	r1, r3
  4035e2:	4b04      	ldr	r3, [pc, #16]	; (4035f4 <usart_send_command+0x1c>)
  4035e4:	4798      	blx	r3
  usart_get_string(usart, buffer_rx, bufferlen, timeout);
  4035e6:	9b04      	ldr	r3, [sp, #16]
  4035e8:	4632      	mov	r2, r6
  4035ea:	4629      	mov	r1, r5
  4035ec:	4620      	mov	r0, r4
  4035ee:	4c02      	ldr	r4, [pc, #8]	; (4035f8 <usart_send_command+0x20>)
  4035f0:	47a0      	blx	r4
  4035f2:	bd70      	pop	{r4, r5, r6, pc}
  4035f4:	00403561 	.word	0x00403561
  4035f8:	00403581 	.word	0x00403581

004035fc <hc05_config_server>:
void hc05_config_server(void) {
  4035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035fe:	b087      	sub	sp, #28
  403600:	200d      	movs	r0, #13
  403602:	4c17      	ldr	r4, [pc, #92]	; (403660 <hc05_config_server+0x64>)
  403604:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  403606:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  40360a:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40360c:	23c0      	movs	r3, #192	; 0xc0
  40360e:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403610:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403614:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  403616:	2500      	movs	r5, #0
  403618:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40361a:	9504      	str	r5, [sp, #16]
  40361c:	200d      	movs	r0, #13
  40361e:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  403620:	4c10      	ldr	r4, [pc, #64]	; (403664 <hc05_config_server+0x68>)
  403622:	4a11      	ldr	r2, [pc, #68]	; (403668 <hc05_config_server+0x6c>)
  403624:	4669      	mov	r1, sp
  403626:	4620      	mov	r0, r4
  403628:	4b10      	ldr	r3, [pc, #64]	; (40366c <hc05_config_server+0x70>)
  40362a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40362c:	4620      	mov	r0, r4
  40362e:	4f10      	ldr	r7, [pc, #64]	; (403670 <hc05_config_server+0x74>)
  403630:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  403632:	4620      	mov	r0, r4
  403634:	4e0f      	ldr	r6, [pc, #60]	; (403674 <hc05_config_server+0x78>)
  403636:	47b0      	blx	r6
  usart_enable_tx(USART_COM);
  403638:	4620      	mov	r0, r4
  40363a:	47b8      	blx	r7
  usart_enable_rx(USART_COM);
  40363c:	4620      	mov	r0, r4
  40363e:	47b0      	blx	r6
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  403640:	4e0d      	ldr	r6, [pc, #52]	; (403678 <hc05_config_server+0x7c>)
  403642:	462b      	mov	r3, r5
  403644:	2201      	movs	r2, #1
  403646:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40364a:	4630      	mov	r0, r6
  40364c:	4c0b      	ldr	r4, [pc, #44]	; (40367c <hc05_config_server+0x80>)
  40364e:	47a0      	blx	r4
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  403650:	462b      	mov	r3, r5
  403652:	2202      	movs	r2, #2
  403654:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403658:	4630      	mov	r0, r6
  40365a:	47a0      	blx	r4
}
  40365c:	b007      	add	sp, #28
  40365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403660:	00400c71 	.word	0x00400c71
  403664:	40024000 	.word	0x40024000
  403668:	08f0d180 	.word	0x08f0d180
  40366c:	00400d39 	.word	0x00400d39
  403670:	00400d8d 	.word	0x00400d8d
  403674:	00400d93 	.word	0x00400d93
  403678:	400e1000 	.word	0x400e1000
  40367c:	00400811 	.word	0x00400811

00403680 <hc05_server_init>:
int hc05_server_init(void) {
  403680:	b5f0      	push	{r4, r5, r6, r7, lr}
  403682:	b0a3      	sub	sp, #140	; 0x8c
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf("AT\n");
  403684:	4f16      	ldr	r7, [pc, #88]	; (4036e0 <hc05_server_init+0x60>)
  403686:	4d17      	ldr	r5, [pc, #92]	; (4036e4 <hc05_server_init+0x64>)
  403688:	2664      	movs	r6, #100	; 0x64
  40368a:	9600      	str	r6, [sp, #0]
  40368c:	463b      	mov	r3, r7
  40368e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403692:	a902      	add	r1, sp, #8
  403694:	4628      	mov	r0, r5
  403696:	4c14      	ldr	r4, [pc, #80]	; (4036e8 <hc05_server_init+0x68>)
  403698:	47a0      	blx	r4
  40369a:	4814      	ldr	r0, [pc, #80]	; (4036ec <hc05_server_init+0x6c>)
  40369c:	4b14      	ldr	r3, [pc, #80]	; (4036f0 <hc05_server_init+0x70>)
  40369e:	4798      	blx	r3
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100);
  4036a0:	9600      	str	r6, [sp, #0]
  4036a2:	463b      	mov	r3, r7
  4036a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4036a8:	a902      	add	r1, sp, #8
  4036aa:	4628      	mov	r0, r5
  4036ac:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+NAMEBarInABox", 400);
  4036ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4036b2:	9300      	str	r3, [sp, #0]
  4036b4:	4b0f      	ldr	r3, [pc, #60]	; (4036f4 <hc05_server_init+0x74>)
  4036b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4036ba:	a902      	add	r1, sp, #8
  4036bc:	4628      	mov	r0, r5
  4036be:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100);
  4036c0:	9600      	str	r6, [sp, #0]
  4036c2:	463b      	mov	r3, r7
  4036c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4036c8:	a902      	add	r1, sp, #8
  4036ca:	4628      	mov	r0, r5
  4036cc:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+PIN0000", 100);
  4036ce:	9600      	str	r6, [sp, #0]
  4036d0:	4b09      	ldr	r3, [pc, #36]	; (4036f8 <hc05_server_init+0x78>)
  4036d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4036d6:	a902      	add	r1, sp, #8
  4036d8:	4628      	mov	r0, r5
  4036da:	47a0      	blx	r4
}
  4036dc:	b023      	add	sp, #140	; 0x8c
  4036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036e0:	00406970 	.word	0x00406970
  4036e4:	40024000 	.word	0x40024000
  4036e8:	004035d9 	.word	0x004035d9
  4036ec:	00406974 	.word	0x00406974
  4036f0:	00403a35 	.word	0x00403a35
  4036f4:	00406978 	.word	0x00406978
  4036f8:	0040698c 	.word	0x0040698c

004036fc <task_bluetooth>:
void task_bluetooth(void){
  4036fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403700:	b084      	sub	sp, #16
  printf("Bluetooth initializing \n");
  403702:	4814      	ldr	r0, [pc, #80]	; (403754 <task_bluetooth+0x58>)
  403704:	4b14      	ldr	r3, [pc, #80]	; (403758 <task_bluetooth+0x5c>)
  403706:	4798      	blx	r3
  hc05_config_server();
  403708:	4b14      	ldr	r3, [pc, #80]	; (40375c <task_bluetooth+0x60>)
  40370a:	4798      	blx	r3
  hc05_server_init();
  40370c:	4b14      	ldr	r3, [pc, #80]	; (403760 <task_bluetooth+0x64>)
  40370e:	4798      	blx	r3
	usart_get_string(USART1, bluetoothBuffer, 1024, 1000);
  403710:	f8df 8064 	ldr.w	r8, [pc, #100]	; 403778 <task_bluetooth+0x7c>
  403714:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  403718:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40371c:	e003      	b.n	403726 <task_bluetooth+0x2a>
    vTaskDelay( 500 / portTICK_PERIOD_MS);
  40371e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403722:	4b10      	ldr	r3, [pc, #64]	; (403764 <task_bluetooth+0x68>)
  403724:	4798      	blx	r3
	usart_get_string(USART1, bluetoothBuffer, 1024, 1000);
  403726:	463b      	mov	r3, r7
  403728:	4632      	mov	r2, r6
  40372a:	a901      	add	r1, sp, #4
  40372c:	4640      	mov	r0, r8
  40372e:	4c0e      	ldr	r4, [pc, #56]	; (403768 <task_bluetooth+0x6c>)
  403730:	47a0      	blx	r4
	usart_put_string(USART0, bluetoothBuffer);
  403732:	4d0e      	ldr	r5, [pc, #56]	; (40376c <task_bluetooth+0x70>)
  403734:	a901      	add	r1, sp, #4
  403736:	4628      	mov	r0, r5
  403738:	4b0d      	ldr	r3, [pc, #52]	; (403770 <task_bluetooth+0x74>)
  40373a:	4798      	blx	r3
	bluetoothString = usart_get_string(USART0, bluetoothBuffer, 1024, 1000);
  40373c:	463b      	mov	r3, r7
  40373e:	4632      	mov	r2, r6
  403740:	a901      	add	r1, sp, #4
  403742:	4628      	mov	r0, r5
  403744:	47a0      	blx	r4
	if(bluetoothString > 0){
  403746:	2800      	cmp	r0, #0
  403748:	d0e9      	beq.n	40371e <task_bluetooth+0x22>
		usart_put_string(USART0, "PAGAMENTO REALIZADO\n");
  40374a:	490a      	ldr	r1, [pc, #40]	; (403774 <task_bluetooth+0x78>)
  40374c:	4628      	mov	r0, r5
  40374e:	4b08      	ldr	r3, [pc, #32]	; (403770 <task_bluetooth+0x74>)
  403750:	4798      	blx	r3
  403752:	e7e4      	b.n	40371e <task_bluetooth+0x22>
  403754:	004069f0 	.word	0x004069f0
  403758:	00403a35 	.word	0x00403a35
  40375c:	004035fd 	.word	0x004035fd
  403760:	00403681 	.word	0x00403681
  403764:	00402385 	.word	0x00402385
  403768:	00403581 	.word	0x00403581
  40376c:	40024000 	.word	0x40024000
  403770:	00403561 	.word	0x00403561
  403774:	00406a0c 	.word	0x00406a0c
  403778:	40028000 	.word	0x40028000

0040377c <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void){
  40377c:	b500      	push	{lr}
  40377e:	b08b      	sub	sp, #44	; 0x2c
		.paritytype   = CONF_UART_PARITY,
		.stopbits     = CONF_UART_STOP_BITS
	};*/
	
	/* Initialize the SAM system */
	sysclk_init();
  403780:	4b6b      	ldr	r3, [pc, #428]	; (403930 <main+0x1b4>)
  403782:	4798      	blx	r3
	board_init();
  403784:	4b6b      	ldr	r3, [pc, #428]	; (403934 <main+0x1b8>)
  403786:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  403788:	4b6b      	ldr	r3, [pc, #428]	; (403938 <main+0x1bc>)
  40378a:	4a6c      	ldr	r2, [pc, #432]	; (40393c <main+0x1c0>)
  40378c:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40378e:	21e0      	movs	r1, #224	; 0xe0
  403790:	4a6b      	ldr	r2, [pc, #428]	; (403940 <main+0x1c4>)
  403792:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  403796:	2400      	movs	r4, #0
  403798:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40379a:	2207      	movs	r2, #7
  40379c:	601a      	str	r2, [r3, #0]
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40379e:	4d69      	ldr	r5, [pc, #420]	; (403944 <main+0x1c8>)
  4037a0:	4b69      	ldr	r3, [pc, #420]	; (403948 <main+0x1cc>)
  4037a2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4037a4:	4a69      	ldr	r2, [pc, #420]	; (40394c <main+0x1d0>)
  4037a6:	4b6a      	ldr	r3, [pc, #424]	; (403950 <main+0x1d4>)
  4037a8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4037aa:	4a6a      	ldr	r2, [pc, #424]	; (403954 <main+0x1d8>)
  4037ac:	4b6a      	ldr	r3, [pc, #424]	; (403958 <main+0x1dc>)
  4037ae:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4037b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4037b4:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4037b6:	9405      	str	r4, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4037b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4037bc:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4037be:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4037c0:	9408      	str	r4, [sp, #32]
  4037c2:	200e      	movs	r0, #14
  4037c4:	4b65      	ldr	r3, [pc, #404]	; (40395c <main+0x1e0>)
  4037c6:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4037c8:	4a65      	ldr	r2, [pc, #404]	; (403960 <main+0x1e4>)
  4037ca:	a904      	add	r1, sp, #16
  4037cc:	4628      	mov	r0, r5
  4037ce:	4b65      	ldr	r3, [pc, #404]	; (403964 <main+0x1e8>)
  4037d0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4037d2:	4628      	mov	r0, r5
  4037d4:	4b64      	ldr	r3, [pc, #400]	; (403968 <main+0x1ec>)
  4037d6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4037d8:	4628      	mov	r0, r5
  4037da:	4b64      	ldr	r3, [pc, #400]	; (40396c <main+0x1f0>)
  4037dc:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4037de:	4e64      	ldr	r6, [pc, #400]	; (403970 <main+0x1f4>)
  4037e0:	6833      	ldr	r3, [r6, #0]
  4037e2:	4621      	mov	r1, r4
  4037e4:	6898      	ldr	r0, [r3, #8]
  4037e6:	4d63      	ldr	r5, [pc, #396]	; (403974 <main+0x1f8>)
  4037e8:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4037ea:	6833      	ldr	r3, [r6, #0]
  4037ec:	4621      	mov	r1, r4
  4037ee:	6858      	ldr	r0, [r3, #4]
  4037f0:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4037f2:	6833      	ldr	r3, [r6, #0]
  4037f4:	4621      	mov	r1, r4
  4037f6:	6898      	ldr	r0, [r3, #8]
  4037f8:	47a8      	blx	r5
	configure_console();
	
	/* Initialize stdio on USART */
	/*stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);*/
	
	xSemaphoreB1 = xSemaphoreCreateBinary();
  4037fa:	2203      	movs	r2, #3
  4037fc:	4621      	mov	r1, r4
  4037fe:	2001      	movs	r0, #1
  403800:	4d5d      	ldr	r5, [pc, #372]	; (403978 <main+0x1fc>)
  403802:	47a8      	blx	r5
  403804:	4b5d      	ldr	r3, [pc, #372]	; (40397c <main+0x200>)
  403806:	6018      	str	r0, [r3, #0]
	xSemaphoreB2 = xSemaphoreCreateBinary();
  403808:	2203      	movs	r2, #3
  40380a:	4621      	mov	r1, r4
  40380c:	2001      	movs	r0, #1
  40380e:	47a8      	blx	r5
  403810:	4b5b      	ldr	r3, [pc, #364]	; (403980 <main+0x204>)
  403812:	6018      	str	r0, [r3, #0]
	xSemaphoreB3 = xSemaphoreCreateBinary();
  403814:	2203      	movs	r2, #3
  403816:	4621      	mov	r1, r4
  403818:	2001      	movs	r0, #1
  40381a:	47a8      	blx	r5
  40381c:	4b59      	ldr	r3, [pc, #356]	; (403984 <main+0x208>)
  40381e:	6018      	str	r0, [r3, #0]
	xSemaphoreB4 = xSemaphoreCreateBinary();
  403820:	2203      	movs	r2, #3
  403822:	4621      	mov	r1, r4
  403824:	2001      	movs	r0, #1
  403826:	47a8      	blx	r5
  403828:	4b57      	ldr	r3, [pc, #348]	; (403988 <main+0x20c>)
  40382a:	6018      	str	r0, [r3, #0]
	xSemaphoreB5 = xSemaphoreCreateBinary();
  40382c:	2203      	movs	r2, #3
  40382e:	4621      	mov	r1, r4
  403830:	2001      	movs	r0, #1
  403832:	47a8      	blx	r5
  403834:	4b55      	ldr	r3, [pc, #340]	; (40398c <main+0x210>)
  403836:	6018      	str	r0, [r3, #0]
	xSemaphoreB6 = xSemaphoreCreateBinary();
  403838:	2203      	movs	r2, #3
  40383a:	4621      	mov	r1, r4
  40383c:	2001      	movs	r0, #1
  40383e:	47a8      	blx	r5
  403840:	4b53      	ldr	r3, [pc, #332]	; (403990 <main+0x214>)
  403842:	6018      	str	r0, [r3, #0]
	xSemaphoreBluetooth = xSemaphoreCreateBinary();
  403844:	2203      	movs	r2, #3
  403846:	4621      	mov	r1, r4
  403848:	2001      	movs	r0, #1
  40384a:	47a8      	blx	r5
  40384c:	4b51      	ldr	r3, [pc, #324]	; (403994 <main+0x218>)
  40384e:	6018      	str	r0, [r3, #0]
	
	io_init();
  403850:	4b51      	ldr	r3, [pc, #324]	; (403998 <main+0x21c>)
  403852:	4798      	blx	r3
	
	/* Create task to handler touch */
	if (xTaskCreate(task_bomb1, "Bomb 1", TASK_BOMB1_STACK_SIZE, NULL, TASK_BOMB1_STACK_PRIORITY, NULL) != pdPASS) {
  403854:	9403      	str	r4, [sp, #12]
  403856:	9402      	str	r4, [sp, #8]
  403858:	9401      	str	r4, [sp, #4]
  40385a:	9400      	str	r4, [sp, #0]
  40385c:	4623      	mov	r3, r4
  40385e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403862:	494e      	ldr	r1, [pc, #312]	; (40399c <main+0x220>)
  403864:	484e      	ldr	r0, [pc, #312]	; (4039a0 <main+0x224>)
  403866:	4c4f      	ldr	r4, [pc, #316]	; (4039a4 <main+0x228>)
  403868:	47a0      	blx	r4
  40386a:	2801      	cmp	r0, #1
  40386c:	d002      	beq.n	403874 <main+0xf8>
		printf("Failed to create test BOMB 1 task\r\n");
  40386e:	484e      	ldr	r0, [pc, #312]	; (4039a8 <main+0x22c>)
  403870:	4b4e      	ldr	r3, [pc, #312]	; (4039ac <main+0x230>)
  403872:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_bomb2, "Bomb 2", TASK_BOMB2_STACK_SIZE, NULL, TASK_BOMB2_STACK_PRIORITY, NULL) != pdPASS) {
  403874:	2300      	movs	r3, #0
  403876:	9303      	str	r3, [sp, #12]
  403878:	9302      	str	r3, [sp, #8]
  40387a:	9301      	str	r3, [sp, #4]
  40387c:	9300      	str	r3, [sp, #0]
  40387e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403882:	494b      	ldr	r1, [pc, #300]	; (4039b0 <main+0x234>)
  403884:	484b      	ldr	r0, [pc, #300]	; (4039b4 <main+0x238>)
  403886:	4c47      	ldr	r4, [pc, #284]	; (4039a4 <main+0x228>)
  403888:	47a0      	blx	r4
  40388a:	2801      	cmp	r0, #1
  40388c:	d002      	beq.n	403894 <main+0x118>
		printf("Failed to create test BOMB 1 task\r\n");
  40388e:	4846      	ldr	r0, [pc, #280]	; (4039a8 <main+0x22c>)
  403890:	4b46      	ldr	r3, [pc, #280]	; (4039ac <main+0x230>)
  403892:	4798      	blx	r3
	}
	
 	if (xTaskCreate(task_bomb3, "Bomb 3", TASK_BOMB3_STACK_SIZE, NULL, TASK_BOMB3_STACK_PRIORITY, NULL) != pdPASS) {
  403894:	2300      	movs	r3, #0
  403896:	9303      	str	r3, [sp, #12]
  403898:	9302      	str	r3, [sp, #8]
  40389a:	9301      	str	r3, [sp, #4]
  40389c:	9300      	str	r3, [sp, #0]
  40389e:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038a2:	4945      	ldr	r1, [pc, #276]	; (4039b8 <main+0x23c>)
  4038a4:	4845      	ldr	r0, [pc, #276]	; (4039bc <main+0x240>)
  4038a6:	4c3f      	ldr	r4, [pc, #252]	; (4039a4 <main+0x228>)
  4038a8:	47a0      	blx	r4
  4038aa:	2801      	cmp	r0, #1
  4038ac:	d002      	beq.n	4038b4 <main+0x138>
 		printf("Failed to create test BOMB 1 task\r\n");
  4038ae:	483e      	ldr	r0, [pc, #248]	; (4039a8 <main+0x22c>)
  4038b0:	4b3e      	ldr	r3, [pc, #248]	; (4039ac <main+0x230>)
  4038b2:	4798      	blx	r3
 	}
 	
 	if (xTaskCreate(task_bomb4, "Bomb 4", TASK_BOMB4_STACK_SIZE, NULL, TASK_BOMB4_STACK_PRIORITY, NULL) != pdPASS) {
  4038b4:	2300      	movs	r3, #0
  4038b6:	9303      	str	r3, [sp, #12]
  4038b8:	9302      	str	r3, [sp, #8]
  4038ba:	9301      	str	r3, [sp, #4]
  4038bc:	9300      	str	r3, [sp, #0]
  4038be:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038c2:	493f      	ldr	r1, [pc, #252]	; (4039c0 <main+0x244>)
  4038c4:	483f      	ldr	r0, [pc, #252]	; (4039c4 <main+0x248>)
  4038c6:	4c37      	ldr	r4, [pc, #220]	; (4039a4 <main+0x228>)
  4038c8:	47a0      	blx	r4
  4038ca:	2801      	cmp	r0, #1
  4038cc:	d002      	beq.n	4038d4 <main+0x158>
 		printf("Failed to create test BOMB 1 task\r\n");
  4038ce:	4836      	ldr	r0, [pc, #216]	; (4039a8 <main+0x22c>)
  4038d0:	4b36      	ldr	r3, [pc, #216]	; (4039ac <main+0x230>)
  4038d2:	4798      	blx	r3
 	}
 	
 	if (xTaskCreate(task_bomb5, "Bomb 5", TASK_BOMB5_STACK_SIZE, NULL, TASK_BOMB5_STACK_PRIORITY, NULL) != pdPASS) {
  4038d4:	2300      	movs	r3, #0
  4038d6:	9303      	str	r3, [sp, #12]
  4038d8:	9302      	str	r3, [sp, #8]
  4038da:	9301      	str	r3, [sp, #4]
  4038dc:	9300      	str	r3, [sp, #0]
  4038de:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038e2:	4939      	ldr	r1, [pc, #228]	; (4039c8 <main+0x24c>)
  4038e4:	4839      	ldr	r0, [pc, #228]	; (4039cc <main+0x250>)
  4038e6:	4c2f      	ldr	r4, [pc, #188]	; (4039a4 <main+0x228>)
  4038e8:	47a0      	blx	r4
  4038ea:	2801      	cmp	r0, #1
  4038ec:	d002      	beq.n	4038f4 <main+0x178>
 		printf("Failed to create test BOMB 1 task\r\n");
  4038ee:	482e      	ldr	r0, [pc, #184]	; (4039a8 <main+0x22c>)
  4038f0:	4b2e      	ldr	r3, [pc, #184]	; (4039ac <main+0x230>)
  4038f2:	4798      	blx	r3
 	}
 	
 	if (xTaskCreate(task_bomb6, "Bomb 6", TASK_BOMB6_STACK_SIZE, NULL, TASK_BOMB6_STACK_PRIORITY, NULL) != pdPASS) {
  4038f4:	2300      	movs	r3, #0
  4038f6:	9303      	str	r3, [sp, #12]
  4038f8:	9302      	str	r3, [sp, #8]
  4038fa:	9301      	str	r3, [sp, #4]
  4038fc:	9300      	str	r3, [sp, #0]
  4038fe:	f44f 7280 	mov.w	r2, #256	; 0x100
  403902:	4933      	ldr	r1, [pc, #204]	; (4039d0 <main+0x254>)
  403904:	4833      	ldr	r0, [pc, #204]	; (4039d4 <main+0x258>)
  403906:	4c27      	ldr	r4, [pc, #156]	; (4039a4 <main+0x228>)
  403908:	47a0      	blx	r4
  40390a:	2801      	cmp	r0, #1
  40390c:	d002      	beq.n	403914 <main+0x198>
 		printf("Failed to create test BOMB 1 task\r\n");
  40390e:	4826      	ldr	r0, [pc, #152]	; (4039a8 <main+0x22c>)
  403910:	4b26      	ldr	r3, [pc, #152]	; (4039ac <main+0x230>)
  403912:	4798      	blx	r3
 	}
 	
 	xTaskCreate(task_bluetooth, "BLT", TASK_BLUETOOTH_STACK_SIZE, NULL,	TASK_BLUETOOTH_STACK_PRIORITY, NULL);
  403914:	2300      	movs	r3, #0
  403916:	9303      	str	r3, [sp, #12]
  403918:	9302      	str	r3, [sp, #8]
  40391a:	9301      	str	r3, [sp, #4]
  40391c:	9300      	str	r3, [sp, #0]
  40391e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403922:	492d      	ldr	r1, [pc, #180]	; (4039d8 <main+0x25c>)
  403924:	482d      	ldr	r0, [pc, #180]	; (4039dc <main+0x260>)
  403926:	4c1f      	ldr	r4, [pc, #124]	; (4039a4 <main+0x228>)
  403928:	47a0      	blx	r4
   
	/* Start the scheduler. */
	vTaskStartScheduler();
  40392a:	4b2d      	ldr	r3, [pc, #180]	; (4039e0 <main+0x264>)
  40392c:	4798      	blx	r3
  40392e:	e7fe      	b.n	40392e <main+0x1b2>
  403930:	004001d5 	.word	0x004001d5
  403934:	004003ad 	.word	0x004003ad
  403938:	e000e010 	.word	0xe000e010
  40393c:	000493df 	.word	0x000493df
  403940:	e000ed00 	.word	0xe000ed00
  403944:	40028000 	.word	0x40028000
  403948:	2040c3d4 	.word	0x2040c3d4
  40394c:	00402ebd 	.word	0x00402ebd
  403950:	2040c3d0 	.word	0x2040c3d0
  403954:	0040323d 	.word	0x0040323d
  403958:	2040c3cc 	.word	0x2040c3cc
  40395c:	00400c71 	.word	0x00400c71
  403960:	08f0d180 	.word	0x08f0d180
  403964:	00400d39 	.word	0x00400d39
  403968:	00400d8d 	.word	0x00400d8d
  40396c:	00400d93 	.word	0x00400d93
  403970:	2040000c 	.word	0x2040000c
  403974:	004041d9 	.word	0x004041d9
  403978:	0040171d 	.word	0x0040171d
  40397c:	2040c4e8 	.word	0x2040c4e8
  403980:	2040c4e0 	.word	0x2040c4e0
  403984:	2040c498 	.word	0x2040c498
  403988:	2040c4dc 	.word	0x2040c4dc
  40398c:	2040c4ec 	.word	0x2040c4ec
  403990:	2040c49c 	.word	0x2040c49c
  403994:	2040c4e4 	.word	0x2040c4e4
  403998:	00403349 	.word	0x00403349
  40399c:	00406998 	.word	0x00406998
  4039a0:	00402f91 	.word	0x00402f91
  4039a4:	00401e3d 	.word	0x00401e3d
  4039a8:	004069a0 	.word	0x004069a0
  4039ac:	00403a35 	.word	0x00403a35
  4039b0:	004069c4 	.word	0x004069c4
  4039b4:	00402ffd 	.word	0x00402ffd
  4039b8:	004069cc 	.word	0x004069cc
  4039bc:	00403061 	.word	0x00403061
  4039c0:	004069d4 	.word	0x004069d4
  4039c4:	004030cd 	.word	0x004030cd
  4039c8:	004069dc 	.word	0x004069dc
  4039cc:	00403149 	.word	0x00403149
  4039d0:	004069e4 	.word	0x004069e4
  4039d4:	004031c5 	.word	0x004031c5
  4039d8:	004069ec 	.word	0x004069ec
  4039dc:	004036fd 	.word	0x004036fd
  4039e0:	00402071 	.word	0x00402071

004039e4 <__libc_init_array>:
  4039e4:	b570      	push	{r4, r5, r6, lr}
  4039e6:	4e0f      	ldr	r6, [pc, #60]	; (403a24 <__libc_init_array+0x40>)
  4039e8:	4d0f      	ldr	r5, [pc, #60]	; (403a28 <__libc_init_array+0x44>)
  4039ea:	1b76      	subs	r6, r6, r5
  4039ec:	10b6      	asrs	r6, r6, #2
  4039ee:	bf18      	it	ne
  4039f0:	2400      	movne	r4, #0
  4039f2:	d005      	beq.n	403a00 <__libc_init_array+0x1c>
  4039f4:	3401      	adds	r4, #1
  4039f6:	f855 3b04 	ldr.w	r3, [r5], #4
  4039fa:	4798      	blx	r3
  4039fc:	42a6      	cmp	r6, r4
  4039fe:	d1f9      	bne.n	4039f4 <__libc_init_array+0x10>
  403a00:	4e0a      	ldr	r6, [pc, #40]	; (403a2c <__libc_init_array+0x48>)
  403a02:	4d0b      	ldr	r5, [pc, #44]	; (403a30 <__libc_init_array+0x4c>)
  403a04:	1b76      	subs	r6, r6, r5
  403a06:	f003 f8cd 	bl	406ba4 <_init>
  403a0a:	10b6      	asrs	r6, r6, #2
  403a0c:	bf18      	it	ne
  403a0e:	2400      	movne	r4, #0
  403a10:	d006      	beq.n	403a20 <__libc_init_array+0x3c>
  403a12:	3401      	adds	r4, #1
  403a14:	f855 3b04 	ldr.w	r3, [r5], #4
  403a18:	4798      	blx	r3
  403a1a:	42a6      	cmp	r6, r4
  403a1c:	d1f9      	bne.n	403a12 <__libc_init_array+0x2e>
  403a1e:	bd70      	pop	{r4, r5, r6, pc}
  403a20:	bd70      	pop	{r4, r5, r6, pc}
  403a22:	bf00      	nop
  403a24:	00406bb0 	.word	0x00406bb0
  403a28:	00406bb0 	.word	0x00406bb0
  403a2c:	00406bb8 	.word	0x00406bb8
  403a30:	00406bb0 	.word	0x00406bb0

00403a34 <iprintf>:
  403a34:	b40f      	push	{r0, r1, r2, r3}
  403a36:	b500      	push	{lr}
  403a38:	4907      	ldr	r1, [pc, #28]	; (403a58 <iprintf+0x24>)
  403a3a:	b083      	sub	sp, #12
  403a3c:	ab04      	add	r3, sp, #16
  403a3e:	6808      	ldr	r0, [r1, #0]
  403a40:	f853 2b04 	ldr.w	r2, [r3], #4
  403a44:	6881      	ldr	r1, [r0, #8]
  403a46:	9301      	str	r3, [sp, #4]
  403a48:	f000 fd48 	bl	4044dc <_vfiprintf_r>
  403a4c:	b003      	add	sp, #12
  403a4e:	f85d eb04 	ldr.w	lr, [sp], #4
  403a52:	b004      	add	sp, #16
  403a54:	4770      	bx	lr
  403a56:	bf00      	nop
  403a58:	2040000c 	.word	0x2040000c

00403a5c <malloc>:
  403a5c:	4b02      	ldr	r3, [pc, #8]	; (403a68 <malloc+0xc>)
  403a5e:	4601      	mov	r1, r0
  403a60:	6818      	ldr	r0, [r3, #0]
  403a62:	f000 b803 	b.w	403a6c <_malloc_r>
  403a66:	bf00      	nop
  403a68:	2040000c 	.word	0x2040000c

00403a6c <_malloc_r>:
  403a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a70:	f101 060b 	add.w	r6, r1, #11
  403a74:	2e16      	cmp	r6, #22
  403a76:	b083      	sub	sp, #12
  403a78:	4605      	mov	r5, r0
  403a7a:	f240 809e 	bls.w	403bba <_malloc_r+0x14e>
  403a7e:	f036 0607 	bics.w	r6, r6, #7
  403a82:	f100 80bd 	bmi.w	403c00 <_malloc_r+0x194>
  403a86:	42b1      	cmp	r1, r6
  403a88:	f200 80ba 	bhi.w	403c00 <_malloc_r+0x194>
  403a8c:	f000 fb86 	bl	40419c <__malloc_lock>
  403a90:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403a94:	f0c0 8293 	bcc.w	403fbe <_malloc_r+0x552>
  403a98:	0a73      	lsrs	r3, r6, #9
  403a9a:	f000 80b8 	beq.w	403c0e <_malloc_r+0x1a2>
  403a9e:	2b04      	cmp	r3, #4
  403aa0:	f200 8179 	bhi.w	403d96 <_malloc_r+0x32a>
  403aa4:	09b3      	lsrs	r3, r6, #6
  403aa6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403aaa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403aae:	00c3      	lsls	r3, r0, #3
  403ab0:	4fbf      	ldr	r7, [pc, #764]	; (403db0 <_malloc_r+0x344>)
  403ab2:	443b      	add	r3, r7
  403ab4:	f1a3 0108 	sub.w	r1, r3, #8
  403ab8:	685c      	ldr	r4, [r3, #4]
  403aba:	42a1      	cmp	r1, r4
  403abc:	d106      	bne.n	403acc <_malloc_r+0x60>
  403abe:	e00c      	b.n	403ada <_malloc_r+0x6e>
  403ac0:	2a00      	cmp	r2, #0
  403ac2:	f280 80aa 	bge.w	403c1a <_malloc_r+0x1ae>
  403ac6:	68e4      	ldr	r4, [r4, #12]
  403ac8:	42a1      	cmp	r1, r4
  403aca:	d006      	beq.n	403ada <_malloc_r+0x6e>
  403acc:	6863      	ldr	r3, [r4, #4]
  403ace:	f023 0303 	bic.w	r3, r3, #3
  403ad2:	1b9a      	subs	r2, r3, r6
  403ad4:	2a0f      	cmp	r2, #15
  403ad6:	ddf3      	ble.n	403ac0 <_malloc_r+0x54>
  403ad8:	4670      	mov	r0, lr
  403ada:	693c      	ldr	r4, [r7, #16]
  403adc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403dc4 <_malloc_r+0x358>
  403ae0:	4574      	cmp	r4, lr
  403ae2:	f000 81ab 	beq.w	403e3c <_malloc_r+0x3d0>
  403ae6:	6863      	ldr	r3, [r4, #4]
  403ae8:	f023 0303 	bic.w	r3, r3, #3
  403aec:	1b9a      	subs	r2, r3, r6
  403aee:	2a0f      	cmp	r2, #15
  403af0:	f300 8190 	bgt.w	403e14 <_malloc_r+0x3a8>
  403af4:	2a00      	cmp	r2, #0
  403af6:	f8c7 e014 	str.w	lr, [r7, #20]
  403afa:	f8c7 e010 	str.w	lr, [r7, #16]
  403afe:	f280 809d 	bge.w	403c3c <_malloc_r+0x1d0>
  403b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b06:	f080 8161 	bcs.w	403dcc <_malloc_r+0x360>
  403b0a:	08db      	lsrs	r3, r3, #3
  403b0c:	f103 0c01 	add.w	ip, r3, #1
  403b10:	1099      	asrs	r1, r3, #2
  403b12:	687a      	ldr	r2, [r7, #4]
  403b14:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403b18:	f8c4 8008 	str.w	r8, [r4, #8]
  403b1c:	2301      	movs	r3, #1
  403b1e:	408b      	lsls	r3, r1
  403b20:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403b24:	4313      	orrs	r3, r2
  403b26:	3908      	subs	r1, #8
  403b28:	60e1      	str	r1, [r4, #12]
  403b2a:	607b      	str	r3, [r7, #4]
  403b2c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403b30:	f8c8 400c 	str.w	r4, [r8, #12]
  403b34:	1082      	asrs	r2, r0, #2
  403b36:	2401      	movs	r4, #1
  403b38:	4094      	lsls	r4, r2
  403b3a:	429c      	cmp	r4, r3
  403b3c:	f200 808b 	bhi.w	403c56 <_malloc_r+0x1ea>
  403b40:	421c      	tst	r4, r3
  403b42:	d106      	bne.n	403b52 <_malloc_r+0xe6>
  403b44:	f020 0003 	bic.w	r0, r0, #3
  403b48:	0064      	lsls	r4, r4, #1
  403b4a:	421c      	tst	r4, r3
  403b4c:	f100 0004 	add.w	r0, r0, #4
  403b50:	d0fa      	beq.n	403b48 <_malloc_r+0xdc>
  403b52:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403b56:	46cc      	mov	ip, r9
  403b58:	4680      	mov	r8, r0
  403b5a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403b5e:	459c      	cmp	ip, r3
  403b60:	d107      	bne.n	403b72 <_malloc_r+0x106>
  403b62:	e16d      	b.n	403e40 <_malloc_r+0x3d4>
  403b64:	2a00      	cmp	r2, #0
  403b66:	f280 817b 	bge.w	403e60 <_malloc_r+0x3f4>
  403b6a:	68db      	ldr	r3, [r3, #12]
  403b6c:	459c      	cmp	ip, r3
  403b6e:	f000 8167 	beq.w	403e40 <_malloc_r+0x3d4>
  403b72:	6859      	ldr	r1, [r3, #4]
  403b74:	f021 0103 	bic.w	r1, r1, #3
  403b78:	1b8a      	subs	r2, r1, r6
  403b7a:	2a0f      	cmp	r2, #15
  403b7c:	ddf2      	ble.n	403b64 <_malloc_r+0xf8>
  403b7e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403b82:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403b86:	9300      	str	r3, [sp, #0]
  403b88:	199c      	adds	r4, r3, r6
  403b8a:	4628      	mov	r0, r5
  403b8c:	f046 0601 	orr.w	r6, r6, #1
  403b90:	f042 0501 	orr.w	r5, r2, #1
  403b94:	605e      	str	r6, [r3, #4]
  403b96:	f8c8 c00c 	str.w	ip, [r8, #12]
  403b9a:	f8cc 8008 	str.w	r8, [ip, #8]
  403b9e:	617c      	str	r4, [r7, #20]
  403ba0:	613c      	str	r4, [r7, #16]
  403ba2:	f8c4 e00c 	str.w	lr, [r4, #12]
  403ba6:	f8c4 e008 	str.w	lr, [r4, #8]
  403baa:	6065      	str	r5, [r4, #4]
  403bac:	505a      	str	r2, [r3, r1]
  403bae:	f000 fafb 	bl	4041a8 <__malloc_unlock>
  403bb2:	9b00      	ldr	r3, [sp, #0]
  403bb4:	f103 0408 	add.w	r4, r3, #8
  403bb8:	e01e      	b.n	403bf8 <_malloc_r+0x18c>
  403bba:	2910      	cmp	r1, #16
  403bbc:	d820      	bhi.n	403c00 <_malloc_r+0x194>
  403bbe:	f000 faed 	bl	40419c <__malloc_lock>
  403bc2:	2610      	movs	r6, #16
  403bc4:	2318      	movs	r3, #24
  403bc6:	2002      	movs	r0, #2
  403bc8:	4f79      	ldr	r7, [pc, #484]	; (403db0 <_malloc_r+0x344>)
  403bca:	443b      	add	r3, r7
  403bcc:	f1a3 0208 	sub.w	r2, r3, #8
  403bd0:	685c      	ldr	r4, [r3, #4]
  403bd2:	4294      	cmp	r4, r2
  403bd4:	f000 813d 	beq.w	403e52 <_malloc_r+0x3e6>
  403bd8:	6863      	ldr	r3, [r4, #4]
  403bda:	68e1      	ldr	r1, [r4, #12]
  403bdc:	68a6      	ldr	r6, [r4, #8]
  403bde:	f023 0303 	bic.w	r3, r3, #3
  403be2:	4423      	add	r3, r4
  403be4:	4628      	mov	r0, r5
  403be6:	685a      	ldr	r2, [r3, #4]
  403be8:	60f1      	str	r1, [r6, #12]
  403bea:	f042 0201 	orr.w	r2, r2, #1
  403bee:	608e      	str	r6, [r1, #8]
  403bf0:	605a      	str	r2, [r3, #4]
  403bf2:	f000 fad9 	bl	4041a8 <__malloc_unlock>
  403bf6:	3408      	adds	r4, #8
  403bf8:	4620      	mov	r0, r4
  403bfa:	b003      	add	sp, #12
  403bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c00:	2400      	movs	r4, #0
  403c02:	230c      	movs	r3, #12
  403c04:	4620      	mov	r0, r4
  403c06:	602b      	str	r3, [r5, #0]
  403c08:	b003      	add	sp, #12
  403c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c0e:	2040      	movs	r0, #64	; 0x40
  403c10:	f44f 7300 	mov.w	r3, #512	; 0x200
  403c14:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403c18:	e74a      	b.n	403ab0 <_malloc_r+0x44>
  403c1a:	4423      	add	r3, r4
  403c1c:	68e1      	ldr	r1, [r4, #12]
  403c1e:	685a      	ldr	r2, [r3, #4]
  403c20:	68a6      	ldr	r6, [r4, #8]
  403c22:	f042 0201 	orr.w	r2, r2, #1
  403c26:	60f1      	str	r1, [r6, #12]
  403c28:	4628      	mov	r0, r5
  403c2a:	608e      	str	r6, [r1, #8]
  403c2c:	605a      	str	r2, [r3, #4]
  403c2e:	f000 fabb 	bl	4041a8 <__malloc_unlock>
  403c32:	3408      	adds	r4, #8
  403c34:	4620      	mov	r0, r4
  403c36:	b003      	add	sp, #12
  403c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c3c:	4423      	add	r3, r4
  403c3e:	4628      	mov	r0, r5
  403c40:	685a      	ldr	r2, [r3, #4]
  403c42:	f042 0201 	orr.w	r2, r2, #1
  403c46:	605a      	str	r2, [r3, #4]
  403c48:	f000 faae 	bl	4041a8 <__malloc_unlock>
  403c4c:	3408      	adds	r4, #8
  403c4e:	4620      	mov	r0, r4
  403c50:	b003      	add	sp, #12
  403c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c56:	68bc      	ldr	r4, [r7, #8]
  403c58:	6863      	ldr	r3, [r4, #4]
  403c5a:	f023 0803 	bic.w	r8, r3, #3
  403c5e:	45b0      	cmp	r8, r6
  403c60:	d304      	bcc.n	403c6c <_malloc_r+0x200>
  403c62:	eba8 0306 	sub.w	r3, r8, r6
  403c66:	2b0f      	cmp	r3, #15
  403c68:	f300 8085 	bgt.w	403d76 <_malloc_r+0x30a>
  403c6c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403dc8 <_malloc_r+0x35c>
  403c70:	4b50      	ldr	r3, [pc, #320]	; (403db4 <_malloc_r+0x348>)
  403c72:	f8d9 2000 	ldr.w	r2, [r9]
  403c76:	681b      	ldr	r3, [r3, #0]
  403c78:	3201      	adds	r2, #1
  403c7a:	4433      	add	r3, r6
  403c7c:	eb04 0a08 	add.w	sl, r4, r8
  403c80:	f000 8155 	beq.w	403f2e <_malloc_r+0x4c2>
  403c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403c88:	330f      	adds	r3, #15
  403c8a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403c8e:	f02b 0b0f 	bic.w	fp, fp, #15
  403c92:	4659      	mov	r1, fp
  403c94:	4628      	mov	r0, r5
  403c96:	f000 fa8d 	bl	4041b4 <_sbrk_r>
  403c9a:	1c41      	adds	r1, r0, #1
  403c9c:	4602      	mov	r2, r0
  403c9e:	f000 80fc 	beq.w	403e9a <_malloc_r+0x42e>
  403ca2:	4582      	cmp	sl, r0
  403ca4:	f200 80f7 	bhi.w	403e96 <_malloc_r+0x42a>
  403ca8:	4b43      	ldr	r3, [pc, #268]	; (403db8 <_malloc_r+0x34c>)
  403caa:	6819      	ldr	r1, [r3, #0]
  403cac:	4459      	add	r1, fp
  403cae:	6019      	str	r1, [r3, #0]
  403cb0:	f000 814d 	beq.w	403f4e <_malloc_r+0x4e2>
  403cb4:	f8d9 0000 	ldr.w	r0, [r9]
  403cb8:	3001      	adds	r0, #1
  403cba:	bf1b      	ittet	ne
  403cbc:	eba2 0a0a 	subne.w	sl, r2, sl
  403cc0:	4451      	addne	r1, sl
  403cc2:	f8c9 2000 	streq.w	r2, [r9]
  403cc6:	6019      	strne	r1, [r3, #0]
  403cc8:	f012 0107 	ands.w	r1, r2, #7
  403ccc:	f000 8115 	beq.w	403efa <_malloc_r+0x48e>
  403cd0:	f1c1 0008 	rsb	r0, r1, #8
  403cd4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403cd8:	4402      	add	r2, r0
  403cda:	3108      	adds	r1, #8
  403cdc:	eb02 090b 	add.w	r9, r2, fp
  403ce0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403ce4:	eba1 0909 	sub.w	r9, r1, r9
  403ce8:	4649      	mov	r1, r9
  403cea:	4628      	mov	r0, r5
  403cec:	9301      	str	r3, [sp, #4]
  403cee:	9200      	str	r2, [sp, #0]
  403cf0:	f000 fa60 	bl	4041b4 <_sbrk_r>
  403cf4:	1c43      	adds	r3, r0, #1
  403cf6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403cfa:	f000 8143 	beq.w	403f84 <_malloc_r+0x518>
  403cfe:	1a80      	subs	r0, r0, r2
  403d00:	4448      	add	r0, r9
  403d02:	f040 0001 	orr.w	r0, r0, #1
  403d06:	6819      	ldr	r1, [r3, #0]
  403d08:	60ba      	str	r2, [r7, #8]
  403d0a:	4449      	add	r1, r9
  403d0c:	42bc      	cmp	r4, r7
  403d0e:	6050      	str	r0, [r2, #4]
  403d10:	6019      	str	r1, [r3, #0]
  403d12:	d017      	beq.n	403d44 <_malloc_r+0x2d8>
  403d14:	f1b8 0f0f 	cmp.w	r8, #15
  403d18:	f240 80fb 	bls.w	403f12 <_malloc_r+0x4a6>
  403d1c:	6860      	ldr	r0, [r4, #4]
  403d1e:	f1a8 020c 	sub.w	r2, r8, #12
  403d22:	f022 0207 	bic.w	r2, r2, #7
  403d26:	eb04 0e02 	add.w	lr, r4, r2
  403d2a:	f000 0001 	and.w	r0, r0, #1
  403d2e:	f04f 0c05 	mov.w	ip, #5
  403d32:	4310      	orrs	r0, r2
  403d34:	2a0f      	cmp	r2, #15
  403d36:	6060      	str	r0, [r4, #4]
  403d38:	f8ce c004 	str.w	ip, [lr, #4]
  403d3c:	f8ce c008 	str.w	ip, [lr, #8]
  403d40:	f200 8117 	bhi.w	403f72 <_malloc_r+0x506>
  403d44:	4b1d      	ldr	r3, [pc, #116]	; (403dbc <_malloc_r+0x350>)
  403d46:	68bc      	ldr	r4, [r7, #8]
  403d48:	681a      	ldr	r2, [r3, #0]
  403d4a:	4291      	cmp	r1, r2
  403d4c:	bf88      	it	hi
  403d4e:	6019      	strhi	r1, [r3, #0]
  403d50:	4b1b      	ldr	r3, [pc, #108]	; (403dc0 <_malloc_r+0x354>)
  403d52:	681a      	ldr	r2, [r3, #0]
  403d54:	4291      	cmp	r1, r2
  403d56:	6862      	ldr	r2, [r4, #4]
  403d58:	bf88      	it	hi
  403d5a:	6019      	strhi	r1, [r3, #0]
  403d5c:	f022 0203 	bic.w	r2, r2, #3
  403d60:	4296      	cmp	r6, r2
  403d62:	eba2 0306 	sub.w	r3, r2, r6
  403d66:	d801      	bhi.n	403d6c <_malloc_r+0x300>
  403d68:	2b0f      	cmp	r3, #15
  403d6a:	dc04      	bgt.n	403d76 <_malloc_r+0x30a>
  403d6c:	4628      	mov	r0, r5
  403d6e:	f000 fa1b 	bl	4041a8 <__malloc_unlock>
  403d72:	2400      	movs	r4, #0
  403d74:	e740      	b.n	403bf8 <_malloc_r+0x18c>
  403d76:	19a2      	adds	r2, r4, r6
  403d78:	f043 0301 	orr.w	r3, r3, #1
  403d7c:	f046 0601 	orr.w	r6, r6, #1
  403d80:	6066      	str	r6, [r4, #4]
  403d82:	4628      	mov	r0, r5
  403d84:	60ba      	str	r2, [r7, #8]
  403d86:	6053      	str	r3, [r2, #4]
  403d88:	f000 fa0e 	bl	4041a8 <__malloc_unlock>
  403d8c:	3408      	adds	r4, #8
  403d8e:	4620      	mov	r0, r4
  403d90:	b003      	add	sp, #12
  403d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d96:	2b14      	cmp	r3, #20
  403d98:	d971      	bls.n	403e7e <_malloc_r+0x412>
  403d9a:	2b54      	cmp	r3, #84	; 0x54
  403d9c:	f200 80a3 	bhi.w	403ee6 <_malloc_r+0x47a>
  403da0:	0b33      	lsrs	r3, r6, #12
  403da2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403da6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403daa:	00c3      	lsls	r3, r0, #3
  403dac:	e680      	b.n	403ab0 <_malloc_r+0x44>
  403dae:	bf00      	nop
  403db0:	20400438 	.word	0x20400438
  403db4:	2040c3c8 	.word	0x2040c3c8
  403db8:	2040c398 	.word	0x2040c398
  403dbc:	2040c3c0 	.word	0x2040c3c0
  403dc0:	2040c3c4 	.word	0x2040c3c4
  403dc4:	20400440 	.word	0x20400440
  403dc8:	20400840 	.word	0x20400840
  403dcc:	0a5a      	lsrs	r2, r3, #9
  403dce:	2a04      	cmp	r2, #4
  403dd0:	d95b      	bls.n	403e8a <_malloc_r+0x41e>
  403dd2:	2a14      	cmp	r2, #20
  403dd4:	f200 80ae 	bhi.w	403f34 <_malloc_r+0x4c8>
  403dd8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403ddc:	00c9      	lsls	r1, r1, #3
  403dde:	325b      	adds	r2, #91	; 0x5b
  403de0:	eb07 0c01 	add.w	ip, r7, r1
  403de4:	5879      	ldr	r1, [r7, r1]
  403de6:	f1ac 0c08 	sub.w	ip, ip, #8
  403dea:	458c      	cmp	ip, r1
  403dec:	f000 8088 	beq.w	403f00 <_malloc_r+0x494>
  403df0:	684a      	ldr	r2, [r1, #4]
  403df2:	f022 0203 	bic.w	r2, r2, #3
  403df6:	4293      	cmp	r3, r2
  403df8:	d273      	bcs.n	403ee2 <_malloc_r+0x476>
  403dfa:	6889      	ldr	r1, [r1, #8]
  403dfc:	458c      	cmp	ip, r1
  403dfe:	d1f7      	bne.n	403df0 <_malloc_r+0x384>
  403e00:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403e04:	687b      	ldr	r3, [r7, #4]
  403e06:	60e2      	str	r2, [r4, #12]
  403e08:	f8c4 c008 	str.w	ip, [r4, #8]
  403e0c:	6094      	str	r4, [r2, #8]
  403e0e:	f8cc 400c 	str.w	r4, [ip, #12]
  403e12:	e68f      	b.n	403b34 <_malloc_r+0xc8>
  403e14:	19a1      	adds	r1, r4, r6
  403e16:	f046 0c01 	orr.w	ip, r6, #1
  403e1a:	f042 0601 	orr.w	r6, r2, #1
  403e1e:	f8c4 c004 	str.w	ip, [r4, #4]
  403e22:	4628      	mov	r0, r5
  403e24:	6179      	str	r1, [r7, #20]
  403e26:	6139      	str	r1, [r7, #16]
  403e28:	f8c1 e00c 	str.w	lr, [r1, #12]
  403e2c:	f8c1 e008 	str.w	lr, [r1, #8]
  403e30:	604e      	str	r6, [r1, #4]
  403e32:	50e2      	str	r2, [r4, r3]
  403e34:	f000 f9b8 	bl	4041a8 <__malloc_unlock>
  403e38:	3408      	adds	r4, #8
  403e3a:	e6dd      	b.n	403bf8 <_malloc_r+0x18c>
  403e3c:	687b      	ldr	r3, [r7, #4]
  403e3e:	e679      	b.n	403b34 <_malloc_r+0xc8>
  403e40:	f108 0801 	add.w	r8, r8, #1
  403e44:	f018 0f03 	tst.w	r8, #3
  403e48:	f10c 0c08 	add.w	ip, ip, #8
  403e4c:	f47f ae85 	bne.w	403b5a <_malloc_r+0xee>
  403e50:	e02d      	b.n	403eae <_malloc_r+0x442>
  403e52:	68dc      	ldr	r4, [r3, #12]
  403e54:	42a3      	cmp	r3, r4
  403e56:	bf08      	it	eq
  403e58:	3002      	addeq	r0, #2
  403e5a:	f43f ae3e 	beq.w	403ada <_malloc_r+0x6e>
  403e5e:	e6bb      	b.n	403bd8 <_malloc_r+0x16c>
  403e60:	4419      	add	r1, r3
  403e62:	461c      	mov	r4, r3
  403e64:	684a      	ldr	r2, [r1, #4]
  403e66:	68db      	ldr	r3, [r3, #12]
  403e68:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403e6c:	f042 0201 	orr.w	r2, r2, #1
  403e70:	604a      	str	r2, [r1, #4]
  403e72:	4628      	mov	r0, r5
  403e74:	60f3      	str	r3, [r6, #12]
  403e76:	609e      	str	r6, [r3, #8]
  403e78:	f000 f996 	bl	4041a8 <__malloc_unlock>
  403e7c:	e6bc      	b.n	403bf8 <_malloc_r+0x18c>
  403e7e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403e82:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403e86:	00c3      	lsls	r3, r0, #3
  403e88:	e612      	b.n	403ab0 <_malloc_r+0x44>
  403e8a:	099a      	lsrs	r2, r3, #6
  403e8c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403e90:	00c9      	lsls	r1, r1, #3
  403e92:	3238      	adds	r2, #56	; 0x38
  403e94:	e7a4      	b.n	403de0 <_malloc_r+0x374>
  403e96:	42bc      	cmp	r4, r7
  403e98:	d054      	beq.n	403f44 <_malloc_r+0x4d8>
  403e9a:	68bc      	ldr	r4, [r7, #8]
  403e9c:	6862      	ldr	r2, [r4, #4]
  403e9e:	f022 0203 	bic.w	r2, r2, #3
  403ea2:	e75d      	b.n	403d60 <_malloc_r+0x2f4>
  403ea4:	f859 3908 	ldr.w	r3, [r9], #-8
  403ea8:	4599      	cmp	r9, r3
  403eaa:	f040 8086 	bne.w	403fba <_malloc_r+0x54e>
  403eae:	f010 0f03 	tst.w	r0, #3
  403eb2:	f100 30ff 	add.w	r0, r0, #4294967295
  403eb6:	d1f5      	bne.n	403ea4 <_malloc_r+0x438>
  403eb8:	687b      	ldr	r3, [r7, #4]
  403eba:	ea23 0304 	bic.w	r3, r3, r4
  403ebe:	607b      	str	r3, [r7, #4]
  403ec0:	0064      	lsls	r4, r4, #1
  403ec2:	429c      	cmp	r4, r3
  403ec4:	f63f aec7 	bhi.w	403c56 <_malloc_r+0x1ea>
  403ec8:	2c00      	cmp	r4, #0
  403eca:	f43f aec4 	beq.w	403c56 <_malloc_r+0x1ea>
  403ece:	421c      	tst	r4, r3
  403ed0:	4640      	mov	r0, r8
  403ed2:	f47f ae3e 	bne.w	403b52 <_malloc_r+0xe6>
  403ed6:	0064      	lsls	r4, r4, #1
  403ed8:	421c      	tst	r4, r3
  403eda:	f100 0004 	add.w	r0, r0, #4
  403ede:	d0fa      	beq.n	403ed6 <_malloc_r+0x46a>
  403ee0:	e637      	b.n	403b52 <_malloc_r+0xe6>
  403ee2:	468c      	mov	ip, r1
  403ee4:	e78c      	b.n	403e00 <_malloc_r+0x394>
  403ee6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403eea:	d815      	bhi.n	403f18 <_malloc_r+0x4ac>
  403eec:	0bf3      	lsrs	r3, r6, #15
  403eee:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403ef2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403ef6:	00c3      	lsls	r3, r0, #3
  403ef8:	e5da      	b.n	403ab0 <_malloc_r+0x44>
  403efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403efe:	e6ed      	b.n	403cdc <_malloc_r+0x270>
  403f00:	687b      	ldr	r3, [r7, #4]
  403f02:	1092      	asrs	r2, r2, #2
  403f04:	2101      	movs	r1, #1
  403f06:	fa01 f202 	lsl.w	r2, r1, r2
  403f0a:	4313      	orrs	r3, r2
  403f0c:	607b      	str	r3, [r7, #4]
  403f0e:	4662      	mov	r2, ip
  403f10:	e779      	b.n	403e06 <_malloc_r+0x39a>
  403f12:	2301      	movs	r3, #1
  403f14:	6053      	str	r3, [r2, #4]
  403f16:	e729      	b.n	403d6c <_malloc_r+0x300>
  403f18:	f240 5254 	movw	r2, #1364	; 0x554
  403f1c:	4293      	cmp	r3, r2
  403f1e:	d822      	bhi.n	403f66 <_malloc_r+0x4fa>
  403f20:	0cb3      	lsrs	r3, r6, #18
  403f22:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403f26:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403f2a:	00c3      	lsls	r3, r0, #3
  403f2c:	e5c0      	b.n	403ab0 <_malloc_r+0x44>
  403f2e:	f103 0b10 	add.w	fp, r3, #16
  403f32:	e6ae      	b.n	403c92 <_malloc_r+0x226>
  403f34:	2a54      	cmp	r2, #84	; 0x54
  403f36:	d829      	bhi.n	403f8c <_malloc_r+0x520>
  403f38:	0b1a      	lsrs	r2, r3, #12
  403f3a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403f3e:	00c9      	lsls	r1, r1, #3
  403f40:	326e      	adds	r2, #110	; 0x6e
  403f42:	e74d      	b.n	403de0 <_malloc_r+0x374>
  403f44:	4b20      	ldr	r3, [pc, #128]	; (403fc8 <_malloc_r+0x55c>)
  403f46:	6819      	ldr	r1, [r3, #0]
  403f48:	4459      	add	r1, fp
  403f4a:	6019      	str	r1, [r3, #0]
  403f4c:	e6b2      	b.n	403cb4 <_malloc_r+0x248>
  403f4e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403f52:	2800      	cmp	r0, #0
  403f54:	f47f aeae 	bne.w	403cb4 <_malloc_r+0x248>
  403f58:	eb08 030b 	add.w	r3, r8, fp
  403f5c:	68ba      	ldr	r2, [r7, #8]
  403f5e:	f043 0301 	orr.w	r3, r3, #1
  403f62:	6053      	str	r3, [r2, #4]
  403f64:	e6ee      	b.n	403d44 <_malloc_r+0x2d8>
  403f66:	207f      	movs	r0, #127	; 0x7f
  403f68:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403f6c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403f70:	e59e      	b.n	403ab0 <_malloc_r+0x44>
  403f72:	f104 0108 	add.w	r1, r4, #8
  403f76:	4628      	mov	r0, r5
  403f78:	9300      	str	r3, [sp, #0]
  403f7a:	f001 fbcb 	bl	405714 <_free_r>
  403f7e:	9b00      	ldr	r3, [sp, #0]
  403f80:	6819      	ldr	r1, [r3, #0]
  403f82:	e6df      	b.n	403d44 <_malloc_r+0x2d8>
  403f84:	2001      	movs	r0, #1
  403f86:	f04f 0900 	mov.w	r9, #0
  403f8a:	e6bc      	b.n	403d06 <_malloc_r+0x29a>
  403f8c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f90:	d805      	bhi.n	403f9e <_malloc_r+0x532>
  403f92:	0bda      	lsrs	r2, r3, #15
  403f94:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403f98:	00c9      	lsls	r1, r1, #3
  403f9a:	3277      	adds	r2, #119	; 0x77
  403f9c:	e720      	b.n	403de0 <_malloc_r+0x374>
  403f9e:	f240 5154 	movw	r1, #1364	; 0x554
  403fa2:	428a      	cmp	r2, r1
  403fa4:	d805      	bhi.n	403fb2 <_malloc_r+0x546>
  403fa6:	0c9a      	lsrs	r2, r3, #18
  403fa8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403fac:	00c9      	lsls	r1, r1, #3
  403fae:	327c      	adds	r2, #124	; 0x7c
  403fb0:	e716      	b.n	403de0 <_malloc_r+0x374>
  403fb2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403fb6:	227e      	movs	r2, #126	; 0x7e
  403fb8:	e712      	b.n	403de0 <_malloc_r+0x374>
  403fba:	687b      	ldr	r3, [r7, #4]
  403fbc:	e780      	b.n	403ec0 <_malloc_r+0x454>
  403fbe:	08f0      	lsrs	r0, r6, #3
  403fc0:	f106 0308 	add.w	r3, r6, #8
  403fc4:	e600      	b.n	403bc8 <_malloc_r+0x15c>
  403fc6:	bf00      	nop
  403fc8:	2040c398 	.word	0x2040c398

00403fcc <memcpy>:
  403fcc:	4684      	mov	ip, r0
  403fce:	ea41 0300 	orr.w	r3, r1, r0
  403fd2:	f013 0303 	ands.w	r3, r3, #3
  403fd6:	d16d      	bne.n	4040b4 <memcpy+0xe8>
  403fd8:	3a40      	subs	r2, #64	; 0x40
  403fda:	d341      	bcc.n	404060 <memcpy+0x94>
  403fdc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe0:	f840 3b04 	str.w	r3, [r0], #4
  403fe4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe8:	f840 3b04 	str.w	r3, [r0], #4
  403fec:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff0:	f840 3b04 	str.w	r3, [r0], #4
  403ff4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff8:	f840 3b04 	str.w	r3, [r0], #4
  403ffc:	f851 3b04 	ldr.w	r3, [r1], #4
  404000:	f840 3b04 	str.w	r3, [r0], #4
  404004:	f851 3b04 	ldr.w	r3, [r1], #4
  404008:	f840 3b04 	str.w	r3, [r0], #4
  40400c:	f851 3b04 	ldr.w	r3, [r1], #4
  404010:	f840 3b04 	str.w	r3, [r0], #4
  404014:	f851 3b04 	ldr.w	r3, [r1], #4
  404018:	f840 3b04 	str.w	r3, [r0], #4
  40401c:	f851 3b04 	ldr.w	r3, [r1], #4
  404020:	f840 3b04 	str.w	r3, [r0], #4
  404024:	f851 3b04 	ldr.w	r3, [r1], #4
  404028:	f840 3b04 	str.w	r3, [r0], #4
  40402c:	f851 3b04 	ldr.w	r3, [r1], #4
  404030:	f840 3b04 	str.w	r3, [r0], #4
  404034:	f851 3b04 	ldr.w	r3, [r1], #4
  404038:	f840 3b04 	str.w	r3, [r0], #4
  40403c:	f851 3b04 	ldr.w	r3, [r1], #4
  404040:	f840 3b04 	str.w	r3, [r0], #4
  404044:	f851 3b04 	ldr.w	r3, [r1], #4
  404048:	f840 3b04 	str.w	r3, [r0], #4
  40404c:	f851 3b04 	ldr.w	r3, [r1], #4
  404050:	f840 3b04 	str.w	r3, [r0], #4
  404054:	f851 3b04 	ldr.w	r3, [r1], #4
  404058:	f840 3b04 	str.w	r3, [r0], #4
  40405c:	3a40      	subs	r2, #64	; 0x40
  40405e:	d2bd      	bcs.n	403fdc <memcpy+0x10>
  404060:	3230      	adds	r2, #48	; 0x30
  404062:	d311      	bcc.n	404088 <memcpy+0xbc>
  404064:	f851 3b04 	ldr.w	r3, [r1], #4
  404068:	f840 3b04 	str.w	r3, [r0], #4
  40406c:	f851 3b04 	ldr.w	r3, [r1], #4
  404070:	f840 3b04 	str.w	r3, [r0], #4
  404074:	f851 3b04 	ldr.w	r3, [r1], #4
  404078:	f840 3b04 	str.w	r3, [r0], #4
  40407c:	f851 3b04 	ldr.w	r3, [r1], #4
  404080:	f840 3b04 	str.w	r3, [r0], #4
  404084:	3a10      	subs	r2, #16
  404086:	d2ed      	bcs.n	404064 <memcpy+0x98>
  404088:	320c      	adds	r2, #12
  40408a:	d305      	bcc.n	404098 <memcpy+0xcc>
  40408c:	f851 3b04 	ldr.w	r3, [r1], #4
  404090:	f840 3b04 	str.w	r3, [r0], #4
  404094:	3a04      	subs	r2, #4
  404096:	d2f9      	bcs.n	40408c <memcpy+0xc0>
  404098:	3204      	adds	r2, #4
  40409a:	d008      	beq.n	4040ae <memcpy+0xe2>
  40409c:	07d2      	lsls	r2, r2, #31
  40409e:	bf1c      	itt	ne
  4040a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4040a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4040a8:	d301      	bcc.n	4040ae <memcpy+0xe2>
  4040aa:	880b      	ldrh	r3, [r1, #0]
  4040ac:	8003      	strh	r3, [r0, #0]
  4040ae:	4660      	mov	r0, ip
  4040b0:	4770      	bx	lr
  4040b2:	bf00      	nop
  4040b4:	2a08      	cmp	r2, #8
  4040b6:	d313      	bcc.n	4040e0 <memcpy+0x114>
  4040b8:	078b      	lsls	r3, r1, #30
  4040ba:	d08d      	beq.n	403fd8 <memcpy+0xc>
  4040bc:	f010 0303 	ands.w	r3, r0, #3
  4040c0:	d08a      	beq.n	403fd8 <memcpy+0xc>
  4040c2:	f1c3 0304 	rsb	r3, r3, #4
  4040c6:	1ad2      	subs	r2, r2, r3
  4040c8:	07db      	lsls	r3, r3, #31
  4040ca:	bf1c      	itt	ne
  4040cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4040d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4040d4:	d380      	bcc.n	403fd8 <memcpy+0xc>
  4040d6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4040da:	f820 3b02 	strh.w	r3, [r0], #2
  4040de:	e77b      	b.n	403fd8 <memcpy+0xc>
  4040e0:	3a04      	subs	r2, #4
  4040e2:	d3d9      	bcc.n	404098 <memcpy+0xcc>
  4040e4:	3a01      	subs	r2, #1
  4040e6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4040ea:	f800 3b01 	strb.w	r3, [r0], #1
  4040ee:	d2f9      	bcs.n	4040e4 <memcpy+0x118>
  4040f0:	780b      	ldrb	r3, [r1, #0]
  4040f2:	7003      	strb	r3, [r0, #0]
  4040f4:	784b      	ldrb	r3, [r1, #1]
  4040f6:	7043      	strb	r3, [r0, #1]
  4040f8:	788b      	ldrb	r3, [r1, #2]
  4040fa:	7083      	strb	r3, [r0, #2]
  4040fc:	4660      	mov	r0, ip
  4040fe:	4770      	bx	lr

00404100 <memset>:
  404100:	b470      	push	{r4, r5, r6}
  404102:	0786      	lsls	r6, r0, #30
  404104:	d046      	beq.n	404194 <memset+0x94>
  404106:	1e54      	subs	r4, r2, #1
  404108:	2a00      	cmp	r2, #0
  40410a:	d041      	beq.n	404190 <memset+0x90>
  40410c:	b2ca      	uxtb	r2, r1
  40410e:	4603      	mov	r3, r0
  404110:	e002      	b.n	404118 <memset+0x18>
  404112:	f114 34ff 	adds.w	r4, r4, #4294967295
  404116:	d33b      	bcc.n	404190 <memset+0x90>
  404118:	f803 2b01 	strb.w	r2, [r3], #1
  40411c:	079d      	lsls	r5, r3, #30
  40411e:	d1f8      	bne.n	404112 <memset+0x12>
  404120:	2c03      	cmp	r4, #3
  404122:	d92e      	bls.n	404182 <memset+0x82>
  404124:	b2cd      	uxtb	r5, r1
  404126:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40412a:	2c0f      	cmp	r4, #15
  40412c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404130:	d919      	bls.n	404166 <memset+0x66>
  404132:	f103 0210 	add.w	r2, r3, #16
  404136:	4626      	mov	r6, r4
  404138:	3e10      	subs	r6, #16
  40413a:	2e0f      	cmp	r6, #15
  40413c:	f842 5c10 	str.w	r5, [r2, #-16]
  404140:	f842 5c0c 	str.w	r5, [r2, #-12]
  404144:	f842 5c08 	str.w	r5, [r2, #-8]
  404148:	f842 5c04 	str.w	r5, [r2, #-4]
  40414c:	f102 0210 	add.w	r2, r2, #16
  404150:	d8f2      	bhi.n	404138 <memset+0x38>
  404152:	f1a4 0210 	sub.w	r2, r4, #16
  404156:	f022 020f 	bic.w	r2, r2, #15
  40415a:	f004 040f 	and.w	r4, r4, #15
  40415e:	3210      	adds	r2, #16
  404160:	2c03      	cmp	r4, #3
  404162:	4413      	add	r3, r2
  404164:	d90d      	bls.n	404182 <memset+0x82>
  404166:	461e      	mov	r6, r3
  404168:	4622      	mov	r2, r4
  40416a:	3a04      	subs	r2, #4
  40416c:	2a03      	cmp	r2, #3
  40416e:	f846 5b04 	str.w	r5, [r6], #4
  404172:	d8fa      	bhi.n	40416a <memset+0x6a>
  404174:	1f22      	subs	r2, r4, #4
  404176:	f022 0203 	bic.w	r2, r2, #3
  40417a:	3204      	adds	r2, #4
  40417c:	4413      	add	r3, r2
  40417e:	f004 0403 	and.w	r4, r4, #3
  404182:	b12c      	cbz	r4, 404190 <memset+0x90>
  404184:	b2c9      	uxtb	r1, r1
  404186:	441c      	add	r4, r3
  404188:	f803 1b01 	strb.w	r1, [r3], #1
  40418c:	429c      	cmp	r4, r3
  40418e:	d1fb      	bne.n	404188 <memset+0x88>
  404190:	bc70      	pop	{r4, r5, r6}
  404192:	4770      	bx	lr
  404194:	4614      	mov	r4, r2
  404196:	4603      	mov	r3, r0
  404198:	e7c2      	b.n	404120 <memset+0x20>
  40419a:	bf00      	nop

0040419c <__malloc_lock>:
  40419c:	4801      	ldr	r0, [pc, #4]	; (4041a4 <__malloc_lock+0x8>)
  40419e:	f001 bd53 	b.w	405c48 <__retarget_lock_acquire_recursive>
  4041a2:	bf00      	nop
  4041a4:	2040c518 	.word	0x2040c518

004041a8 <__malloc_unlock>:
  4041a8:	4801      	ldr	r0, [pc, #4]	; (4041b0 <__malloc_unlock+0x8>)
  4041aa:	f001 bd4f 	b.w	405c4c <__retarget_lock_release_recursive>
  4041ae:	bf00      	nop
  4041b0:	2040c518 	.word	0x2040c518

004041b4 <_sbrk_r>:
  4041b4:	b538      	push	{r3, r4, r5, lr}
  4041b6:	4c07      	ldr	r4, [pc, #28]	; (4041d4 <_sbrk_r+0x20>)
  4041b8:	2300      	movs	r3, #0
  4041ba:	4605      	mov	r5, r0
  4041bc:	4608      	mov	r0, r1
  4041be:	6023      	str	r3, [r4, #0]
  4041c0:	f7fc ff32 	bl	401028 <_sbrk>
  4041c4:	1c43      	adds	r3, r0, #1
  4041c6:	d000      	beq.n	4041ca <_sbrk_r+0x16>
  4041c8:	bd38      	pop	{r3, r4, r5, pc}
  4041ca:	6823      	ldr	r3, [r4, #0]
  4041cc:	2b00      	cmp	r3, #0
  4041ce:	d0fb      	beq.n	4041c8 <_sbrk_r+0x14>
  4041d0:	602b      	str	r3, [r5, #0]
  4041d2:	bd38      	pop	{r3, r4, r5, pc}
  4041d4:	2040c52c 	.word	0x2040c52c

004041d8 <setbuf>:
  4041d8:	2900      	cmp	r1, #0
  4041da:	bf0c      	ite	eq
  4041dc:	2202      	moveq	r2, #2
  4041de:	2200      	movne	r2, #0
  4041e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4041e4:	f000 b800 	b.w	4041e8 <setvbuf>

004041e8 <setvbuf>:
  4041e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4041ec:	4c61      	ldr	r4, [pc, #388]	; (404374 <setvbuf+0x18c>)
  4041ee:	6825      	ldr	r5, [r4, #0]
  4041f0:	b083      	sub	sp, #12
  4041f2:	4604      	mov	r4, r0
  4041f4:	460f      	mov	r7, r1
  4041f6:	4690      	mov	r8, r2
  4041f8:	461e      	mov	r6, r3
  4041fa:	b115      	cbz	r5, 404202 <setvbuf+0x1a>
  4041fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041fe:	2b00      	cmp	r3, #0
  404200:	d064      	beq.n	4042cc <setvbuf+0xe4>
  404202:	f1b8 0f02 	cmp.w	r8, #2
  404206:	d006      	beq.n	404216 <setvbuf+0x2e>
  404208:	f1b8 0f01 	cmp.w	r8, #1
  40420c:	f200 809f 	bhi.w	40434e <setvbuf+0x166>
  404210:	2e00      	cmp	r6, #0
  404212:	f2c0 809c 	blt.w	40434e <setvbuf+0x166>
  404216:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404218:	07d8      	lsls	r0, r3, #31
  40421a:	d534      	bpl.n	404286 <setvbuf+0x9e>
  40421c:	4621      	mov	r1, r4
  40421e:	4628      	mov	r0, r5
  404220:	f001 f8fa 	bl	405418 <_fflush_r>
  404224:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404226:	b141      	cbz	r1, 40423a <setvbuf+0x52>
  404228:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40422c:	4299      	cmp	r1, r3
  40422e:	d002      	beq.n	404236 <setvbuf+0x4e>
  404230:	4628      	mov	r0, r5
  404232:	f001 fa6f 	bl	405714 <_free_r>
  404236:	2300      	movs	r3, #0
  404238:	6323      	str	r3, [r4, #48]	; 0x30
  40423a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40423e:	2200      	movs	r2, #0
  404240:	61a2      	str	r2, [r4, #24]
  404242:	6062      	str	r2, [r4, #4]
  404244:	061a      	lsls	r2, r3, #24
  404246:	d43a      	bmi.n	4042be <setvbuf+0xd6>
  404248:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40424c:	f023 0303 	bic.w	r3, r3, #3
  404250:	f1b8 0f02 	cmp.w	r8, #2
  404254:	81a3      	strh	r3, [r4, #12]
  404256:	d01d      	beq.n	404294 <setvbuf+0xac>
  404258:	ab01      	add	r3, sp, #4
  40425a:	466a      	mov	r2, sp
  40425c:	4621      	mov	r1, r4
  40425e:	4628      	mov	r0, r5
  404260:	f001 fcf6 	bl	405c50 <__swhatbuf_r>
  404264:	89a3      	ldrh	r3, [r4, #12]
  404266:	4318      	orrs	r0, r3
  404268:	81a0      	strh	r0, [r4, #12]
  40426a:	2e00      	cmp	r6, #0
  40426c:	d132      	bne.n	4042d4 <setvbuf+0xec>
  40426e:	9e00      	ldr	r6, [sp, #0]
  404270:	4630      	mov	r0, r6
  404272:	f7ff fbf3 	bl	403a5c <malloc>
  404276:	4607      	mov	r7, r0
  404278:	2800      	cmp	r0, #0
  40427a:	d06b      	beq.n	404354 <setvbuf+0x16c>
  40427c:	89a3      	ldrh	r3, [r4, #12]
  40427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404282:	81a3      	strh	r3, [r4, #12]
  404284:	e028      	b.n	4042d8 <setvbuf+0xf0>
  404286:	89a3      	ldrh	r3, [r4, #12]
  404288:	0599      	lsls	r1, r3, #22
  40428a:	d4c7      	bmi.n	40421c <setvbuf+0x34>
  40428c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40428e:	f001 fcdb 	bl	405c48 <__retarget_lock_acquire_recursive>
  404292:	e7c3      	b.n	40421c <setvbuf+0x34>
  404294:	2500      	movs	r5, #0
  404296:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404298:	2600      	movs	r6, #0
  40429a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40429e:	f043 0302 	orr.w	r3, r3, #2
  4042a2:	2001      	movs	r0, #1
  4042a4:	60a6      	str	r6, [r4, #8]
  4042a6:	07ce      	lsls	r6, r1, #31
  4042a8:	81a3      	strh	r3, [r4, #12]
  4042aa:	6022      	str	r2, [r4, #0]
  4042ac:	6122      	str	r2, [r4, #16]
  4042ae:	6160      	str	r0, [r4, #20]
  4042b0:	d401      	bmi.n	4042b6 <setvbuf+0xce>
  4042b2:	0598      	lsls	r0, r3, #22
  4042b4:	d53e      	bpl.n	404334 <setvbuf+0x14c>
  4042b6:	4628      	mov	r0, r5
  4042b8:	b003      	add	sp, #12
  4042ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042be:	6921      	ldr	r1, [r4, #16]
  4042c0:	4628      	mov	r0, r5
  4042c2:	f001 fa27 	bl	405714 <_free_r>
  4042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042ca:	e7bd      	b.n	404248 <setvbuf+0x60>
  4042cc:	4628      	mov	r0, r5
  4042ce:	f001 f8fb 	bl	4054c8 <__sinit>
  4042d2:	e796      	b.n	404202 <setvbuf+0x1a>
  4042d4:	2f00      	cmp	r7, #0
  4042d6:	d0cb      	beq.n	404270 <setvbuf+0x88>
  4042d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4042da:	2b00      	cmp	r3, #0
  4042dc:	d033      	beq.n	404346 <setvbuf+0x15e>
  4042de:	9b00      	ldr	r3, [sp, #0]
  4042e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042e4:	6027      	str	r7, [r4, #0]
  4042e6:	429e      	cmp	r6, r3
  4042e8:	bf1c      	itt	ne
  4042ea:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4042ee:	81a2      	strhne	r2, [r4, #12]
  4042f0:	f1b8 0f01 	cmp.w	r8, #1
  4042f4:	bf04      	itt	eq
  4042f6:	f042 0201 	orreq.w	r2, r2, #1
  4042fa:	81a2      	strheq	r2, [r4, #12]
  4042fc:	b292      	uxth	r2, r2
  4042fe:	f012 0308 	ands.w	r3, r2, #8
  404302:	6127      	str	r7, [r4, #16]
  404304:	6166      	str	r6, [r4, #20]
  404306:	d00e      	beq.n	404326 <setvbuf+0x13e>
  404308:	07d1      	lsls	r1, r2, #31
  40430a:	d51a      	bpl.n	404342 <setvbuf+0x15a>
  40430c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40430e:	4276      	negs	r6, r6
  404310:	2300      	movs	r3, #0
  404312:	f015 0501 	ands.w	r5, r5, #1
  404316:	61a6      	str	r6, [r4, #24]
  404318:	60a3      	str	r3, [r4, #8]
  40431a:	d009      	beq.n	404330 <setvbuf+0x148>
  40431c:	2500      	movs	r5, #0
  40431e:	4628      	mov	r0, r5
  404320:	b003      	add	sp, #12
  404322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404326:	60a3      	str	r3, [r4, #8]
  404328:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40432a:	f015 0501 	ands.w	r5, r5, #1
  40432e:	d1f5      	bne.n	40431c <setvbuf+0x134>
  404330:	0593      	lsls	r3, r2, #22
  404332:	d4c0      	bmi.n	4042b6 <setvbuf+0xce>
  404334:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404336:	f001 fc89 	bl	405c4c <__retarget_lock_release_recursive>
  40433a:	4628      	mov	r0, r5
  40433c:	b003      	add	sp, #12
  40433e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404342:	60a6      	str	r6, [r4, #8]
  404344:	e7f0      	b.n	404328 <setvbuf+0x140>
  404346:	4628      	mov	r0, r5
  404348:	f001 f8be 	bl	4054c8 <__sinit>
  40434c:	e7c7      	b.n	4042de <setvbuf+0xf6>
  40434e:	f04f 35ff 	mov.w	r5, #4294967295
  404352:	e7b0      	b.n	4042b6 <setvbuf+0xce>
  404354:	f8dd 9000 	ldr.w	r9, [sp]
  404358:	45b1      	cmp	r9, r6
  40435a:	d004      	beq.n	404366 <setvbuf+0x17e>
  40435c:	4648      	mov	r0, r9
  40435e:	f7ff fb7d 	bl	403a5c <malloc>
  404362:	4607      	mov	r7, r0
  404364:	b920      	cbnz	r0, 404370 <setvbuf+0x188>
  404366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40436a:	f04f 35ff 	mov.w	r5, #4294967295
  40436e:	e792      	b.n	404296 <setvbuf+0xae>
  404370:	464e      	mov	r6, r9
  404372:	e783      	b.n	40427c <setvbuf+0x94>
  404374:	2040000c 	.word	0x2040000c
	...

00404380 <strlen>:
  404380:	f890 f000 	pld	[r0]
  404384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404388:	f020 0107 	bic.w	r1, r0, #7
  40438c:	f06f 0c00 	mvn.w	ip, #0
  404390:	f010 0407 	ands.w	r4, r0, #7
  404394:	f891 f020 	pld	[r1, #32]
  404398:	f040 8049 	bne.w	40442e <strlen+0xae>
  40439c:	f04f 0400 	mov.w	r4, #0
  4043a0:	f06f 0007 	mvn.w	r0, #7
  4043a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4043ac:	f100 0008 	add.w	r0, r0, #8
  4043b0:	fa82 f24c 	uadd8	r2, r2, ip
  4043b4:	faa4 f28c 	sel	r2, r4, ip
  4043b8:	fa83 f34c 	uadd8	r3, r3, ip
  4043bc:	faa2 f38c 	sel	r3, r2, ip
  4043c0:	bb4b      	cbnz	r3, 404416 <strlen+0x96>
  4043c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4043c6:	fa82 f24c 	uadd8	r2, r2, ip
  4043ca:	f100 0008 	add.w	r0, r0, #8
  4043ce:	faa4 f28c 	sel	r2, r4, ip
  4043d2:	fa83 f34c 	uadd8	r3, r3, ip
  4043d6:	faa2 f38c 	sel	r3, r2, ip
  4043da:	b9e3      	cbnz	r3, 404416 <strlen+0x96>
  4043dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043e0:	fa82 f24c 	uadd8	r2, r2, ip
  4043e4:	f100 0008 	add.w	r0, r0, #8
  4043e8:	faa4 f28c 	sel	r2, r4, ip
  4043ec:	fa83 f34c 	uadd8	r3, r3, ip
  4043f0:	faa2 f38c 	sel	r3, r2, ip
  4043f4:	b97b      	cbnz	r3, 404416 <strlen+0x96>
  4043f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043fa:	f101 0120 	add.w	r1, r1, #32
  4043fe:	fa82 f24c 	uadd8	r2, r2, ip
  404402:	f100 0008 	add.w	r0, r0, #8
  404406:	faa4 f28c 	sel	r2, r4, ip
  40440a:	fa83 f34c 	uadd8	r3, r3, ip
  40440e:	faa2 f38c 	sel	r3, r2, ip
  404412:	2b00      	cmp	r3, #0
  404414:	d0c6      	beq.n	4043a4 <strlen+0x24>
  404416:	2a00      	cmp	r2, #0
  404418:	bf04      	itt	eq
  40441a:	3004      	addeq	r0, #4
  40441c:	461a      	moveq	r2, r3
  40441e:	ba12      	rev	r2, r2
  404420:	fab2 f282 	clz	r2, r2
  404424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40442c:	4770      	bx	lr
  40442e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404432:	f004 0503 	and.w	r5, r4, #3
  404436:	f1c4 0000 	rsb	r0, r4, #0
  40443a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40443e:	f014 0f04 	tst.w	r4, #4
  404442:	f891 f040 	pld	[r1, #64]	; 0x40
  404446:	fa0c f505 	lsl.w	r5, ip, r5
  40444a:	ea62 0205 	orn	r2, r2, r5
  40444e:	bf1c      	itt	ne
  404450:	ea63 0305 	ornne	r3, r3, r5
  404454:	4662      	movne	r2, ip
  404456:	f04f 0400 	mov.w	r4, #0
  40445a:	e7a9      	b.n	4043b0 <strlen+0x30>

0040445c <__sprint_r.part.0>:
  40445c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404460:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404462:	049c      	lsls	r4, r3, #18
  404464:	4693      	mov	fp, r2
  404466:	d52f      	bpl.n	4044c8 <__sprint_r.part.0+0x6c>
  404468:	6893      	ldr	r3, [r2, #8]
  40446a:	6812      	ldr	r2, [r2, #0]
  40446c:	b353      	cbz	r3, 4044c4 <__sprint_r.part.0+0x68>
  40446e:	460e      	mov	r6, r1
  404470:	4607      	mov	r7, r0
  404472:	f102 0908 	add.w	r9, r2, #8
  404476:	e919 0420 	ldmdb	r9, {r5, sl}
  40447a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40447e:	d017      	beq.n	4044b0 <__sprint_r.part.0+0x54>
  404480:	3d04      	subs	r5, #4
  404482:	2400      	movs	r4, #0
  404484:	e001      	b.n	40448a <__sprint_r.part.0+0x2e>
  404486:	45a0      	cmp	r8, r4
  404488:	d010      	beq.n	4044ac <__sprint_r.part.0+0x50>
  40448a:	4632      	mov	r2, r6
  40448c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404490:	4638      	mov	r0, r7
  404492:	f001 f8bb 	bl	40560c <_fputwc_r>
  404496:	1c43      	adds	r3, r0, #1
  404498:	f104 0401 	add.w	r4, r4, #1
  40449c:	d1f3      	bne.n	404486 <__sprint_r.part.0+0x2a>
  40449e:	2300      	movs	r3, #0
  4044a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4044a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4044a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4044b0:	f02a 0a03 	bic.w	sl, sl, #3
  4044b4:	eba3 030a 	sub.w	r3, r3, sl
  4044b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4044bc:	f109 0908 	add.w	r9, r9, #8
  4044c0:	2b00      	cmp	r3, #0
  4044c2:	d1d8      	bne.n	404476 <__sprint_r.part.0+0x1a>
  4044c4:	2000      	movs	r0, #0
  4044c6:	e7ea      	b.n	40449e <__sprint_r.part.0+0x42>
  4044c8:	f001 fa0a 	bl	4058e0 <__sfvwrite_r>
  4044cc:	2300      	movs	r3, #0
  4044ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4044d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4044d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044da:	bf00      	nop

004044dc <_vfiprintf_r>:
  4044dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044e0:	b0ad      	sub	sp, #180	; 0xb4
  4044e2:	461d      	mov	r5, r3
  4044e4:	468b      	mov	fp, r1
  4044e6:	4690      	mov	r8, r2
  4044e8:	9307      	str	r3, [sp, #28]
  4044ea:	9006      	str	r0, [sp, #24]
  4044ec:	b118      	cbz	r0, 4044f6 <_vfiprintf_r+0x1a>
  4044ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4044f0:	2b00      	cmp	r3, #0
  4044f2:	f000 80f3 	beq.w	4046dc <_vfiprintf_r+0x200>
  4044f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4044fe:	07df      	lsls	r7, r3, #31
  404500:	b281      	uxth	r1, r0
  404502:	d402      	bmi.n	40450a <_vfiprintf_r+0x2e>
  404504:	058e      	lsls	r6, r1, #22
  404506:	f140 80fc 	bpl.w	404702 <_vfiprintf_r+0x226>
  40450a:	048c      	lsls	r4, r1, #18
  40450c:	d40a      	bmi.n	404524 <_vfiprintf_r+0x48>
  40450e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404512:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40451a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40451e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404522:	b289      	uxth	r1, r1
  404524:	0708      	lsls	r0, r1, #28
  404526:	f140 80b3 	bpl.w	404690 <_vfiprintf_r+0x1b4>
  40452a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40452e:	2b00      	cmp	r3, #0
  404530:	f000 80ae 	beq.w	404690 <_vfiprintf_r+0x1b4>
  404534:	f001 031a 	and.w	r3, r1, #26
  404538:	2b0a      	cmp	r3, #10
  40453a:	f000 80b5 	beq.w	4046a8 <_vfiprintf_r+0x1cc>
  40453e:	2300      	movs	r3, #0
  404540:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404544:	930b      	str	r3, [sp, #44]	; 0x2c
  404546:	9311      	str	r3, [sp, #68]	; 0x44
  404548:	9310      	str	r3, [sp, #64]	; 0x40
  40454a:	9303      	str	r3, [sp, #12]
  40454c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404550:	46ca      	mov	sl, r9
  404552:	f8cd b010 	str.w	fp, [sp, #16]
  404556:	f898 3000 	ldrb.w	r3, [r8]
  40455a:	4644      	mov	r4, r8
  40455c:	b1fb      	cbz	r3, 40459e <_vfiprintf_r+0xc2>
  40455e:	2b25      	cmp	r3, #37	; 0x25
  404560:	d102      	bne.n	404568 <_vfiprintf_r+0x8c>
  404562:	e01c      	b.n	40459e <_vfiprintf_r+0xc2>
  404564:	2b25      	cmp	r3, #37	; 0x25
  404566:	d003      	beq.n	404570 <_vfiprintf_r+0x94>
  404568:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40456c:	2b00      	cmp	r3, #0
  40456e:	d1f9      	bne.n	404564 <_vfiprintf_r+0x88>
  404570:	eba4 0508 	sub.w	r5, r4, r8
  404574:	b19d      	cbz	r5, 40459e <_vfiprintf_r+0xc2>
  404576:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404578:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40457a:	f8ca 8000 	str.w	r8, [sl]
  40457e:	3301      	adds	r3, #1
  404580:	442a      	add	r2, r5
  404582:	2b07      	cmp	r3, #7
  404584:	f8ca 5004 	str.w	r5, [sl, #4]
  404588:	9211      	str	r2, [sp, #68]	; 0x44
  40458a:	9310      	str	r3, [sp, #64]	; 0x40
  40458c:	dd7a      	ble.n	404684 <_vfiprintf_r+0x1a8>
  40458e:	2a00      	cmp	r2, #0
  404590:	f040 84b0 	bne.w	404ef4 <_vfiprintf_r+0xa18>
  404594:	9b03      	ldr	r3, [sp, #12]
  404596:	9210      	str	r2, [sp, #64]	; 0x40
  404598:	442b      	add	r3, r5
  40459a:	46ca      	mov	sl, r9
  40459c:	9303      	str	r3, [sp, #12]
  40459e:	7823      	ldrb	r3, [r4, #0]
  4045a0:	2b00      	cmp	r3, #0
  4045a2:	f000 83e0 	beq.w	404d66 <_vfiprintf_r+0x88a>
  4045a6:	2000      	movs	r0, #0
  4045a8:	f04f 0300 	mov.w	r3, #0
  4045ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4045b0:	f104 0801 	add.w	r8, r4, #1
  4045b4:	7862      	ldrb	r2, [r4, #1]
  4045b6:	4605      	mov	r5, r0
  4045b8:	4606      	mov	r6, r0
  4045ba:	4603      	mov	r3, r0
  4045bc:	f04f 34ff 	mov.w	r4, #4294967295
  4045c0:	f108 0801 	add.w	r8, r8, #1
  4045c4:	f1a2 0120 	sub.w	r1, r2, #32
  4045c8:	2958      	cmp	r1, #88	; 0x58
  4045ca:	f200 82de 	bhi.w	404b8a <_vfiprintf_r+0x6ae>
  4045ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4045d2:	0221      	.short	0x0221
  4045d4:	02dc02dc 	.word	0x02dc02dc
  4045d8:	02dc0229 	.word	0x02dc0229
  4045dc:	02dc02dc 	.word	0x02dc02dc
  4045e0:	02dc02dc 	.word	0x02dc02dc
  4045e4:	028902dc 	.word	0x028902dc
  4045e8:	02dc0295 	.word	0x02dc0295
  4045ec:	02bd00a2 	.word	0x02bd00a2
  4045f0:	019f02dc 	.word	0x019f02dc
  4045f4:	01a401a4 	.word	0x01a401a4
  4045f8:	01a401a4 	.word	0x01a401a4
  4045fc:	01a401a4 	.word	0x01a401a4
  404600:	01a401a4 	.word	0x01a401a4
  404604:	02dc01a4 	.word	0x02dc01a4
  404608:	02dc02dc 	.word	0x02dc02dc
  40460c:	02dc02dc 	.word	0x02dc02dc
  404610:	02dc02dc 	.word	0x02dc02dc
  404614:	02dc02dc 	.word	0x02dc02dc
  404618:	01b202dc 	.word	0x01b202dc
  40461c:	02dc02dc 	.word	0x02dc02dc
  404620:	02dc02dc 	.word	0x02dc02dc
  404624:	02dc02dc 	.word	0x02dc02dc
  404628:	02dc02dc 	.word	0x02dc02dc
  40462c:	02dc02dc 	.word	0x02dc02dc
  404630:	02dc0197 	.word	0x02dc0197
  404634:	02dc02dc 	.word	0x02dc02dc
  404638:	02dc02dc 	.word	0x02dc02dc
  40463c:	02dc019b 	.word	0x02dc019b
  404640:	025302dc 	.word	0x025302dc
  404644:	02dc02dc 	.word	0x02dc02dc
  404648:	02dc02dc 	.word	0x02dc02dc
  40464c:	02dc02dc 	.word	0x02dc02dc
  404650:	02dc02dc 	.word	0x02dc02dc
  404654:	02dc02dc 	.word	0x02dc02dc
  404658:	021b025a 	.word	0x021b025a
  40465c:	02dc02dc 	.word	0x02dc02dc
  404660:	026e02dc 	.word	0x026e02dc
  404664:	02dc021b 	.word	0x02dc021b
  404668:	027302dc 	.word	0x027302dc
  40466c:	01f502dc 	.word	0x01f502dc
  404670:	02090182 	.word	0x02090182
  404674:	02dc02d7 	.word	0x02dc02d7
  404678:	02dc029a 	.word	0x02dc029a
  40467c:	02dc00a7 	.word	0x02dc00a7
  404680:	022e02dc 	.word	0x022e02dc
  404684:	f10a 0a08 	add.w	sl, sl, #8
  404688:	9b03      	ldr	r3, [sp, #12]
  40468a:	442b      	add	r3, r5
  40468c:	9303      	str	r3, [sp, #12]
  40468e:	e786      	b.n	40459e <_vfiprintf_r+0xc2>
  404690:	4659      	mov	r1, fp
  404692:	9806      	ldr	r0, [sp, #24]
  404694:	f000 fdac 	bl	4051f0 <__swsetup_r>
  404698:	bb18      	cbnz	r0, 4046e2 <_vfiprintf_r+0x206>
  40469a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40469e:	f001 031a 	and.w	r3, r1, #26
  4046a2:	2b0a      	cmp	r3, #10
  4046a4:	f47f af4b 	bne.w	40453e <_vfiprintf_r+0x62>
  4046a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4046ac:	2b00      	cmp	r3, #0
  4046ae:	f6ff af46 	blt.w	40453e <_vfiprintf_r+0x62>
  4046b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046b6:	07db      	lsls	r3, r3, #31
  4046b8:	d405      	bmi.n	4046c6 <_vfiprintf_r+0x1ea>
  4046ba:	058f      	lsls	r7, r1, #22
  4046bc:	d403      	bmi.n	4046c6 <_vfiprintf_r+0x1ea>
  4046be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4046c2:	f001 fac3 	bl	405c4c <__retarget_lock_release_recursive>
  4046c6:	462b      	mov	r3, r5
  4046c8:	4642      	mov	r2, r8
  4046ca:	4659      	mov	r1, fp
  4046cc:	9806      	ldr	r0, [sp, #24]
  4046ce:	f000 fd4d 	bl	40516c <__sbprintf>
  4046d2:	9003      	str	r0, [sp, #12]
  4046d4:	9803      	ldr	r0, [sp, #12]
  4046d6:	b02d      	add	sp, #180	; 0xb4
  4046d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046dc:	f000 fef4 	bl	4054c8 <__sinit>
  4046e0:	e709      	b.n	4044f6 <_vfiprintf_r+0x1a>
  4046e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046e6:	07d9      	lsls	r1, r3, #31
  4046e8:	d404      	bmi.n	4046f4 <_vfiprintf_r+0x218>
  4046ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4046ee:	059a      	lsls	r2, r3, #22
  4046f0:	f140 84aa 	bpl.w	405048 <_vfiprintf_r+0xb6c>
  4046f4:	f04f 33ff 	mov.w	r3, #4294967295
  4046f8:	9303      	str	r3, [sp, #12]
  4046fa:	9803      	ldr	r0, [sp, #12]
  4046fc:	b02d      	add	sp, #180	; 0xb4
  4046fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404702:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404706:	f001 fa9f 	bl	405c48 <__retarget_lock_acquire_recursive>
  40470a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40470e:	b281      	uxth	r1, r0
  404710:	e6fb      	b.n	40450a <_vfiprintf_r+0x2e>
  404712:	4276      	negs	r6, r6
  404714:	9207      	str	r2, [sp, #28]
  404716:	f043 0304 	orr.w	r3, r3, #4
  40471a:	f898 2000 	ldrb.w	r2, [r8]
  40471e:	e74f      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404720:	9608      	str	r6, [sp, #32]
  404722:	069e      	lsls	r6, r3, #26
  404724:	f100 8450 	bmi.w	404fc8 <_vfiprintf_r+0xaec>
  404728:	9907      	ldr	r1, [sp, #28]
  40472a:	06dd      	lsls	r5, r3, #27
  40472c:	460a      	mov	r2, r1
  40472e:	f100 83ef 	bmi.w	404f10 <_vfiprintf_r+0xa34>
  404732:	0658      	lsls	r0, r3, #25
  404734:	f140 83ec 	bpl.w	404f10 <_vfiprintf_r+0xa34>
  404738:	880e      	ldrh	r6, [r1, #0]
  40473a:	3104      	adds	r1, #4
  40473c:	2700      	movs	r7, #0
  40473e:	2201      	movs	r2, #1
  404740:	9107      	str	r1, [sp, #28]
  404742:	f04f 0100 	mov.w	r1, #0
  404746:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40474a:	2500      	movs	r5, #0
  40474c:	1c61      	adds	r1, r4, #1
  40474e:	f000 8116 	beq.w	40497e <_vfiprintf_r+0x4a2>
  404752:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404756:	9102      	str	r1, [sp, #8]
  404758:	ea56 0107 	orrs.w	r1, r6, r7
  40475c:	f040 8114 	bne.w	404988 <_vfiprintf_r+0x4ac>
  404760:	2c00      	cmp	r4, #0
  404762:	f040 835c 	bne.w	404e1e <_vfiprintf_r+0x942>
  404766:	2a00      	cmp	r2, #0
  404768:	f040 83b7 	bne.w	404eda <_vfiprintf_r+0x9fe>
  40476c:	f013 0301 	ands.w	r3, r3, #1
  404770:	9305      	str	r3, [sp, #20]
  404772:	f000 8457 	beq.w	405024 <_vfiprintf_r+0xb48>
  404776:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40477a:	2330      	movs	r3, #48	; 0x30
  40477c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404780:	9b05      	ldr	r3, [sp, #20]
  404782:	42a3      	cmp	r3, r4
  404784:	bfb8      	it	lt
  404786:	4623      	movlt	r3, r4
  404788:	9301      	str	r3, [sp, #4]
  40478a:	b10d      	cbz	r5, 404790 <_vfiprintf_r+0x2b4>
  40478c:	3301      	adds	r3, #1
  40478e:	9301      	str	r3, [sp, #4]
  404790:	9b02      	ldr	r3, [sp, #8]
  404792:	f013 0302 	ands.w	r3, r3, #2
  404796:	9309      	str	r3, [sp, #36]	; 0x24
  404798:	d002      	beq.n	4047a0 <_vfiprintf_r+0x2c4>
  40479a:	9b01      	ldr	r3, [sp, #4]
  40479c:	3302      	adds	r3, #2
  40479e:	9301      	str	r3, [sp, #4]
  4047a0:	9b02      	ldr	r3, [sp, #8]
  4047a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4047a6:	930a      	str	r3, [sp, #40]	; 0x28
  4047a8:	f040 8217 	bne.w	404bda <_vfiprintf_r+0x6fe>
  4047ac:	9b08      	ldr	r3, [sp, #32]
  4047ae:	9a01      	ldr	r2, [sp, #4]
  4047b0:	1a9d      	subs	r5, r3, r2
  4047b2:	2d00      	cmp	r5, #0
  4047b4:	f340 8211 	ble.w	404bda <_vfiprintf_r+0x6fe>
  4047b8:	2d10      	cmp	r5, #16
  4047ba:	f340 8490 	ble.w	4050de <_vfiprintf_r+0xc02>
  4047be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4047c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4047c2:	4ec4      	ldr	r6, [pc, #784]	; (404ad4 <_vfiprintf_r+0x5f8>)
  4047c4:	46d6      	mov	lr, sl
  4047c6:	2710      	movs	r7, #16
  4047c8:	46a2      	mov	sl, r4
  4047ca:	4619      	mov	r1, r3
  4047cc:	9c06      	ldr	r4, [sp, #24]
  4047ce:	e007      	b.n	4047e0 <_vfiprintf_r+0x304>
  4047d0:	f101 0c02 	add.w	ip, r1, #2
  4047d4:	f10e 0e08 	add.w	lr, lr, #8
  4047d8:	4601      	mov	r1, r0
  4047da:	3d10      	subs	r5, #16
  4047dc:	2d10      	cmp	r5, #16
  4047de:	dd11      	ble.n	404804 <_vfiprintf_r+0x328>
  4047e0:	1c48      	adds	r0, r1, #1
  4047e2:	3210      	adds	r2, #16
  4047e4:	2807      	cmp	r0, #7
  4047e6:	9211      	str	r2, [sp, #68]	; 0x44
  4047e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4047ec:	9010      	str	r0, [sp, #64]	; 0x40
  4047ee:	ddef      	ble.n	4047d0 <_vfiprintf_r+0x2f4>
  4047f0:	2a00      	cmp	r2, #0
  4047f2:	f040 81e4 	bne.w	404bbe <_vfiprintf_r+0x6e2>
  4047f6:	3d10      	subs	r5, #16
  4047f8:	2d10      	cmp	r5, #16
  4047fa:	4611      	mov	r1, r2
  4047fc:	f04f 0c01 	mov.w	ip, #1
  404800:	46ce      	mov	lr, r9
  404802:	dced      	bgt.n	4047e0 <_vfiprintf_r+0x304>
  404804:	4654      	mov	r4, sl
  404806:	4661      	mov	r1, ip
  404808:	46f2      	mov	sl, lr
  40480a:	442a      	add	r2, r5
  40480c:	2907      	cmp	r1, #7
  40480e:	9211      	str	r2, [sp, #68]	; 0x44
  404810:	f8ca 6000 	str.w	r6, [sl]
  404814:	f8ca 5004 	str.w	r5, [sl, #4]
  404818:	9110      	str	r1, [sp, #64]	; 0x40
  40481a:	f300 82ec 	bgt.w	404df6 <_vfiprintf_r+0x91a>
  40481e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404822:	f10a 0a08 	add.w	sl, sl, #8
  404826:	1c48      	adds	r0, r1, #1
  404828:	2d00      	cmp	r5, #0
  40482a:	f040 81de 	bne.w	404bea <_vfiprintf_r+0x70e>
  40482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404830:	2b00      	cmp	r3, #0
  404832:	f000 81f8 	beq.w	404c26 <_vfiprintf_r+0x74a>
  404836:	3202      	adds	r2, #2
  404838:	a90e      	add	r1, sp, #56	; 0x38
  40483a:	2302      	movs	r3, #2
  40483c:	2807      	cmp	r0, #7
  40483e:	9211      	str	r2, [sp, #68]	; 0x44
  404840:	9010      	str	r0, [sp, #64]	; 0x40
  404842:	e88a 000a 	stmia.w	sl, {r1, r3}
  404846:	f340 81ea 	ble.w	404c1e <_vfiprintf_r+0x742>
  40484a:	2a00      	cmp	r2, #0
  40484c:	f040 838c 	bne.w	404f68 <_vfiprintf_r+0xa8c>
  404850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404852:	2b80      	cmp	r3, #128	; 0x80
  404854:	f04f 0001 	mov.w	r0, #1
  404858:	4611      	mov	r1, r2
  40485a:	46ca      	mov	sl, r9
  40485c:	f040 81e7 	bne.w	404c2e <_vfiprintf_r+0x752>
  404860:	9b08      	ldr	r3, [sp, #32]
  404862:	9d01      	ldr	r5, [sp, #4]
  404864:	1b5e      	subs	r6, r3, r5
  404866:	2e00      	cmp	r6, #0
  404868:	f340 81e1 	ble.w	404c2e <_vfiprintf_r+0x752>
  40486c:	2e10      	cmp	r6, #16
  40486e:	4d9a      	ldr	r5, [pc, #616]	; (404ad8 <_vfiprintf_r+0x5fc>)
  404870:	f340 8450 	ble.w	405114 <_vfiprintf_r+0xc38>
  404874:	46d4      	mov	ip, sl
  404876:	2710      	movs	r7, #16
  404878:	46a2      	mov	sl, r4
  40487a:	9c06      	ldr	r4, [sp, #24]
  40487c:	e007      	b.n	40488e <_vfiprintf_r+0x3b2>
  40487e:	f101 0e02 	add.w	lr, r1, #2
  404882:	f10c 0c08 	add.w	ip, ip, #8
  404886:	4601      	mov	r1, r0
  404888:	3e10      	subs	r6, #16
  40488a:	2e10      	cmp	r6, #16
  40488c:	dd11      	ble.n	4048b2 <_vfiprintf_r+0x3d6>
  40488e:	1c48      	adds	r0, r1, #1
  404890:	3210      	adds	r2, #16
  404892:	2807      	cmp	r0, #7
  404894:	9211      	str	r2, [sp, #68]	; 0x44
  404896:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40489a:	9010      	str	r0, [sp, #64]	; 0x40
  40489c:	ddef      	ble.n	40487e <_vfiprintf_r+0x3a2>
  40489e:	2a00      	cmp	r2, #0
  4048a0:	f040 829d 	bne.w	404dde <_vfiprintf_r+0x902>
  4048a4:	3e10      	subs	r6, #16
  4048a6:	2e10      	cmp	r6, #16
  4048a8:	f04f 0e01 	mov.w	lr, #1
  4048ac:	4611      	mov	r1, r2
  4048ae:	46cc      	mov	ip, r9
  4048b0:	dced      	bgt.n	40488e <_vfiprintf_r+0x3b2>
  4048b2:	4654      	mov	r4, sl
  4048b4:	46e2      	mov	sl, ip
  4048b6:	4432      	add	r2, r6
  4048b8:	f1be 0f07 	cmp.w	lr, #7
  4048bc:	9211      	str	r2, [sp, #68]	; 0x44
  4048be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4048c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4048c6:	f300 8369 	bgt.w	404f9c <_vfiprintf_r+0xac0>
  4048ca:	f10a 0a08 	add.w	sl, sl, #8
  4048ce:	f10e 0001 	add.w	r0, lr, #1
  4048d2:	4671      	mov	r1, lr
  4048d4:	e1ab      	b.n	404c2e <_vfiprintf_r+0x752>
  4048d6:	9608      	str	r6, [sp, #32]
  4048d8:	f013 0220 	ands.w	r2, r3, #32
  4048dc:	f040 838c 	bne.w	404ff8 <_vfiprintf_r+0xb1c>
  4048e0:	f013 0110 	ands.w	r1, r3, #16
  4048e4:	f040 831a 	bne.w	404f1c <_vfiprintf_r+0xa40>
  4048e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4048ec:	f000 8316 	beq.w	404f1c <_vfiprintf_r+0xa40>
  4048f0:	9807      	ldr	r0, [sp, #28]
  4048f2:	460a      	mov	r2, r1
  4048f4:	4601      	mov	r1, r0
  4048f6:	3104      	adds	r1, #4
  4048f8:	8806      	ldrh	r6, [r0, #0]
  4048fa:	9107      	str	r1, [sp, #28]
  4048fc:	2700      	movs	r7, #0
  4048fe:	e720      	b.n	404742 <_vfiprintf_r+0x266>
  404900:	9608      	str	r6, [sp, #32]
  404902:	f043 0310 	orr.w	r3, r3, #16
  404906:	e7e7      	b.n	4048d8 <_vfiprintf_r+0x3fc>
  404908:	9608      	str	r6, [sp, #32]
  40490a:	f043 0310 	orr.w	r3, r3, #16
  40490e:	e708      	b.n	404722 <_vfiprintf_r+0x246>
  404910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404914:	f898 2000 	ldrb.w	r2, [r8]
  404918:	e652      	b.n	4045c0 <_vfiprintf_r+0xe4>
  40491a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40491e:	2600      	movs	r6, #0
  404920:	f818 2b01 	ldrb.w	r2, [r8], #1
  404924:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404928:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40492c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404930:	2909      	cmp	r1, #9
  404932:	d9f5      	bls.n	404920 <_vfiprintf_r+0x444>
  404934:	e646      	b.n	4045c4 <_vfiprintf_r+0xe8>
  404936:	9608      	str	r6, [sp, #32]
  404938:	2800      	cmp	r0, #0
  40493a:	f040 8408 	bne.w	40514e <_vfiprintf_r+0xc72>
  40493e:	f043 0310 	orr.w	r3, r3, #16
  404942:	069e      	lsls	r6, r3, #26
  404944:	f100 834c 	bmi.w	404fe0 <_vfiprintf_r+0xb04>
  404948:	06dd      	lsls	r5, r3, #27
  40494a:	f100 82f3 	bmi.w	404f34 <_vfiprintf_r+0xa58>
  40494e:	0658      	lsls	r0, r3, #25
  404950:	f140 82f0 	bpl.w	404f34 <_vfiprintf_r+0xa58>
  404954:	9d07      	ldr	r5, [sp, #28]
  404956:	f9b5 6000 	ldrsh.w	r6, [r5]
  40495a:	462a      	mov	r2, r5
  40495c:	17f7      	asrs	r7, r6, #31
  40495e:	3204      	adds	r2, #4
  404960:	4630      	mov	r0, r6
  404962:	4639      	mov	r1, r7
  404964:	9207      	str	r2, [sp, #28]
  404966:	2800      	cmp	r0, #0
  404968:	f171 0200 	sbcs.w	r2, r1, #0
  40496c:	f2c0 835d 	blt.w	40502a <_vfiprintf_r+0xb4e>
  404970:	1c61      	adds	r1, r4, #1
  404972:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404976:	f04f 0201 	mov.w	r2, #1
  40497a:	f47f aeea 	bne.w	404752 <_vfiprintf_r+0x276>
  40497e:	ea56 0107 	orrs.w	r1, r6, r7
  404982:	f000 824d 	beq.w	404e20 <_vfiprintf_r+0x944>
  404986:	9302      	str	r3, [sp, #8]
  404988:	2a01      	cmp	r2, #1
  40498a:	f000 828c 	beq.w	404ea6 <_vfiprintf_r+0x9ca>
  40498e:	2a02      	cmp	r2, #2
  404990:	f040 825c 	bne.w	404e4c <_vfiprintf_r+0x970>
  404994:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404996:	46cb      	mov	fp, r9
  404998:	0933      	lsrs	r3, r6, #4
  40499a:	f006 010f 	and.w	r1, r6, #15
  40499e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4049a2:	093a      	lsrs	r2, r7, #4
  4049a4:	461e      	mov	r6, r3
  4049a6:	4617      	mov	r7, r2
  4049a8:	5c43      	ldrb	r3, [r0, r1]
  4049aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4049ae:	ea56 0307 	orrs.w	r3, r6, r7
  4049b2:	d1f1      	bne.n	404998 <_vfiprintf_r+0x4bc>
  4049b4:	eba9 030b 	sub.w	r3, r9, fp
  4049b8:	9305      	str	r3, [sp, #20]
  4049ba:	e6e1      	b.n	404780 <_vfiprintf_r+0x2a4>
  4049bc:	2800      	cmp	r0, #0
  4049be:	f040 83c0 	bne.w	405142 <_vfiprintf_r+0xc66>
  4049c2:	0699      	lsls	r1, r3, #26
  4049c4:	f100 8367 	bmi.w	405096 <_vfiprintf_r+0xbba>
  4049c8:	06da      	lsls	r2, r3, #27
  4049ca:	f100 80f1 	bmi.w	404bb0 <_vfiprintf_r+0x6d4>
  4049ce:	065b      	lsls	r3, r3, #25
  4049d0:	f140 80ee 	bpl.w	404bb0 <_vfiprintf_r+0x6d4>
  4049d4:	9a07      	ldr	r2, [sp, #28]
  4049d6:	6813      	ldr	r3, [r2, #0]
  4049d8:	3204      	adds	r2, #4
  4049da:	9207      	str	r2, [sp, #28]
  4049dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4049e0:	801a      	strh	r2, [r3, #0]
  4049e2:	e5b8      	b.n	404556 <_vfiprintf_r+0x7a>
  4049e4:	9807      	ldr	r0, [sp, #28]
  4049e6:	4a3d      	ldr	r2, [pc, #244]	; (404adc <_vfiprintf_r+0x600>)
  4049e8:	9608      	str	r6, [sp, #32]
  4049ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4049ec:	6806      	ldr	r6, [r0, #0]
  4049ee:	2278      	movs	r2, #120	; 0x78
  4049f0:	2130      	movs	r1, #48	; 0x30
  4049f2:	3004      	adds	r0, #4
  4049f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4049f8:	f043 0302 	orr.w	r3, r3, #2
  4049fc:	9007      	str	r0, [sp, #28]
  4049fe:	2700      	movs	r7, #0
  404a00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404a04:	2202      	movs	r2, #2
  404a06:	e69c      	b.n	404742 <_vfiprintf_r+0x266>
  404a08:	9608      	str	r6, [sp, #32]
  404a0a:	2800      	cmp	r0, #0
  404a0c:	d099      	beq.n	404942 <_vfiprintf_r+0x466>
  404a0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404a12:	e796      	b.n	404942 <_vfiprintf_r+0x466>
  404a14:	f898 2000 	ldrb.w	r2, [r8]
  404a18:	2d00      	cmp	r5, #0
  404a1a:	f47f add1 	bne.w	4045c0 <_vfiprintf_r+0xe4>
  404a1e:	2001      	movs	r0, #1
  404a20:	2520      	movs	r5, #32
  404a22:	e5cd      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404a24:	f043 0301 	orr.w	r3, r3, #1
  404a28:	f898 2000 	ldrb.w	r2, [r8]
  404a2c:	e5c8      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404a2e:	9608      	str	r6, [sp, #32]
  404a30:	2800      	cmp	r0, #0
  404a32:	f040 8393 	bne.w	40515c <_vfiprintf_r+0xc80>
  404a36:	4929      	ldr	r1, [pc, #164]	; (404adc <_vfiprintf_r+0x600>)
  404a38:	910b      	str	r1, [sp, #44]	; 0x2c
  404a3a:	069f      	lsls	r7, r3, #26
  404a3c:	f100 82e8 	bmi.w	405010 <_vfiprintf_r+0xb34>
  404a40:	9807      	ldr	r0, [sp, #28]
  404a42:	06de      	lsls	r6, r3, #27
  404a44:	4601      	mov	r1, r0
  404a46:	f100 8270 	bmi.w	404f2a <_vfiprintf_r+0xa4e>
  404a4a:	065d      	lsls	r5, r3, #25
  404a4c:	f140 826d 	bpl.w	404f2a <_vfiprintf_r+0xa4e>
  404a50:	3104      	adds	r1, #4
  404a52:	8806      	ldrh	r6, [r0, #0]
  404a54:	9107      	str	r1, [sp, #28]
  404a56:	2700      	movs	r7, #0
  404a58:	07d8      	lsls	r0, r3, #31
  404a5a:	f140 8222 	bpl.w	404ea2 <_vfiprintf_r+0x9c6>
  404a5e:	ea56 0107 	orrs.w	r1, r6, r7
  404a62:	f000 821e 	beq.w	404ea2 <_vfiprintf_r+0x9c6>
  404a66:	2130      	movs	r1, #48	; 0x30
  404a68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404a6c:	f043 0302 	orr.w	r3, r3, #2
  404a70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404a74:	2202      	movs	r2, #2
  404a76:	e664      	b.n	404742 <_vfiprintf_r+0x266>
  404a78:	9608      	str	r6, [sp, #32]
  404a7a:	2800      	cmp	r0, #0
  404a7c:	f040 836b 	bne.w	405156 <_vfiprintf_r+0xc7a>
  404a80:	4917      	ldr	r1, [pc, #92]	; (404ae0 <_vfiprintf_r+0x604>)
  404a82:	910b      	str	r1, [sp, #44]	; 0x2c
  404a84:	e7d9      	b.n	404a3a <_vfiprintf_r+0x55e>
  404a86:	9907      	ldr	r1, [sp, #28]
  404a88:	9608      	str	r6, [sp, #32]
  404a8a:	680a      	ldr	r2, [r1, #0]
  404a8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404a90:	f04f 0000 	mov.w	r0, #0
  404a94:	460a      	mov	r2, r1
  404a96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404a9a:	3204      	adds	r2, #4
  404a9c:	2001      	movs	r0, #1
  404a9e:	9001      	str	r0, [sp, #4]
  404aa0:	9207      	str	r2, [sp, #28]
  404aa2:	9005      	str	r0, [sp, #20]
  404aa4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404aa8:	9302      	str	r3, [sp, #8]
  404aaa:	2400      	movs	r4, #0
  404aac:	e670      	b.n	404790 <_vfiprintf_r+0x2b4>
  404aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ab2:	f898 2000 	ldrb.w	r2, [r8]
  404ab6:	e583      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404ab8:	f898 2000 	ldrb.w	r2, [r8]
  404abc:	2a6c      	cmp	r2, #108	; 0x6c
  404abe:	bf03      	ittte	eq
  404ac0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404ac4:	f043 0320 	orreq.w	r3, r3, #32
  404ac8:	f108 0801 	addeq.w	r8, r8, #1
  404acc:	f043 0310 	orrne.w	r3, r3, #16
  404ad0:	e576      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404ad2:	bf00      	nop
  404ad4:	00406a70 	.word	0x00406a70
  404ad8:	00406a80 	.word	0x00406a80
  404adc:	00406a54 	.word	0x00406a54
  404ae0:	00406a40 	.word	0x00406a40
  404ae4:	9907      	ldr	r1, [sp, #28]
  404ae6:	680e      	ldr	r6, [r1, #0]
  404ae8:	460a      	mov	r2, r1
  404aea:	2e00      	cmp	r6, #0
  404aec:	f102 0204 	add.w	r2, r2, #4
  404af0:	f6ff ae0f 	blt.w	404712 <_vfiprintf_r+0x236>
  404af4:	9207      	str	r2, [sp, #28]
  404af6:	f898 2000 	ldrb.w	r2, [r8]
  404afa:	e561      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404afc:	f898 2000 	ldrb.w	r2, [r8]
  404b00:	2001      	movs	r0, #1
  404b02:	252b      	movs	r5, #43	; 0x2b
  404b04:	e55c      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404b06:	9907      	ldr	r1, [sp, #28]
  404b08:	9608      	str	r6, [sp, #32]
  404b0a:	f8d1 b000 	ldr.w	fp, [r1]
  404b0e:	f04f 0200 	mov.w	r2, #0
  404b12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404b16:	1d0e      	adds	r6, r1, #4
  404b18:	f1bb 0f00 	cmp.w	fp, #0
  404b1c:	f000 82e5 	beq.w	4050ea <_vfiprintf_r+0xc0e>
  404b20:	1c67      	adds	r7, r4, #1
  404b22:	f000 82c4 	beq.w	4050ae <_vfiprintf_r+0xbd2>
  404b26:	4622      	mov	r2, r4
  404b28:	2100      	movs	r1, #0
  404b2a:	4658      	mov	r0, fp
  404b2c:	9301      	str	r3, [sp, #4]
  404b2e:	f001 f91f 	bl	405d70 <memchr>
  404b32:	9b01      	ldr	r3, [sp, #4]
  404b34:	2800      	cmp	r0, #0
  404b36:	f000 82e5 	beq.w	405104 <_vfiprintf_r+0xc28>
  404b3a:	eba0 020b 	sub.w	r2, r0, fp
  404b3e:	9205      	str	r2, [sp, #20]
  404b40:	9607      	str	r6, [sp, #28]
  404b42:	9302      	str	r3, [sp, #8]
  404b44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b48:	2400      	movs	r4, #0
  404b4a:	e619      	b.n	404780 <_vfiprintf_r+0x2a4>
  404b4c:	f898 2000 	ldrb.w	r2, [r8]
  404b50:	2a2a      	cmp	r2, #42	; 0x2a
  404b52:	f108 0701 	add.w	r7, r8, #1
  404b56:	f000 82e9 	beq.w	40512c <_vfiprintf_r+0xc50>
  404b5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b5e:	2909      	cmp	r1, #9
  404b60:	46b8      	mov	r8, r7
  404b62:	f04f 0400 	mov.w	r4, #0
  404b66:	f63f ad2d 	bhi.w	4045c4 <_vfiprintf_r+0xe8>
  404b6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404b6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404b76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b7a:	2909      	cmp	r1, #9
  404b7c:	d9f5      	bls.n	404b6a <_vfiprintf_r+0x68e>
  404b7e:	e521      	b.n	4045c4 <_vfiprintf_r+0xe8>
  404b80:	f043 0320 	orr.w	r3, r3, #32
  404b84:	f898 2000 	ldrb.w	r2, [r8]
  404b88:	e51a      	b.n	4045c0 <_vfiprintf_r+0xe4>
  404b8a:	9608      	str	r6, [sp, #32]
  404b8c:	2800      	cmp	r0, #0
  404b8e:	f040 82db 	bne.w	405148 <_vfiprintf_r+0xc6c>
  404b92:	2a00      	cmp	r2, #0
  404b94:	f000 80e7 	beq.w	404d66 <_vfiprintf_r+0x88a>
  404b98:	2101      	movs	r1, #1
  404b9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404b9e:	f04f 0200 	mov.w	r2, #0
  404ba2:	9101      	str	r1, [sp, #4]
  404ba4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404ba8:	9105      	str	r1, [sp, #20]
  404baa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404bae:	e77b      	b.n	404aa8 <_vfiprintf_r+0x5cc>
  404bb0:	9a07      	ldr	r2, [sp, #28]
  404bb2:	6813      	ldr	r3, [r2, #0]
  404bb4:	3204      	adds	r2, #4
  404bb6:	9207      	str	r2, [sp, #28]
  404bb8:	9a03      	ldr	r2, [sp, #12]
  404bba:	601a      	str	r2, [r3, #0]
  404bbc:	e4cb      	b.n	404556 <_vfiprintf_r+0x7a>
  404bbe:	aa0f      	add	r2, sp, #60	; 0x3c
  404bc0:	9904      	ldr	r1, [sp, #16]
  404bc2:	4620      	mov	r0, r4
  404bc4:	f7ff fc4a 	bl	40445c <__sprint_r.part.0>
  404bc8:	2800      	cmp	r0, #0
  404bca:	f040 8139 	bne.w	404e40 <_vfiprintf_r+0x964>
  404bce:	9910      	ldr	r1, [sp, #64]	; 0x40
  404bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bd2:	f101 0c01 	add.w	ip, r1, #1
  404bd6:	46ce      	mov	lr, r9
  404bd8:	e5ff      	b.n	4047da <_vfiprintf_r+0x2fe>
  404bda:	9910      	ldr	r1, [sp, #64]	; 0x40
  404bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bde:	1c48      	adds	r0, r1, #1
  404be0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404be4:	2d00      	cmp	r5, #0
  404be6:	f43f ae22 	beq.w	40482e <_vfiprintf_r+0x352>
  404bea:	3201      	adds	r2, #1
  404bec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404bf0:	2101      	movs	r1, #1
  404bf2:	2807      	cmp	r0, #7
  404bf4:	9211      	str	r2, [sp, #68]	; 0x44
  404bf6:	9010      	str	r0, [sp, #64]	; 0x40
  404bf8:	f8ca 5000 	str.w	r5, [sl]
  404bfc:	f8ca 1004 	str.w	r1, [sl, #4]
  404c00:	f340 8108 	ble.w	404e14 <_vfiprintf_r+0x938>
  404c04:	2a00      	cmp	r2, #0
  404c06:	f040 81bc 	bne.w	404f82 <_vfiprintf_r+0xaa6>
  404c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c0c:	2b00      	cmp	r3, #0
  404c0e:	f43f ae1f 	beq.w	404850 <_vfiprintf_r+0x374>
  404c12:	ab0e      	add	r3, sp, #56	; 0x38
  404c14:	2202      	movs	r2, #2
  404c16:	4608      	mov	r0, r1
  404c18:	931c      	str	r3, [sp, #112]	; 0x70
  404c1a:	921d      	str	r2, [sp, #116]	; 0x74
  404c1c:	46ca      	mov	sl, r9
  404c1e:	4601      	mov	r1, r0
  404c20:	f10a 0a08 	add.w	sl, sl, #8
  404c24:	3001      	adds	r0, #1
  404c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c28:	2b80      	cmp	r3, #128	; 0x80
  404c2a:	f43f ae19 	beq.w	404860 <_vfiprintf_r+0x384>
  404c2e:	9b05      	ldr	r3, [sp, #20]
  404c30:	1ae4      	subs	r4, r4, r3
  404c32:	2c00      	cmp	r4, #0
  404c34:	dd2e      	ble.n	404c94 <_vfiprintf_r+0x7b8>
  404c36:	2c10      	cmp	r4, #16
  404c38:	4db3      	ldr	r5, [pc, #716]	; (404f08 <_vfiprintf_r+0xa2c>)
  404c3a:	dd1e      	ble.n	404c7a <_vfiprintf_r+0x79e>
  404c3c:	46d6      	mov	lr, sl
  404c3e:	2610      	movs	r6, #16
  404c40:	9f06      	ldr	r7, [sp, #24]
  404c42:	f8dd a010 	ldr.w	sl, [sp, #16]
  404c46:	e006      	b.n	404c56 <_vfiprintf_r+0x77a>
  404c48:	1c88      	adds	r0, r1, #2
  404c4a:	f10e 0e08 	add.w	lr, lr, #8
  404c4e:	4619      	mov	r1, r3
  404c50:	3c10      	subs	r4, #16
  404c52:	2c10      	cmp	r4, #16
  404c54:	dd10      	ble.n	404c78 <_vfiprintf_r+0x79c>
  404c56:	1c4b      	adds	r3, r1, #1
  404c58:	3210      	adds	r2, #16
  404c5a:	2b07      	cmp	r3, #7
  404c5c:	9211      	str	r2, [sp, #68]	; 0x44
  404c5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404c62:	9310      	str	r3, [sp, #64]	; 0x40
  404c64:	ddf0      	ble.n	404c48 <_vfiprintf_r+0x76c>
  404c66:	2a00      	cmp	r2, #0
  404c68:	d165      	bne.n	404d36 <_vfiprintf_r+0x85a>
  404c6a:	3c10      	subs	r4, #16
  404c6c:	2c10      	cmp	r4, #16
  404c6e:	f04f 0001 	mov.w	r0, #1
  404c72:	4611      	mov	r1, r2
  404c74:	46ce      	mov	lr, r9
  404c76:	dcee      	bgt.n	404c56 <_vfiprintf_r+0x77a>
  404c78:	46f2      	mov	sl, lr
  404c7a:	4422      	add	r2, r4
  404c7c:	2807      	cmp	r0, #7
  404c7e:	9211      	str	r2, [sp, #68]	; 0x44
  404c80:	f8ca 5000 	str.w	r5, [sl]
  404c84:	f8ca 4004 	str.w	r4, [sl, #4]
  404c88:	9010      	str	r0, [sp, #64]	; 0x40
  404c8a:	f300 8085 	bgt.w	404d98 <_vfiprintf_r+0x8bc>
  404c8e:	f10a 0a08 	add.w	sl, sl, #8
  404c92:	3001      	adds	r0, #1
  404c94:	9905      	ldr	r1, [sp, #20]
  404c96:	f8ca b000 	str.w	fp, [sl]
  404c9a:	440a      	add	r2, r1
  404c9c:	2807      	cmp	r0, #7
  404c9e:	9211      	str	r2, [sp, #68]	; 0x44
  404ca0:	f8ca 1004 	str.w	r1, [sl, #4]
  404ca4:	9010      	str	r0, [sp, #64]	; 0x40
  404ca6:	f340 8082 	ble.w	404dae <_vfiprintf_r+0x8d2>
  404caa:	2a00      	cmp	r2, #0
  404cac:	f040 8118 	bne.w	404ee0 <_vfiprintf_r+0xa04>
  404cb0:	9b02      	ldr	r3, [sp, #8]
  404cb2:	9210      	str	r2, [sp, #64]	; 0x40
  404cb4:	0758      	lsls	r0, r3, #29
  404cb6:	d535      	bpl.n	404d24 <_vfiprintf_r+0x848>
  404cb8:	9b08      	ldr	r3, [sp, #32]
  404cba:	9901      	ldr	r1, [sp, #4]
  404cbc:	1a5c      	subs	r4, r3, r1
  404cbe:	2c00      	cmp	r4, #0
  404cc0:	f340 80e7 	ble.w	404e92 <_vfiprintf_r+0x9b6>
  404cc4:	46ca      	mov	sl, r9
  404cc6:	2c10      	cmp	r4, #16
  404cc8:	f340 8218 	ble.w	4050fc <_vfiprintf_r+0xc20>
  404ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cce:	4e8f      	ldr	r6, [pc, #572]	; (404f0c <_vfiprintf_r+0xa30>)
  404cd0:	9f06      	ldr	r7, [sp, #24]
  404cd2:	f8dd b010 	ldr.w	fp, [sp, #16]
  404cd6:	2510      	movs	r5, #16
  404cd8:	e006      	b.n	404ce8 <_vfiprintf_r+0x80c>
  404cda:	1c88      	adds	r0, r1, #2
  404cdc:	f10a 0a08 	add.w	sl, sl, #8
  404ce0:	4619      	mov	r1, r3
  404ce2:	3c10      	subs	r4, #16
  404ce4:	2c10      	cmp	r4, #16
  404ce6:	dd11      	ble.n	404d0c <_vfiprintf_r+0x830>
  404ce8:	1c4b      	adds	r3, r1, #1
  404cea:	3210      	adds	r2, #16
  404cec:	2b07      	cmp	r3, #7
  404cee:	9211      	str	r2, [sp, #68]	; 0x44
  404cf0:	f8ca 6000 	str.w	r6, [sl]
  404cf4:	f8ca 5004 	str.w	r5, [sl, #4]
  404cf8:	9310      	str	r3, [sp, #64]	; 0x40
  404cfa:	ddee      	ble.n	404cda <_vfiprintf_r+0x7fe>
  404cfc:	bb42      	cbnz	r2, 404d50 <_vfiprintf_r+0x874>
  404cfe:	3c10      	subs	r4, #16
  404d00:	2c10      	cmp	r4, #16
  404d02:	f04f 0001 	mov.w	r0, #1
  404d06:	4611      	mov	r1, r2
  404d08:	46ca      	mov	sl, r9
  404d0a:	dced      	bgt.n	404ce8 <_vfiprintf_r+0x80c>
  404d0c:	4422      	add	r2, r4
  404d0e:	2807      	cmp	r0, #7
  404d10:	9211      	str	r2, [sp, #68]	; 0x44
  404d12:	f8ca 6000 	str.w	r6, [sl]
  404d16:	f8ca 4004 	str.w	r4, [sl, #4]
  404d1a:	9010      	str	r0, [sp, #64]	; 0x40
  404d1c:	dd51      	ble.n	404dc2 <_vfiprintf_r+0x8e6>
  404d1e:	2a00      	cmp	r2, #0
  404d20:	f040 819b 	bne.w	40505a <_vfiprintf_r+0xb7e>
  404d24:	9b03      	ldr	r3, [sp, #12]
  404d26:	9a08      	ldr	r2, [sp, #32]
  404d28:	9901      	ldr	r1, [sp, #4]
  404d2a:	428a      	cmp	r2, r1
  404d2c:	bfac      	ite	ge
  404d2e:	189b      	addge	r3, r3, r2
  404d30:	185b      	addlt	r3, r3, r1
  404d32:	9303      	str	r3, [sp, #12]
  404d34:	e04e      	b.n	404dd4 <_vfiprintf_r+0x8f8>
  404d36:	aa0f      	add	r2, sp, #60	; 0x3c
  404d38:	4651      	mov	r1, sl
  404d3a:	4638      	mov	r0, r7
  404d3c:	f7ff fb8e 	bl	40445c <__sprint_r.part.0>
  404d40:	2800      	cmp	r0, #0
  404d42:	f040 813f 	bne.w	404fc4 <_vfiprintf_r+0xae8>
  404d46:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d4a:	1c48      	adds	r0, r1, #1
  404d4c:	46ce      	mov	lr, r9
  404d4e:	e77f      	b.n	404c50 <_vfiprintf_r+0x774>
  404d50:	aa0f      	add	r2, sp, #60	; 0x3c
  404d52:	4659      	mov	r1, fp
  404d54:	4638      	mov	r0, r7
  404d56:	f7ff fb81 	bl	40445c <__sprint_r.part.0>
  404d5a:	b960      	cbnz	r0, 404d76 <_vfiprintf_r+0x89a>
  404d5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d60:	1c48      	adds	r0, r1, #1
  404d62:	46ca      	mov	sl, r9
  404d64:	e7bd      	b.n	404ce2 <_vfiprintf_r+0x806>
  404d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d68:	f8dd b010 	ldr.w	fp, [sp, #16]
  404d6c:	2b00      	cmp	r3, #0
  404d6e:	f040 81d4 	bne.w	40511a <_vfiprintf_r+0xc3e>
  404d72:	2300      	movs	r3, #0
  404d74:	9310      	str	r3, [sp, #64]	; 0x40
  404d76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d7a:	f013 0f01 	tst.w	r3, #1
  404d7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d82:	d102      	bne.n	404d8a <_vfiprintf_r+0x8ae>
  404d84:	059a      	lsls	r2, r3, #22
  404d86:	f140 80de 	bpl.w	404f46 <_vfiprintf_r+0xa6a>
  404d8a:	065b      	lsls	r3, r3, #25
  404d8c:	f53f acb2 	bmi.w	4046f4 <_vfiprintf_r+0x218>
  404d90:	9803      	ldr	r0, [sp, #12]
  404d92:	b02d      	add	sp, #180	; 0xb4
  404d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d98:	2a00      	cmp	r2, #0
  404d9a:	f040 8106 	bne.w	404faa <_vfiprintf_r+0xace>
  404d9e:	9a05      	ldr	r2, [sp, #20]
  404da0:	921d      	str	r2, [sp, #116]	; 0x74
  404da2:	2301      	movs	r3, #1
  404da4:	9211      	str	r2, [sp, #68]	; 0x44
  404da6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404daa:	9310      	str	r3, [sp, #64]	; 0x40
  404dac:	46ca      	mov	sl, r9
  404dae:	f10a 0a08 	add.w	sl, sl, #8
  404db2:	9b02      	ldr	r3, [sp, #8]
  404db4:	0759      	lsls	r1, r3, #29
  404db6:	d504      	bpl.n	404dc2 <_vfiprintf_r+0x8e6>
  404db8:	9b08      	ldr	r3, [sp, #32]
  404dba:	9901      	ldr	r1, [sp, #4]
  404dbc:	1a5c      	subs	r4, r3, r1
  404dbe:	2c00      	cmp	r4, #0
  404dc0:	dc81      	bgt.n	404cc6 <_vfiprintf_r+0x7ea>
  404dc2:	9b03      	ldr	r3, [sp, #12]
  404dc4:	9908      	ldr	r1, [sp, #32]
  404dc6:	9801      	ldr	r0, [sp, #4]
  404dc8:	4281      	cmp	r1, r0
  404dca:	bfac      	ite	ge
  404dcc:	185b      	addge	r3, r3, r1
  404dce:	181b      	addlt	r3, r3, r0
  404dd0:	9303      	str	r3, [sp, #12]
  404dd2:	bb72      	cbnz	r2, 404e32 <_vfiprintf_r+0x956>
  404dd4:	2300      	movs	r3, #0
  404dd6:	9310      	str	r3, [sp, #64]	; 0x40
  404dd8:	46ca      	mov	sl, r9
  404dda:	f7ff bbbc 	b.w	404556 <_vfiprintf_r+0x7a>
  404dde:	aa0f      	add	r2, sp, #60	; 0x3c
  404de0:	9904      	ldr	r1, [sp, #16]
  404de2:	4620      	mov	r0, r4
  404de4:	f7ff fb3a 	bl	40445c <__sprint_r.part.0>
  404de8:	bb50      	cbnz	r0, 404e40 <_vfiprintf_r+0x964>
  404dea:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dee:	f101 0e01 	add.w	lr, r1, #1
  404df2:	46cc      	mov	ip, r9
  404df4:	e548      	b.n	404888 <_vfiprintf_r+0x3ac>
  404df6:	2a00      	cmp	r2, #0
  404df8:	f040 8140 	bne.w	40507c <_vfiprintf_r+0xba0>
  404dfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404e00:	2900      	cmp	r1, #0
  404e02:	f000 811b 	beq.w	40503c <_vfiprintf_r+0xb60>
  404e06:	2201      	movs	r2, #1
  404e08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404e0c:	4610      	mov	r0, r2
  404e0e:	921d      	str	r2, [sp, #116]	; 0x74
  404e10:	911c      	str	r1, [sp, #112]	; 0x70
  404e12:	46ca      	mov	sl, r9
  404e14:	4601      	mov	r1, r0
  404e16:	f10a 0a08 	add.w	sl, sl, #8
  404e1a:	3001      	adds	r0, #1
  404e1c:	e507      	b.n	40482e <_vfiprintf_r+0x352>
  404e1e:	9b02      	ldr	r3, [sp, #8]
  404e20:	2a01      	cmp	r2, #1
  404e22:	f000 8098 	beq.w	404f56 <_vfiprintf_r+0xa7a>
  404e26:	2a02      	cmp	r2, #2
  404e28:	d10d      	bne.n	404e46 <_vfiprintf_r+0x96a>
  404e2a:	9302      	str	r3, [sp, #8]
  404e2c:	2600      	movs	r6, #0
  404e2e:	2700      	movs	r7, #0
  404e30:	e5b0      	b.n	404994 <_vfiprintf_r+0x4b8>
  404e32:	aa0f      	add	r2, sp, #60	; 0x3c
  404e34:	9904      	ldr	r1, [sp, #16]
  404e36:	9806      	ldr	r0, [sp, #24]
  404e38:	f7ff fb10 	bl	40445c <__sprint_r.part.0>
  404e3c:	2800      	cmp	r0, #0
  404e3e:	d0c9      	beq.n	404dd4 <_vfiprintf_r+0x8f8>
  404e40:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e44:	e797      	b.n	404d76 <_vfiprintf_r+0x89a>
  404e46:	9302      	str	r3, [sp, #8]
  404e48:	2600      	movs	r6, #0
  404e4a:	2700      	movs	r7, #0
  404e4c:	4649      	mov	r1, r9
  404e4e:	e000      	b.n	404e52 <_vfiprintf_r+0x976>
  404e50:	4659      	mov	r1, fp
  404e52:	08f2      	lsrs	r2, r6, #3
  404e54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404e58:	08f8      	lsrs	r0, r7, #3
  404e5a:	f006 0307 	and.w	r3, r6, #7
  404e5e:	4607      	mov	r7, r0
  404e60:	4616      	mov	r6, r2
  404e62:	3330      	adds	r3, #48	; 0x30
  404e64:	ea56 0207 	orrs.w	r2, r6, r7
  404e68:	f801 3c01 	strb.w	r3, [r1, #-1]
  404e6c:	f101 3bff 	add.w	fp, r1, #4294967295
  404e70:	d1ee      	bne.n	404e50 <_vfiprintf_r+0x974>
  404e72:	9a02      	ldr	r2, [sp, #8]
  404e74:	07d6      	lsls	r6, r2, #31
  404e76:	f57f ad9d 	bpl.w	4049b4 <_vfiprintf_r+0x4d8>
  404e7a:	2b30      	cmp	r3, #48	; 0x30
  404e7c:	f43f ad9a 	beq.w	4049b4 <_vfiprintf_r+0x4d8>
  404e80:	3902      	subs	r1, #2
  404e82:	2330      	movs	r3, #48	; 0x30
  404e84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404e88:	eba9 0301 	sub.w	r3, r9, r1
  404e8c:	9305      	str	r3, [sp, #20]
  404e8e:	468b      	mov	fp, r1
  404e90:	e476      	b.n	404780 <_vfiprintf_r+0x2a4>
  404e92:	9b03      	ldr	r3, [sp, #12]
  404e94:	9a08      	ldr	r2, [sp, #32]
  404e96:	428a      	cmp	r2, r1
  404e98:	bfac      	ite	ge
  404e9a:	189b      	addge	r3, r3, r2
  404e9c:	185b      	addlt	r3, r3, r1
  404e9e:	9303      	str	r3, [sp, #12]
  404ea0:	e798      	b.n	404dd4 <_vfiprintf_r+0x8f8>
  404ea2:	2202      	movs	r2, #2
  404ea4:	e44d      	b.n	404742 <_vfiprintf_r+0x266>
  404ea6:	2f00      	cmp	r7, #0
  404ea8:	bf08      	it	eq
  404eaa:	2e0a      	cmpeq	r6, #10
  404eac:	d352      	bcc.n	404f54 <_vfiprintf_r+0xa78>
  404eae:	46cb      	mov	fp, r9
  404eb0:	4630      	mov	r0, r6
  404eb2:	4639      	mov	r1, r7
  404eb4:	220a      	movs	r2, #10
  404eb6:	2300      	movs	r3, #0
  404eb8:	f001 fbc6 	bl	406648 <__aeabi_uldivmod>
  404ebc:	3230      	adds	r2, #48	; 0x30
  404ebe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404ec2:	4630      	mov	r0, r6
  404ec4:	4639      	mov	r1, r7
  404ec6:	2300      	movs	r3, #0
  404ec8:	220a      	movs	r2, #10
  404eca:	f001 fbbd 	bl	406648 <__aeabi_uldivmod>
  404ece:	4606      	mov	r6, r0
  404ed0:	460f      	mov	r7, r1
  404ed2:	ea56 0307 	orrs.w	r3, r6, r7
  404ed6:	d1eb      	bne.n	404eb0 <_vfiprintf_r+0x9d4>
  404ed8:	e56c      	b.n	4049b4 <_vfiprintf_r+0x4d8>
  404eda:	9405      	str	r4, [sp, #20]
  404edc:	46cb      	mov	fp, r9
  404ede:	e44f      	b.n	404780 <_vfiprintf_r+0x2a4>
  404ee0:	aa0f      	add	r2, sp, #60	; 0x3c
  404ee2:	9904      	ldr	r1, [sp, #16]
  404ee4:	9806      	ldr	r0, [sp, #24]
  404ee6:	f7ff fab9 	bl	40445c <__sprint_r.part.0>
  404eea:	2800      	cmp	r0, #0
  404eec:	d1a8      	bne.n	404e40 <_vfiprintf_r+0x964>
  404eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ef0:	46ca      	mov	sl, r9
  404ef2:	e75e      	b.n	404db2 <_vfiprintf_r+0x8d6>
  404ef4:	aa0f      	add	r2, sp, #60	; 0x3c
  404ef6:	9904      	ldr	r1, [sp, #16]
  404ef8:	9806      	ldr	r0, [sp, #24]
  404efa:	f7ff faaf 	bl	40445c <__sprint_r.part.0>
  404efe:	2800      	cmp	r0, #0
  404f00:	d19e      	bne.n	404e40 <_vfiprintf_r+0x964>
  404f02:	46ca      	mov	sl, r9
  404f04:	f7ff bbc0 	b.w	404688 <_vfiprintf_r+0x1ac>
  404f08:	00406a80 	.word	0x00406a80
  404f0c:	00406a70 	.word	0x00406a70
  404f10:	3104      	adds	r1, #4
  404f12:	6816      	ldr	r6, [r2, #0]
  404f14:	9107      	str	r1, [sp, #28]
  404f16:	2201      	movs	r2, #1
  404f18:	2700      	movs	r7, #0
  404f1a:	e412      	b.n	404742 <_vfiprintf_r+0x266>
  404f1c:	9807      	ldr	r0, [sp, #28]
  404f1e:	4601      	mov	r1, r0
  404f20:	3104      	adds	r1, #4
  404f22:	6806      	ldr	r6, [r0, #0]
  404f24:	9107      	str	r1, [sp, #28]
  404f26:	2700      	movs	r7, #0
  404f28:	e40b      	b.n	404742 <_vfiprintf_r+0x266>
  404f2a:	680e      	ldr	r6, [r1, #0]
  404f2c:	3104      	adds	r1, #4
  404f2e:	9107      	str	r1, [sp, #28]
  404f30:	2700      	movs	r7, #0
  404f32:	e591      	b.n	404a58 <_vfiprintf_r+0x57c>
  404f34:	9907      	ldr	r1, [sp, #28]
  404f36:	680e      	ldr	r6, [r1, #0]
  404f38:	460a      	mov	r2, r1
  404f3a:	17f7      	asrs	r7, r6, #31
  404f3c:	3204      	adds	r2, #4
  404f3e:	9207      	str	r2, [sp, #28]
  404f40:	4630      	mov	r0, r6
  404f42:	4639      	mov	r1, r7
  404f44:	e50f      	b.n	404966 <_vfiprintf_r+0x48a>
  404f46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f4a:	f000 fe7f 	bl	405c4c <__retarget_lock_release_recursive>
  404f4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f52:	e71a      	b.n	404d8a <_vfiprintf_r+0x8ae>
  404f54:	9b02      	ldr	r3, [sp, #8]
  404f56:	9302      	str	r3, [sp, #8]
  404f58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404f5c:	3630      	adds	r6, #48	; 0x30
  404f5e:	2301      	movs	r3, #1
  404f60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404f64:	9305      	str	r3, [sp, #20]
  404f66:	e40b      	b.n	404780 <_vfiprintf_r+0x2a4>
  404f68:	aa0f      	add	r2, sp, #60	; 0x3c
  404f6a:	9904      	ldr	r1, [sp, #16]
  404f6c:	9806      	ldr	r0, [sp, #24]
  404f6e:	f7ff fa75 	bl	40445c <__sprint_r.part.0>
  404f72:	2800      	cmp	r0, #0
  404f74:	f47f af64 	bne.w	404e40 <_vfiprintf_r+0x964>
  404f78:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f7c:	1c48      	adds	r0, r1, #1
  404f7e:	46ca      	mov	sl, r9
  404f80:	e651      	b.n	404c26 <_vfiprintf_r+0x74a>
  404f82:	aa0f      	add	r2, sp, #60	; 0x3c
  404f84:	9904      	ldr	r1, [sp, #16]
  404f86:	9806      	ldr	r0, [sp, #24]
  404f88:	f7ff fa68 	bl	40445c <__sprint_r.part.0>
  404f8c:	2800      	cmp	r0, #0
  404f8e:	f47f af57 	bne.w	404e40 <_vfiprintf_r+0x964>
  404f92:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f96:	1c48      	adds	r0, r1, #1
  404f98:	46ca      	mov	sl, r9
  404f9a:	e448      	b.n	40482e <_vfiprintf_r+0x352>
  404f9c:	2a00      	cmp	r2, #0
  404f9e:	f040 8091 	bne.w	4050c4 <_vfiprintf_r+0xbe8>
  404fa2:	2001      	movs	r0, #1
  404fa4:	4611      	mov	r1, r2
  404fa6:	46ca      	mov	sl, r9
  404fa8:	e641      	b.n	404c2e <_vfiprintf_r+0x752>
  404faa:	aa0f      	add	r2, sp, #60	; 0x3c
  404fac:	9904      	ldr	r1, [sp, #16]
  404fae:	9806      	ldr	r0, [sp, #24]
  404fb0:	f7ff fa54 	bl	40445c <__sprint_r.part.0>
  404fb4:	2800      	cmp	r0, #0
  404fb6:	f47f af43 	bne.w	404e40 <_vfiprintf_r+0x964>
  404fba:	9810      	ldr	r0, [sp, #64]	; 0x40
  404fbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fbe:	3001      	adds	r0, #1
  404fc0:	46ca      	mov	sl, r9
  404fc2:	e667      	b.n	404c94 <_vfiprintf_r+0x7b8>
  404fc4:	46d3      	mov	fp, sl
  404fc6:	e6d6      	b.n	404d76 <_vfiprintf_r+0x89a>
  404fc8:	9e07      	ldr	r6, [sp, #28]
  404fca:	3607      	adds	r6, #7
  404fcc:	f026 0207 	bic.w	r2, r6, #7
  404fd0:	f102 0108 	add.w	r1, r2, #8
  404fd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  404fd8:	9107      	str	r1, [sp, #28]
  404fda:	2201      	movs	r2, #1
  404fdc:	f7ff bbb1 	b.w	404742 <_vfiprintf_r+0x266>
  404fe0:	9e07      	ldr	r6, [sp, #28]
  404fe2:	3607      	adds	r6, #7
  404fe4:	f026 0607 	bic.w	r6, r6, #7
  404fe8:	e9d6 0100 	ldrd	r0, r1, [r6]
  404fec:	f106 0208 	add.w	r2, r6, #8
  404ff0:	9207      	str	r2, [sp, #28]
  404ff2:	4606      	mov	r6, r0
  404ff4:	460f      	mov	r7, r1
  404ff6:	e4b6      	b.n	404966 <_vfiprintf_r+0x48a>
  404ff8:	9e07      	ldr	r6, [sp, #28]
  404ffa:	3607      	adds	r6, #7
  404ffc:	f026 0207 	bic.w	r2, r6, #7
  405000:	f102 0108 	add.w	r1, r2, #8
  405004:	e9d2 6700 	ldrd	r6, r7, [r2]
  405008:	9107      	str	r1, [sp, #28]
  40500a:	2200      	movs	r2, #0
  40500c:	f7ff bb99 	b.w	404742 <_vfiprintf_r+0x266>
  405010:	9e07      	ldr	r6, [sp, #28]
  405012:	3607      	adds	r6, #7
  405014:	f026 0107 	bic.w	r1, r6, #7
  405018:	f101 0008 	add.w	r0, r1, #8
  40501c:	9007      	str	r0, [sp, #28]
  40501e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405022:	e519      	b.n	404a58 <_vfiprintf_r+0x57c>
  405024:	46cb      	mov	fp, r9
  405026:	f7ff bbab 	b.w	404780 <_vfiprintf_r+0x2a4>
  40502a:	252d      	movs	r5, #45	; 0x2d
  40502c:	4276      	negs	r6, r6
  40502e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405032:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405036:	2201      	movs	r2, #1
  405038:	f7ff bb88 	b.w	40474c <_vfiprintf_r+0x270>
  40503c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40503e:	b9b3      	cbnz	r3, 40506e <_vfiprintf_r+0xb92>
  405040:	4611      	mov	r1, r2
  405042:	2001      	movs	r0, #1
  405044:	46ca      	mov	sl, r9
  405046:	e5f2      	b.n	404c2e <_vfiprintf_r+0x752>
  405048:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40504c:	f000 fdfe 	bl	405c4c <__retarget_lock_release_recursive>
  405050:	f04f 33ff 	mov.w	r3, #4294967295
  405054:	9303      	str	r3, [sp, #12]
  405056:	f7ff bb50 	b.w	4046fa <_vfiprintf_r+0x21e>
  40505a:	aa0f      	add	r2, sp, #60	; 0x3c
  40505c:	9904      	ldr	r1, [sp, #16]
  40505e:	9806      	ldr	r0, [sp, #24]
  405060:	f7ff f9fc 	bl	40445c <__sprint_r.part.0>
  405064:	2800      	cmp	r0, #0
  405066:	f47f aeeb 	bne.w	404e40 <_vfiprintf_r+0x964>
  40506a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40506c:	e6a9      	b.n	404dc2 <_vfiprintf_r+0x8e6>
  40506e:	ab0e      	add	r3, sp, #56	; 0x38
  405070:	2202      	movs	r2, #2
  405072:	931c      	str	r3, [sp, #112]	; 0x70
  405074:	921d      	str	r2, [sp, #116]	; 0x74
  405076:	2001      	movs	r0, #1
  405078:	46ca      	mov	sl, r9
  40507a:	e5d0      	b.n	404c1e <_vfiprintf_r+0x742>
  40507c:	aa0f      	add	r2, sp, #60	; 0x3c
  40507e:	9904      	ldr	r1, [sp, #16]
  405080:	9806      	ldr	r0, [sp, #24]
  405082:	f7ff f9eb 	bl	40445c <__sprint_r.part.0>
  405086:	2800      	cmp	r0, #0
  405088:	f47f aeda 	bne.w	404e40 <_vfiprintf_r+0x964>
  40508c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40508e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405090:	1c48      	adds	r0, r1, #1
  405092:	46ca      	mov	sl, r9
  405094:	e5a4      	b.n	404be0 <_vfiprintf_r+0x704>
  405096:	9a07      	ldr	r2, [sp, #28]
  405098:	9903      	ldr	r1, [sp, #12]
  40509a:	6813      	ldr	r3, [r2, #0]
  40509c:	17cd      	asrs	r5, r1, #31
  40509e:	4608      	mov	r0, r1
  4050a0:	3204      	adds	r2, #4
  4050a2:	4629      	mov	r1, r5
  4050a4:	9207      	str	r2, [sp, #28]
  4050a6:	e9c3 0100 	strd	r0, r1, [r3]
  4050aa:	f7ff ba54 	b.w	404556 <_vfiprintf_r+0x7a>
  4050ae:	4658      	mov	r0, fp
  4050b0:	9607      	str	r6, [sp, #28]
  4050b2:	9302      	str	r3, [sp, #8]
  4050b4:	f7ff f964 	bl	404380 <strlen>
  4050b8:	2400      	movs	r4, #0
  4050ba:	9005      	str	r0, [sp, #20]
  4050bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050c0:	f7ff bb5e 	b.w	404780 <_vfiprintf_r+0x2a4>
  4050c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4050c6:	9904      	ldr	r1, [sp, #16]
  4050c8:	9806      	ldr	r0, [sp, #24]
  4050ca:	f7ff f9c7 	bl	40445c <__sprint_r.part.0>
  4050ce:	2800      	cmp	r0, #0
  4050d0:	f47f aeb6 	bne.w	404e40 <_vfiprintf_r+0x964>
  4050d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050d8:	1c48      	adds	r0, r1, #1
  4050da:	46ca      	mov	sl, r9
  4050dc:	e5a7      	b.n	404c2e <_vfiprintf_r+0x752>
  4050de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050e2:	4e20      	ldr	r6, [pc, #128]	; (405164 <_vfiprintf_r+0xc88>)
  4050e4:	3101      	adds	r1, #1
  4050e6:	f7ff bb90 	b.w	40480a <_vfiprintf_r+0x32e>
  4050ea:	2c06      	cmp	r4, #6
  4050ec:	bf28      	it	cs
  4050ee:	2406      	movcs	r4, #6
  4050f0:	9405      	str	r4, [sp, #20]
  4050f2:	9607      	str	r6, [sp, #28]
  4050f4:	9401      	str	r4, [sp, #4]
  4050f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405168 <_vfiprintf_r+0xc8c>
  4050fa:	e4d5      	b.n	404aa8 <_vfiprintf_r+0x5cc>
  4050fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4050fe:	4e19      	ldr	r6, [pc, #100]	; (405164 <_vfiprintf_r+0xc88>)
  405100:	3001      	adds	r0, #1
  405102:	e603      	b.n	404d0c <_vfiprintf_r+0x830>
  405104:	9405      	str	r4, [sp, #20]
  405106:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40510a:	9607      	str	r6, [sp, #28]
  40510c:	9302      	str	r3, [sp, #8]
  40510e:	4604      	mov	r4, r0
  405110:	f7ff bb36 	b.w	404780 <_vfiprintf_r+0x2a4>
  405114:	4686      	mov	lr, r0
  405116:	f7ff bbce 	b.w	4048b6 <_vfiprintf_r+0x3da>
  40511a:	9806      	ldr	r0, [sp, #24]
  40511c:	aa0f      	add	r2, sp, #60	; 0x3c
  40511e:	4659      	mov	r1, fp
  405120:	f7ff f99c 	bl	40445c <__sprint_r.part.0>
  405124:	2800      	cmp	r0, #0
  405126:	f43f ae24 	beq.w	404d72 <_vfiprintf_r+0x896>
  40512a:	e624      	b.n	404d76 <_vfiprintf_r+0x89a>
  40512c:	9907      	ldr	r1, [sp, #28]
  40512e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405132:	680c      	ldr	r4, [r1, #0]
  405134:	3104      	adds	r1, #4
  405136:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40513a:	46b8      	mov	r8, r7
  40513c:	9107      	str	r1, [sp, #28]
  40513e:	f7ff ba3f 	b.w	4045c0 <_vfiprintf_r+0xe4>
  405142:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405146:	e43c      	b.n	4049c2 <_vfiprintf_r+0x4e6>
  405148:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40514c:	e521      	b.n	404b92 <_vfiprintf_r+0x6b6>
  40514e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405152:	f7ff bbf4 	b.w	40493e <_vfiprintf_r+0x462>
  405156:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40515a:	e491      	b.n	404a80 <_vfiprintf_r+0x5a4>
  40515c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405160:	e469      	b.n	404a36 <_vfiprintf_r+0x55a>
  405162:	bf00      	nop
  405164:	00406a70 	.word	0x00406a70
  405168:	00406a68 	.word	0x00406a68

0040516c <__sbprintf>:
  40516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405170:	460c      	mov	r4, r1
  405172:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405176:	8989      	ldrh	r1, [r1, #12]
  405178:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40517a:	89e5      	ldrh	r5, [r4, #14]
  40517c:	9619      	str	r6, [sp, #100]	; 0x64
  40517e:	f021 0102 	bic.w	r1, r1, #2
  405182:	4606      	mov	r6, r0
  405184:	69e0      	ldr	r0, [r4, #28]
  405186:	f8ad 100c 	strh.w	r1, [sp, #12]
  40518a:	4617      	mov	r7, r2
  40518c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405190:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405192:	f8ad 500e 	strh.w	r5, [sp, #14]
  405196:	4698      	mov	r8, r3
  405198:	ad1a      	add	r5, sp, #104	; 0x68
  40519a:	2300      	movs	r3, #0
  40519c:	9007      	str	r0, [sp, #28]
  40519e:	a816      	add	r0, sp, #88	; 0x58
  4051a0:	9209      	str	r2, [sp, #36]	; 0x24
  4051a2:	9306      	str	r3, [sp, #24]
  4051a4:	9500      	str	r5, [sp, #0]
  4051a6:	9504      	str	r5, [sp, #16]
  4051a8:	9102      	str	r1, [sp, #8]
  4051aa:	9105      	str	r1, [sp, #20]
  4051ac:	f000 fd48 	bl	405c40 <__retarget_lock_init_recursive>
  4051b0:	4643      	mov	r3, r8
  4051b2:	463a      	mov	r2, r7
  4051b4:	4669      	mov	r1, sp
  4051b6:	4630      	mov	r0, r6
  4051b8:	f7ff f990 	bl	4044dc <_vfiprintf_r>
  4051bc:	1e05      	subs	r5, r0, #0
  4051be:	db07      	blt.n	4051d0 <__sbprintf+0x64>
  4051c0:	4630      	mov	r0, r6
  4051c2:	4669      	mov	r1, sp
  4051c4:	f000 f928 	bl	405418 <_fflush_r>
  4051c8:	2800      	cmp	r0, #0
  4051ca:	bf18      	it	ne
  4051cc:	f04f 35ff 	movne.w	r5, #4294967295
  4051d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4051d4:	065b      	lsls	r3, r3, #25
  4051d6:	d503      	bpl.n	4051e0 <__sbprintf+0x74>
  4051d8:	89a3      	ldrh	r3, [r4, #12]
  4051da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051de:	81a3      	strh	r3, [r4, #12]
  4051e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4051e2:	f000 fd2f 	bl	405c44 <__retarget_lock_close_recursive>
  4051e6:	4628      	mov	r0, r5
  4051e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004051f0 <__swsetup_r>:
  4051f0:	b538      	push	{r3, r4, r5, lr}
  4051f2:	4b30      	ldr	r3, [pc, #192]	; (4052b4 <__swsetup_r+0xc4>)
  4051f4:	681b      	ldr	r3, [r3, #0]
  4051f6:	4605      	mov	r5, r0
  4051f8:	460c      	mov	r4, r1
  4051fa:	b113      	cbz	r3, 405202 <__swsetup_r+0x12>
  4051fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4051fe:	2a00      	cmp	r2, #0
  405200:	d038      	beq.n	405274 <__swsetup_r+0x84>
  405202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405206:	b293      	uxth	r3, r2
  405208:	0718      	lsls	r0, r3, #28
  40520a:	d50c      	bpl.n	405226 <__swsetup_r+0x36>
  40520c:	6920      	ldr	r0, [r4, #16]
  40520e:	b1a8      	cbz	r0, 40523c <__swsetup_r+0x4c>
  405210:	f013 0201 	ands.w	r2, r3, #1
  405214:	d01e      	beq.n	405254 <__swsetup_r+0x64>
  405216:	6963      	ldr	r3, [r4, #20]
  405218:	2200      	movs	r2, #0
  40521a:	425b      	negs	r3, r3
  40521c:	61a3      	str	r3, [r4, #24]
  40521e:	60a2      	str	r2, [r4, #8]
  405220:	b1f0      	cbz	r0, 405260 <__swsetup_r+0x70>
  405222:	2000      	movs	r0, #0
  405224:	bd38      	pop	{r3, r4, r5, pc}
  405226:	06d9      	lsls	r1, r3, #27
  405228:	d53c      	bpl.n	4052a4 <__swsetup_r+0xb4>
  40522a:	0758      	lsls	r0, r3, #29
  40522c:	d426      	bmi.n	40527c <__swsetup_r+0x8c>
  40522e:	6920      	ldr	r0, [r4, #16]
  405230:	f042 0308 	orr.w	r3, r2, #8
  405234:	81a3      	strh	r3, [r4, #12]
  405236:	b29b      	uxth	r3, r3
  405238:	2800      	cmp	r0, #0
  40523a:	d1e9      	bne.n	405210 <__swsetup_r+0x20>
  40523c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405240:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405244:	d0e4      	beq.n	405210 <__swsetup_r+0x20>
  405246:	4628      	mov	r0, r5
  405248:	4621      	mov	r1, r4
  40524a:	f000 fd2f 	bl	405cac <__smakebuf_r>
  40524e:	89a3      	ldrh	r3, [r4, #12]
  405250:	6920      	ldr	r0, [r4, #16]
  405252:	e7dd      	b.n	405210 <__swsetup_r+0x20>
  405254:	0799      	lsls	r1, r3, #30
  405256:	bf58      	it	pl
  405258:	6962      	ldrpl	r2, [r4, #20]
  40525a:	60a2      	str	r2, [r4, #8]
  40525c:	2800      	cmp	r0, #0
  40525e:	d1e0      	bne.n	405222 <__swsetup_r+0x32>
  405260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405264:	061a      	lsls	r2, r3, #24
  405266:	d5dd      	bpl.n	405224 <__swsetup_r+0x34>
  405268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40526c:	81a3      	strh	r3, [r4, #12]
  40526e:	f04f 30ff 	mov.w	r0, #4294967295
  405272:	bd38      	pop	{r3, r4, r5, pc}
  405274:	4618      	mov	r0, r3
  405276:	f000 f927 	bl	4054c8 <__sinit>
  40527a:	e7c2      	b.n	405202 <__swsetup_r+0x12>
  40527c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40527e:	b151      	cbz	r1, 405296 <__swsetup_r+0xa6>
  405280:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405284:	4299      	cmp	r1, r3
  405286:	d004      	beq.n	405292 <__swsetup_r+0xa2>
  405288:	4628      	mov	r0, r5
  40528a:	f000 fa43 	bl	405714 <_free_r>
  40528e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405292:	2300      	movs	r3, #0
  405294:	6323      	str	r3, [r4, #48]	; 0x30
  405296:	2300      	movs	r3, #0
  405298:	6920      	ldr	r0, [r4, #16]
  40529a:	6063      	str	r3, [r4, #4]
  40529c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4052a0:	6020      	str	r0, [r4, #0]
  4052a2:	e7c5      	b.n	405230 <__swsetup_r+0x40>
  4052a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4052a8:	2309      	movs	r3, #9
  4052aa:	602b      	str	r3, [r5, #0]
  4052ac:	f04f 30ff 	mov.w	r0, #4294967295
  4052b0:	81a2      	strh	r2, [r4, #12]
  4052b2:	bd38      	pop	{r3, r4, r5, pc}
  4052b4:	2040000c 	.word	0x2040000c

004052b8 <register_fini>:
  4052b8:	4b02      	ldr	r3, [pc, #8]	; (4052c4 <register_fini+0xc>)
  4052ba:	b113      	cbz	r3, 4052c2 <register_fini+0xa>
  4052bc:	4802      	ldr	r0, [pc, #8]	; (4052c8 <register_fini+0x10>)
  4052be:	f000 b805 	b.w	4052cc <atexit>
  4052c2:	4770      	bx	lr
  4052c4:	00000000 	.word	0x00000000
  4052c8:	00405539 	.word	0x00405539

004052cc <atexit>:
  4052cc:	2300      	movs	r3, #0
  4052ce:	4601      	mov	r1, r0
  4052d0:	461a      	mov	r2, r3
  4052d2:	4618      	mov	r0, r3
  4052d4:	f001 b890 	b.w	4063f8 <__register_exitproc>

004052d8 <__sflush_r>:
  4052d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4052dc:	b29a      	uxth	r2, r3
  4052de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052e2:	460d      	mov	r5, r1
  4052e4:	0711      	lsls	r1, r2, #28
  4052e6:	4680      	mov	r8, r0
  4052e8:	d43a      	bmi.n	405360 <__sflush_r+0x88>
  4052ea:	686a      	ldr	r2, [r5, #4]
  4052ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4052f0:	2a00      	cmp	r2, #0
  4052f2:	81ab      	strh	r3, [r5, #12]
  4052f4:	dd6f      	ble.n	4053d6 <__sflush_r+0xfe>
  4052f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4052f8:	2c00      	cmp	r4, #0
  4052fa:	d049      	beq.n	405390 <__sflush_r+0xb8>
  4052fc:	2200      	movs	r2, #0
  4052fe:	b29b      	uxth	r3, r3
  405300:	f8d8 6000 	ldr.w	r6, [r8]
  405304:	f8c8 2000 	str.w	r2, [r8]
  405308:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40530c:	d067      	beq.n	4053de <__sflush_r+0x106>
  40530e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405310:	075f      	lsls	r7, r3, #29
  405312:	d505      	bpl.n	405320 <__sflush_r+0x48>
  405314:	6869      	ldr	r1, [r5, #4]
  405316:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405318:	1a52      	subs	r2, r2, r1
  40531a:	b10b      	cbz	r3, 405320 <__sflush_r+0x48>
  40531c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40531e:	1ad2      	subs	r2, r2, r3
  405320:	2300      	movs	r3, #0
  405322:	69e9      	ldr	r1, [r5, #28]
  405324:	4640      	mov	r0, r8
  405326:	47a0      	blx	r4
  405328:	1c44      	adds	r4, r0, #1
  40532a:	d03c      	beq.n	4053a6 <__sflush_r+0xce>
  40532c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405330:	692a      	ldr	r2, [r5, #16]
  405332:	602a      	str	r2, [r5, #0]
  405334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405338:	2200      	movs	r2, #0
  40533a:	81ab      	strh	r3, [r5, #12]
  40533c:	04db      	lsls	r3, r3, #19
  40533e:	606a      	str	r2, [r5, #4]
  405340:	d447      	bmi.n	4053d2 <__sflush_r+0xfa>
  405342:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405344:	f8c8 6000 	str.w	r6, [r8]
  405348:	b311      	cbz	r1, 405390 <__sflush_r+0xb8>
  40534a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40534e:	4299      	cmp	r1, r3
  405350:	d002      	beq.n	405358 <__sflush_r+0x80>
  405352:	4640      	mov	r0, r8
  405354:	f000 f9de 	bl	405714 <_free_r>
  405358:	2000      	movs	r0, #0
  40535a:	6328      	str	r0, [r5, #48]	; 0x30
  40535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405360:	692e      	ldr	r6, [r5, #16]
  405362:	b1ae      	cbz	r6, 405390 <__sflush_r+0xb8>
  405364:	682c      	ldr	r4, [r5, #0]
  405366:	602e      	str	r6, [r5, #0]
  405368:	0791      	lsls	r1, r2, #30
  40536a:	bf0c      	ite	eq
  40536c:	696b      	ldreq	r3, [r5, #20]
  40536e:	2300      	movne	r3, #0
  405370:	1ba4      	subs	r4, r4, r6
  405372:	60ab      	str	r3, [r5, #8]
  405374:	e00a      	b.n	40538c <__sflush_r+0xb4>
  405376:	4623      	mov	r3, r4
  405378:	4632      	mov	r2, r6
  40537a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40537c:	69e9      	ldr	r1, [r5, #28]
  40537e:	4640      	mov	r0, r8
  405380:	47b8      	blx	r7
  405382:	2800      	cmp	r0, #0
  405384:	eba4 0400 	sub.w	r4, r4, r0
  405388:	4406      	add	r6, r0
  40538a:	dd04      	ble.n	405396 <__sflush_r+0xbe>
  40538c:	2c00      	cmp	r4, #0
  40538e:	dcf2      	bgt.n	405376 <__sflush_r+0x9e>
  405390:	2000      	movs	r0, #0
  405392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405396:	89ab      	ldrh	r3, [r5, #12]
  405398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40539c:	81ab      	strh	r3, [r5, #12]
  40539e:	f04f 30ff 	mov.w	r0, #4294967295
  4053a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053a6:	f8d8 4000 	ldr.w	r4, [r8]
  4053aa:	2c1d      	cmp	r4, #29
  4053ac:	d8f3      	bhi.n	405396 <__sflush_r+0xbe>
  4053ae:	4b19      	ldr	r3, [pc, #100]	; (405414 <__sflush_r+0x13c>)
  4053b0:	40e3      	lsrs	r3, r4
  4053b2:	43db      	mvns	r3, r3
  4053b4:	f013 0301 	ands.w	r3, r3, #1
  4053b8:	d1ed      	bne.n	405396 <__sflush_r+0xbe>
  4053ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4053be:	606b      	str	r3, [r5, #4]
  4053c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4053c4:	6929      	ldr	r1, [r5, #16]
  4053c6:	81ab      	strh	r3, [r5, #12]
  4053c8:	04da      	lsls	r2, r3, #19
  4053ca:	6029      	str	r1, [r5, #0]
  4053cc:	d5b9      	bpl.n	405342 <__sflush_r+0x6a>
  4053ce:	2c00      	cmp	r4, #0
  4053d0:	d1b7      	bne.n	405342 <__sflush_r+0x6a>
  4053d2:	6528      	str	r0, [r5, #80]	; 0x50
  4053d4:	e7b5      	b.n	405342 <__sflush_r+0x6a>
  4053d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4053d8:	2a00      	cmp	r2, #0
  4053da:	dc8c      	bgt.n	4052f6 <__sflush_r+0x1e>
  4053dc:	e7d8      	b.n	405390 <__sflush_r+0xb8>
  4053de:	2301      	movs	r3, #1
  4053e0:	69e9      	ldr	r1, [r5, #28]
  4053e2:	4640      	mov	r0, r8
  4053e4:	47a0      	blx	r4
  4053e6:	1c43      	adds	r3, r0, #1
  4053e8:	4602      	mov	r2, r0
  4053ea:	d002      	beq.n	4053f2 <__sflush_r+0x11a>
  4053ec:	89ab      	ldrh	r3, [r5, #12]
  4053ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4053f0:	e78e      	b.n	405310 <__sflush_r+0x38>
  4053f2:	f8d8 3000 	ldr.w	r3, [r8]
  4053f6:	2b00      	cmp	r3, #0
  4053f8:	d0f8      	beq.n	4053ec <__sflush_r+0x114>
  4053fa:	2b1d      	cmp	r3, #29
  4053fc:	d001      	beq.n	405402 <__sflush_r+0x12a>
  4053fe:	2b16      	cmp	r3, #22
  405400:	d102      	bne.n	405408 <__sflush_r+0x130>
  405402:	f8c8 6000 	str.w	r6, [r8]
  405406:	e7c3      	b.n	405390 <__sflush_r+0xb8>
  405408:	89ab      	ldrh	r3, [r5, #12]
  40540a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40540e:	81ab      	strh	r3, [r5, #12]
  405410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405414:	20400001 	.word	0x20400001

00405418 <_fflush_r>:
  405418:	b538      	push	{r3, r4, r5, lr}
  40541a:	460d      	mov	r5, r1
  40541c:	4604      	mov	r4, r0
  40541e:	b108      	cbz	r0, 405424 <_fflush_r+0xc>
  405420:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405422:	b1bb      	cbz	r3, 405454 <_fflush_r+0x3c>
  405424:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405428:	b188      	cbz	r0, 40544e <_fflush_r+0x36>
  40542a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40542c:	07db      	lsls	r3, r3, #31
  40542e:	d401      	bmi.n	405434 <_fflush_r+0x1c>
  405430:	0581      	lsls	r1, r0, #22
  405432:	d517      	bpl.n	405464 <_fflush_r+0x4c>
  405434:	4620      	mov	r0, r4
  405436:	4629      	mov	r1, r5
  405438:	f7ff ff4e 	bl	4052d8 <__sflush_r>
  40543c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40543e:	07da      	lsls	r2, r3, #31
  405440:	4604      	mov	r4, r0
  405442:	d402      	bmi.n	40544a <_fflush_r+0x32>
  405444:	89ab      	ldrh	r3, [r5, #12]
  405446:	059b      	lsls	r3, r3, #22
  405448:	d507      	bpl.n	40545a <_fflush_r+0x42>
  40544a:	4620      	mov	r0, r4
  40544c:	bd38      	pop	{r3, r4, r5, pc}
  40544e:	4604      	mov	r4, r0
  405450:	4620      	mov	r0, r4
  405452:	bd38      	pop	{r3, r4, r5, pc}
  405454:	f000 f838 	bl	4054c8 <__sinit>
  405458:	e7e4      	b.n	405424 <_fflush_r+0xc>
  40545a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40545c:	f000 fbf6 	bl	405c4c <__retarget_lock_release_recursive>
  405460:	4620      	mov	r0, r4
  405462:	bd38      	pop	{r3, r4, r5, pc}
  405464:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405466:	f000 fbef 	bl	405c48 <__retarget_lock_acquire_recursive>
  40546a:	e7e3      	b.n	405434 <_fflush_r+0x1c>

0040546c <_cleanup_r>:
  40546c:	4901      	ldr	r1, [pc, #4]	; (405474 <_cleanup_r+0x8>)
  40546e:	f000 bbaf 	b.w	405bd0 <_fwalk_reent>
  405472:	bf00      	nop
  405474:	004064e1 	.word	0x004064e1

00405478 <std.isra.0>:
  405478:	b510      	push	{r4, lr}
  40547a:	2300      	movs	r3, #0
  40547c:	4604      	mov	r4, r0
  40547e:	8181      	strh	r1, [r0, #12]
  405480:	81c2      	strh	r2, [r0, #14]
  405482:	6003      	str	r3, [r0, #0]
  405484:	6043      	str	r3, [r0, #4]
  405486:	6083      	str	r3, [r0, #8]
  405488:	6643      	str	r3, [r0, #100]	; 0x64
  40548a:	6103      	str	r3, [r0, #16]
  40548c:	6143      	str	r3, [r0, #20]
  40548e:	6183      	str	r3, [r0, #24]
  405490:	4619      	mov	r1, r3
  405492:	2208      	movs	r2, #8
  405494:	305c      	adds	r0, #92	; 0x5c
  405496:	f7fe fe33 	bl	404100 <memset>
  40549a:	4807      	ldr	r0, [pc, #28]	; (4054b8 <std.isra.0+0x40>)
  40549c:	4907      	ldr	r1, [pc, #28]	; (4054bc <std.isra.0+0x44>)
  40549e:	4a08      	ldr	r2, [pc, #32]	; (4054c0 <std.isra.0+0x48>)
  4054a0:	4b08      	ldr	r3, [pc, #32]	; (4054c4 <std.isra.0+0x4c>)
  4054a2:	6220      	str	r0, [r4, #32]
  4054a4:	61e4      	str	r4, [r4, #28]
  4054a6:	6261      	str	r1, [r4, #36]	; 0x24
  4054a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4054aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4054ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4054b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4054b4:	f000 bbc4 	b.w	405c40 <__retarget_lock_init_recursive>
  4054b8:	00406225 	.word	0x00406225
  4054bc:	00406249 	.word	0x00406249
  4054c0:	00406285 	.word	0x00406285
  4054c4:	004062a5 	.word	0x004062a5

004054c8 <__sinit>:
  4054c8:	b510      	push	{r4, lr}
  4054ca:	4604      	mov	r4, r0
  4054cc:	4812      	ldr	r0, [pc, #72]	; (405518 <__sinit+0x50>)
  4054ce:	f000 fbbb 	bl	405c48 <__retarget_lock_acquire_recursive>
  4054d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4054d4:	b9d2      	cbnz	r2, 40550c <__sinit+0x44>
  4054d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4054da:	4810      	ldr	r0, [pc, #64]	; (40551c <__sinit+0x54>)
  4054dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4054e0:	2103      	movs	r1, #3
  4054e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4054e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4054e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4054ec:	6860      	ldr	r0, [r4, #4]
  4054ee:	2104      	movs	r1, #4
  4054f0:	f7ff ffc2 	bl	405478 <std.isra.0>
  4054f4:	2201      	movs	r2, #1
  4054f6:	2109      	movs	r1, #9
  4054f8:	68a0      	ldr	r0, [r4, #8]
  4054fa:	f7ff ffbd 	bl	405478 <std.isra.0>
  4054fe:	2202      	movs	r2, #2
  405500:	2112      	movs	r1, #18
  405502:	68e0      	ldr	r0, [r4, #12]
  405504:	f7ff ffb8 	bl	405478 <std.isra.0>
  405508:	2301      	movs	r3, #1
  40550a:	63a3      	str	r3, [r4, #56]	; 0x38
  40550c:	4802      	ldr	r0, [pc, #8]	; (405518 <__sinit+0x50>)
  40550e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405512:	f000 bb9b 	b.w	405c4c <__retarget_lock_release_recursive>
  405516:	bf00      	nop
  405518:	2040c514 	.word	0x2040c514
  40551c:	0040546d 	.word	0x0040546d

00405520 <__sfp_lock_acquire>:
  405520:	4801      	ldr	r0, [pc, #4]	; (405528 <__sfp_lock_acquire+0x8>)
  405522:	f000 bb91 	b.w	405c48 <__retarget_lock_acquire_recursive>
  405526:	bf00      	nop
  405528:	2040c528 	.word	0x2040c528

0040552c <__sfp_lock_release>:
  40552c:	4801      	ldr	r0, [pc, #4]	; (405534 <__sfp_lock_release+0x8>)
  40552e:	f000 bb8d 	b.w	405c4c <__retarget_lock_release_recursive>
  405532:	bf00      	nop
  405534:	2040c528 	.word	0x2040c528

00405538 <__libc_fini_array>:
  405538:	b538      	push	{r3, r4, r5, lr}
  40553a:	4c0a      	ldr	r4, [pc, #40]	; (405564 <__libc_fini_array+0x2c>)
  40553c:	4d0a      	ldr	r5, [pc, #40]	; (405568 <__libc_fini_array+0x30>)
  40553e:	1b64      	subs	r4, r4, r5
  405540:	10a4      	asrs	r4, r4, #2
  405542:	d00a      	beq.n	40555a <__libc_fini_array+0x22>
  405544:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405548:	3b01      	subs	r3, #1
  40554a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40554e:	3c01      	subs	r4, #1
  405550:	f855 3904 	ldr.w	r3, [r5], #-4
  405554:	4798      	blx	r3
  405556:	2c00      	cmp	r4, #0
  405558:	d1f9      	bne.n	40554e <__libc_fini_array+0x16>
  40555a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40555e:	f001 bb2b 	b.w	406bb8 <_fini>
  405562:	bf00      	nop
  405564:	00406bc8 	.word	0x00406bc8
  405568:	00406bc4 	.word	0x00406bc4

0040556c <__fputwc>:
  40556c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405570:	b082      	sub	sp, #8
  405572:	4680      	mov	r8, r0
  405574:	4689      	mov	r9, r1
  405576:	4614      	mov	r4, r2
  405578:	f000 fb54 	bl	405c24 <__locale_mb_cur_max>
  40557c:	2801      	cmp	r0, #1
  40557e:	d036      	beq.n	4055ee <__fputwc+0x82>
  405580:	464a      	mov	r2, r9
  405582:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405586:	a901      	add	r1, sp, #4
  405588:	4640      	mov	r0, r8
  40558a:	f000 fee7 	bl	40635c <_wcrtomb_r>
  40558e:	1c42      	adds	r2, r0, #1
  405590:	4606      	mov	r6, r0
  405592:	d025      	beq.n	4055e0 <__fputwc+0x74>
  405594:	b3a8      	cbz	r0, 405602 <__fputwc+0x96>
  405596:	f89d e004 	ldrb.w	lr, [sp, #4]
  40559a:	2500      	movs	r5, #0
  40559c:	f10d 0a04 	add.w	sl, sp, #4
  4055a0:	e009      	b.n	4055b6 <__fputwc+0x4a>
  4055a2:	6823      	ldr	r3, [r4, #0]
  4055a4:	1c5a      	adds	r2, r3, #1
  4055a6:	6022      	str	r2, [r4, #0]
  4055a8:	f883 e000 	strb.w	lr, [r3]
  4055ac:	3501      	adds	r5, #1
  4055ae:	42b5      	cmp	r5, r6
  4055b0:	d227      	bcs.n	405602 <__fputwc+0x96>
  4055b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4055b6:	68a3      	ldr	r3, [r4, #8]
  4055b8:	3b01      	subs	r3, #1
  4055ba:	2b00      	cmp	r3, #0
  4055bc:	60a3      	str	r3, [r4, #8]
  4055be:	daf0      	bge.n	4055a2 <__fputwc+0x36>
  4055c0:	69a7      	ldr	r7, [r4, #24]
  4055c2:	42bb      	cmp	r3, r7
  4055c4:	4671      	mov	r1, lr
  4055c6:	4622      	mov	r2, r4
  4055c8:	4640      	mov	r0, r8
  4055ca:	db02      	blt.n	4055d2 <__fputwc+0x66>
  4055cc:	f1be 0f0a 	cmp.w	lr, #10
  4055d0:	d1e7      	bne.n	4055a2 <__fputwc+0x36>
  4055d2:	f000 fe6b 	bl	4062ac <__swbuf_r>
  4055d6:	1c43      	adds	r3, r0, #1
  4055d8:	d1e8      	bne.n	4055ac <__fputwc+0x40>
  4055da:	b002      	add	sp, #8
  4055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055e0:	89a3      	ldrh	r3, [r4, #12]
  4055e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055e6:	81a3      	strh	r3, [r4, #12]
  4055e8:	b002      	add	sp, #8
  4055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4055f2:	2bfe      	cmp	r3, #254	; 0xfe
  4055f4:	d8c4      	bhi.n	405580 <__fputwc+0x14>
  4055f6:	fa5f fe89 	uxtb.w	lr, r9
  4055fa:	4606      	mov	r6, r0
  4055fc:	f88d e004 	strb.w	lr, [sp, #4]
  405600:	e7cb      	b.n	40559a <__fputwc+0x2e>
  405602:	4648      	mov	r0, r9
  405604:	b002      	add	sp, #8
  405606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40560a:	bf00      	nop

0040560c <_fputwc_r>:
  40560c:	b530      	push	{r4, r5, lr}
  40560e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405610:	f013 0f01 	tst.w	r3, #1
  405614:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405618:	4614      	mov	r4, r2
  40561a:	b083      	sub	sp, #12
  40561c:	4605      	mov	r5, r0
  40561e:	b29a      	uxth	r2, r3
  405620:	d101      	bne.n	405626 <_fputwc_r+0x1a>
  405622:	0590      	lsls	r0, r2, #22
  405624:	d51c      	bpl.n	405660 <_fputwc_r+0x54>
  405626:	0490      	lsls	r0, r2, #18
  405628:	d406      	bmi.n	405638 <_fputwc_r+0x2c>
  40562a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40562c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405634:	81a3      	strh	r3, [r4, #12]
  405636:	6662      	str	r2, [r4, #100]	; 0x64
  405638:	4628      	mov	r0, r5
  40563a:	4622      	mov	r2, r4
  40563c:	f7ff ff96 	bl	40556c <__fputwc>
  405640:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405642:	07da      	lsls	r2, r3, #31
  405644:	4605      	mov	r5, r0
  405646:	d402      	bmi.n	40564e <_fputwc_r+0x42>
  405648:	89a3      	ldrh	r3, [r4, #12]
  40564a:	059b      	lsls	r3, r3, #22
  40564c:	d502      	bpl.n	405654 <_fputwc_r+0x48>
  40564e:	4628      	mov	r0, r5
  405650:	b003      	add	sp, #12
  405652:	bd30      	pop	{r4, r5, pc}
  405654:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405656:	f000 faf9 	bl	405c4c <__retarget_lock_release_recursive>
  40565a:	4628      	mov	r0, r5
  40565c:	b003      	add	sp, #12
  40565e:	bd30      	pop	{r4, r5, pc}
  405660:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405662:	9101      	str	r1, [sp, #4]
  405664:	f000 faf0 	bl	405c48 <__retarget_lock_acquire_recursive>
  405668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40566c:	9901      	ldr	r1, [sp, #4]
  40566e:	b29a      	uxth	r2, r3
  405670:	e7d9      	b.n	405626 <_fputwc_r+0x1a>
  405672:	bf00      	nop

00405674 <_malloc_trim_r>:
  405674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405676:	4f24      	ldr	r7, [pc, #144]	; (405708 <_malloc_trim_r+0x94>)
  405678:	460c      	mov	r4, r1
  40567a:	4606      	mov	r6, r0
  40567c:	f7fe fd8e 	bl	40419c <__malloc_lock>
  405680:	68bb      	ldr	r3, [r7, #8]
  405682:	685d      	ldr	r5, [r3, #4]
  405684:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405688:	310f      	adds	r1, #15
  40568a:	f025 0503 	bic.w	r5, r5, #3
  40568e:	4429      	add	r1, r5
  405690:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405694:	f021 010f 	bic.w	r1, r1, #15
  405698:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40569c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4056a0:	db07      	blt.n	4056b2 <_malloc_trim_r+0x3e>
  4056a2:	2100      	movs	r1, #0
  4056a4:	4630      	mov	r0, r6
  4056a6:	f7fe fd85 	bl	4041b4 <_sbrk_r>
  4056aa:	68bb      	ldr	r3, [r7, #8]
  4056ac:	442b      	add	r3, r5
  4056ae:	4298      	cmp	r0, r3
  4056b0:	d004      	beq.n	4056bc <_malloc_trim_r+0x48>
  4056b2:	4630      	mov	r0, r6
  4056b4:	f7fe fd78 	bl	4041a8 <__malloc_unlock>
  4056b8:	2000      	movs	r0, #0
  4056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056bc:	4261      	negs	r1, r4
  4056be:	4630      	mov	r0, r6
  4056c0:	f7fe fd78 	bl	4041b4 <_sbrk_r>
  4056c4:	3001      	adds	r0, #1
  4056c6:	d00d      	beq.n	4056e4 <_malloc_trim_r+0x70>
  4056c8:	4b10      	ldr	r3, [pc, #64]	; (40570c <_malloc_trim_r+0x98>)
  4056ca:	68ba      	ldr	r2, [r7, #8]
  4056cc:	6819      	ldr	r1, [r3, #0]
  4056ce:	1b2d      	subs	r5, r5, r4
  4056d0:	f045 0501 	orr.w	r5, r5, #1
  4056d4:	4630      	mov	r0, r6
  4056d6:	1b09      	subs	r1, r1, r4
  4056d8:	6055      	str	r5, [r2, #4]
  4056da:	6019      	str	r1, [r3, #0]
  4056dc:	f7fe fd64 	bl	4041a8 <__malloc_unlock>
  4056e0:	2001      	movs	r0, #1
  4056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056e4:	2100      	movs	r1, #0
  4056e6:	4630      	mov	r0, r6
  4056e8:	f7fe fd64 	bl	4041b4 <_sbrk_r>
  4056ec:	68ba      	ldr	r2, [r7, #8]
  4056ee:	1a83      	subs	r3, r0, r2
  4056f0:	2b0f      	cmp	r3, #15
  4056f2:	ddde      	ble.n	4056b2 <_malloc_trim_r+0x3e>
  4056f4:	4c06      	ldr	r4, [pc, #24]	; (405710 <_malloc_trim_r+0x9c>)
  4056f6:	4905      	ldr	r1, [pc, #20]	; (40570c <_malloc_trim_r+0x98>)
  4056f8:	6824      	ldr	r4, [r4, #0]
  4056fa:	f043 0301 	orr.w	r3, r3, #1
  4056fe:	1b00      	subs	r0, r0, r4
  405700:	6053      	str	r3, [r2, #4]
  405702:	6008      	str	r0, [r1, #0]
  405704:	e7d5      	b.n	4056b2 <_malloc_trim_r+0x3e>
  405706:	bf00      	nop
  405708:	20400438 	.word	0x20400438
  40570c:	2040c398 	.word	0x2040c398
  405710:	20400840 	.word	0x20400840

00405714 <_free_r>:
  405714:	2900      	cmp	r1, #0
  405716:	d044      	beq.n	4057a2 <_free_r+0x8e>
  405718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40571c:	460d      	mov	r5, r1
  40571e:	4680      	mov	r8, r0
  405720:	f7fe fd3c 	bl	40419c <__malloc_lock>
  405724:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405728:	4969      	ldr	r1, [pc, #420]	; (4058d0 <_free_r+0x1bc>)
  40572a:	f027 0301 	bic.w	r3, r7, #1
  40572e:	f1a5 0408 	sub.w	r4, r5, #8
  405732:	18e2      	adds	r2, r4, r3
  405734:	688e      	ldr	r6, [r1, #8]
  405736:	6850      	ldr	r0, [r2, #4]
  405738:	42b2      	cmp	r2, r6
  40573a:	f020 0003 	bic.w	r0, r0, #3
  40573e:	d05e      	beq.n	4057fe <_free_r+0xea>
  405740:	07fe      	lsls	r6, r7, #31
  405742:	6050      	str	r0, [r2, #4]
  405744:	d40b      	bmi.n	40575e <_free_r+0x4a>
  405746:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40574a:	1be4      	subs	r4, r4, r7
  40574c:	f101 0e08 	add.w	lr, r1, #8
  405750:	68a5      	ldr	r5, [r4, #8]
  405752:	4575      	cmp	r5, lr
  405754:	443b      	add	r3, r7
  405756:	d06d      	beq.n	405834 <_free_r+0x120>
  405758:	68e7      	ldr	r7, [r4, #12]
  40575a:	60ef      	str	r7, [r5, #12]
  40575c:	60bd      	str	r5, [r7, #8]
  40575e:	1815      	adds	r5, r2, r0
  405760:	686d      	ldr	r5, [r5, #4]
  405762:	07ed      	lsls	r5, r5, #31
  405764:	d53e      	bpl.n	4057e4 <_free_r+0xd0>
  405766:	f043 0201 	orr.w	r2, r3, #1
  40576a:	6062      	str	r2, [r4, #4]
  40576c:	50e3      	str	r3, [r4, r3]
  40576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405772:	d217      	bcs.n	4057a4 <_free_r+0x90>
  405774:	08db      	lsrs	r3, r3, #3
  405776:	1c58      	adds	r0, r3, #1
  405778:	109a      	asrs	r2, r3, #2
  40577a:	684d      	ldr	r5, [r1, #4]
  40577c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405780:	60a7      	str	r7, [r4, #8]
  405782:	2301      	movs	r3, #1
  405784:	4093      	lsls	r3, r2
  405786:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40578a:	432b      	orrs	r3, r5
  40578c:	3a08      	subs	r2, #8
  40578e:	60e2      	str	r2, [r4, #12]
  405790:	604b      	str	r3, [r1, #4]
  405792:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405796:	60fc      	str	r4, [r7, #12]
  405798:	4640      	mov	r0, r8
  40579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40579e:	f7fe bd03 	b.w	4041a8 <__malloc_unlock>
  4057a2:	4770      	bx	lr
  4057a4:	0a5a      	lsrs	r2, r3, #9
  4057a6:	2a04      	cmp	r2, #4
  4057a8:	d852      	bhi.n	405850 <_free_r+0x13c>
  4057aa:	099a      	lsrs	r2, r3, #6
  4057ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4057b0:	00ff      	lsls	r7, r7, #3
  4057b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4057b6:	19c8      	adds	r0, r1, r7
  4057b8:	59ca      	ldr	r2, [r1, r7]
  4057ba:	3808      	subs	r0, #8
  4057bc:	4290      	cmp	r0, r2
  4057be:	d04f      	beq.n	405860 <_free_r+0x14c>
  4057c0:	6851      	ldr	r1, [r2, #4]
  4057c2:	f021 0103 	bic.w	r1, r1, #3
  4057c6:	428b      	cmp	r3, r1
  4057c8:	d232      	bcs.n	405830 <_free_r+0x11c>
  4057ca:	6892      	ldr	r2, [r2, #8]
  4057cc:	4290      	cmp	r0, r2
  4057ce:	d1f7      	bne.n	4057c0 <_free_r+0xac>
  4057d0:	68c3      	ldr	r3, [r0, #12]
  4057d2:	60a0      	str	r0, [r4, #8]
  4057d4:	60e3      	str	r3, [r4, #12]
  4057d6:	609c      	str	r4, [r3, #8]
  4057d8:	60c4      	str	r4, [r0, #12]
  4057da:	4640      	mov	r0, r8
  4057dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057e0:	f7fe bce2 	b.w	4041a8 <__malloc_unlock>
  4057e4:	6895      	ldr	r5, [r2, #8]
  4057e6:	4f3b      	ldr	r7, [pc, #236]	; (4058d4 <_free_r+0x1c0>)
  4057e8:	42bd      	cmp	r5, r7
  4057ea:	4403      	add	r3, r0
  4057ec:	d040      	beq.n	405870 <_free_r+0x15c>
  4057ee:	68d0      	ldr	r0, [r2, #12]
  4057f0:	60e8      	str	r0, [r5, #12]
  4057f2:	f043 0201 	orr.w	r2, r3, #1
  4057f6:	6085      	str	r5, [r0, #8]
  4057f8:	6062      	str	r2, [r4, #4]
  4057fa:	50e3      	str	r3, [r4, r3]
  4057fc:	e7b7      	b.n	40576e <_free_r+0x5a>
  4057fe:	07ff      	lsls	r7, r7, #31
  405800:	4403      	add	r3, r0
  405802:	d407      	bmi.n	405814 <_free_r+0x100>
  405804:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405808:	1aa4      	subs	r4, r4, r2
  40580a:	4413      	add	r3, r2
  40580c:	68a0      	ldr	r0, [r4, #8]
  40580e:	68e2      	ldr	r2, [r4, #12]
  405810:	60c2      	str	r2, [r0, #12]
  405812:	6090      	str	r0, [r2, #8]
  405814:	4a30      	ldr	r2, [pc, #192]	; (4058d8 <_free_r+0x1c4>)
  405816:	6812      	ldr	r2, [r2, #0]
  405818:	f043 0001 	orr.w	r0, r3, #1
  40581c:	4293      	cmp	r3, r2
  40581e:	6060      	str	r0, [r4, #4]
  405820:	608c      	str	r4, [r1, #8]
  405822:	d3b9      	bcc.n	405798 <_free_r+0x84>
  405824:	4b2d      	ldr	r3, [pc, #180]	; (4058dc <_free_r+0x1c8>)
  405826:	4640      	mov	r0, r8
  405828:	6819      	ldr	r1, [r3, #0]
  40582a:	f7ff ff23 	bl	405674 <_malloc_trim_r>
  40582e:	e7b3      	b.n	405798 <_free_r+0x84>
  405830:	4610      	mov	r0, r2
  405832:	e7cd      	b.n	4057d0 <_free_r+0xbc>
  405834:	1811      	adds	r1, r2, r0
  405836:	6849      	ldr	r1, [r1, #4]
  405838:	07c9      	lsls	r1, r1, #31
  40583a:	d444      	bmi.n	4058c6 <_free_r+0x1b2>
  40583c:	6891      	ldr	r1, [r2, #8]
  40583e:	68d2      	ldr	r2, [r2, #12]
  405840:	60ca      	str	r2, [r1, #12]
  405842:	4403      	add	r3, r0
  405844:	f043 0001 	orr.w	r0, r3, #1
  405848:	6091      	str	r1, [r2, #8]
  40584a:	6060      	str	r0, [r4, #4]
  40584c:	50e3      	str	r3, [r4, r3]
  40584e:	e7a3      	b.n	405798 <_free_r+0x84>
  405850:	2a14      	cmp	r2, #20
  405852:	d816      	bhi.n	405882 <_free_r+0x16e>
  405854:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405858:	00ff      	lsls	r7, r7, #3
  40585a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40585e:	e7aa      	b.n	4057b6 <_free_r+0xa2>
  405860:	10aa      	asrs	r2, r5, #2
  405862:	2301      	movs	r3, #1
  405864:	684d      	ldr	r5, [r1, #4]
  405866:	4093      	lsls	r3, r2
  405868:	432b      	orrs	r3, r5
  40586a:	604b      	str	r3, [r1, #4]
  40586c:	4603      	mov	r3, r0
  40586e:	e7b0      	b.n	4057d2 <_free_r+0xbe>
  405870:	f043 0201 	orr.w	r2, r3, #1
  405874:	614c      	str	r4, [r1, #20]
  405876:	610c      	str	r4, [r1, #16]
  405878:	60e5      	str	r5, [r4, #12]
  40587a:	60a5      	str	r5, [r4, #8]
  40587c:	6062      	str	r2, [r4, #4]
  40587e:	50e3      	str	r3, [r4, r3]
  405880:	e78a      	b.n	405798 <_free_r+0x84>
  405882:	2a54      	cmp	r2, #84	; 0x54
  405884:	d806      	bhi.n	405894 <_free_r+0x180>
  405886:	0b1a      	lsrs	r2, r3, #12
  405888:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40588c:	00ff      	lsls	r7, r7, #3
  40588e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405892:	e790      	b.n	4057b6 <_free_r+0xa2>
  405894:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405898:	d806      	bhi.n	4058a8 <_free_r+0x194>
  40589a:	0bda      	lsrs	r2, r3, #15
  40589c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4058a0:	00ff      	lsls	r7, r7, #3
  4058a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4058a6:	e786      	b.n	4057b6 <_free_r+0xa2>
  4058a8:	f240 5054 	movw	r0, #1364	; 0x554
  4058ac:	4282      	cmp	r2, r0
  4058ae:	d806      	bhi.n	4058be <_free_r+0x1aa>
  4058b0:	0c9a      	lsrs	r2, r3, #18
  4058b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4058b6:	00ff      	lsls	r7, r7, #3
  4058b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4058bc:	e77b      	b.n	4057b6 <_free_r+0xa2>
  4058be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4058c2:	257e      	movs	r5, #126	; 0x7e
  4058c4:	e777      	b.n	4057b6 <_free_r+0xa2>
  4058c6:	f043 0101 	orr.w	r1, r3, #1
  4058ca:	6061      	str	r1, [r4, #4]
  4058cc:	6013      	str	r3, [r2, #0]
  4058ce:	e763      	b.n	405798 <_free_r+0x84>
  4058d0:	20400438 	.word	0x20400438
  4058d4:	20400440 	.word	0x20400440
  4058d8:	20400844 	.word	0x20400844
  4058dc:	2040c3c8 	.word	0x2040c3c8

004058e0 <__sfvwrite_r>:
  4058e0:	6893      	ldr	r3, [r2, #8]
  4058e2:	2b00      	cmp	r3, #0
  4058e4:	d073      	beq.n	4059ce <__sfvwrite_r+0xee>
  4058e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058ea:	898b      	ldrh	r3, [r1, #12]
  4058ec:	b083      	sub	sp, #12
  4058ee:	460c      	mov	r4, r1
  4058f0:	0719      	lsls	r1, r3, #28
  4058f2:	9000      	str	r0, [sp, #0]
  4058f4:	4616      	mov	r6, r2
  4058f6:	d526      	bpl.n	405946 <__sfvwrite_r+0x66>
  4058f8:	6922      	ldr	r2, [r4, #16]
  4058fa:	b322      	cbz	r2, 405946 <__sfvwrite_r+0x66>
  4058fc:	f013 0002 	ands.w	r0, r3, #2
  405900:	6835      	ldr	r5, [r6, #0]
  405902:	d02c      	beq.n	40595e <__sfvwrite_r+0x7e>
  405904:	f04f 0900 	mov.w	r9, #0
  405908:	4fb0      	ldr	r7, [pc, #704]	; (405bcc <__sfvwrite_r+0x2ec>)
  40590a:	46c8      	mov	r8, r9
  40590c:	46b2      	mov	sl, r6
  40590e:	45b8      	cmp	r8, r7
  405910:	4643      	mov	r3, r8
  405912:	464a      	mov	r2, r9
  405914:	bf28      	it	cs
  405916:	463b      	movcs	r3, r7
  405918:	9800      	ldr	r0, [sp, #0]
  40591a:	f1b8 0f00 	cmp.w	r8, #0
  40591e:	d050      	beq.n	4059c2 <__sfvwrite_r+0xe2>
  405920:	69e1      	ldr	r1, [r4, #28]
  405922:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405924:	47b0      	blx	r6
  405926:	2800      	cmp	r0, #0
  405928:	dd58      	ble.n	4059dc <__sfvwrite_r+0xfc>
  40592a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40592e:	1a1b      	subs	r3, r3, r0
  405930:	4481      	add	r9, r0
  405932:	eba8 0800 	sub.w	r8, r8, r0
  405936:	f8ca 3008 	str.w	r3, [sl, #8]
  40593a:	2b00      	cmp	r3, #0
  40593c:	d1e7      	bne.n	40590e <__sfvwrite_r+0x2e>
  40593e:	2000      	movs	r0, #0
  405940:	b003      	add	sp, #12
  405942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405946:	4621      	mov	r1, r4
  405948:	9800      	ldr	r0, [sp, #0]
  40594a:	f7ff fc51 	bl	4051f0 <__swsetup_r>
  40594e:	2800      	cmp	r0, #0
  405950:	f040 8133 	bne.w	405bba <__sfvwrite_r+0x2da>
  405954:	89a3      	ldrh	r3, [r4, #12]
  405956:	6835      	ldr	r5, [r6, #0]
  405958:	f013 0002 	ands.w	r0, r3, #2
  40595c:	d1d2      	bne.n	405904 <__sfvwrite_r+0x24>
  40595e:	f013 0901 	ands.w	r9, r3, #1
  405962:	d145      	bne.n	4059f0 <__sfvwrite_r+0x110>
  405964:	464f      	mov	r7, r9
  405966:	9601      	str	r6, [sp, #4]
  405968:	b337      	cbz	r7, 4059b8 <__sfvwrite_r+0xd8>
  40596a:	059a      	lsls	r2, r3, #22
  40596c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405970:	f140 8083 	bpl.w	405a7a <__sfvwrite_r+0x19a>
  405974:	4547      	cmp	r7, r8
  405976:	46c3      	mov	fp, r8
  405978:	f0c0 80ab 	bcc.w	405ad2 <__sfvwrite_r+0x1f2>
  40597c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405980:	f040 80ac 	bne.w	405adc <__sfvwrite_r+0x1fc>
  405984:	6820      	ldr	r0, [r4, #0]
  405986:	46ba      	mov	sl, r7
  405988:	465a      	mov	r2, fp
  40598a:	4649      	mov	r1, r9
  40598c:	f000 fa40 	bl	405e10 <memmove>
  405990:	68a2      	ldr	r2, [r4, #8]
  405992:	6823      	ldr	r3, [r4, #0]
  405994:	eba2 0208 	sub.w	r2, r2, r8
  405998:	445b      	add	r3, fp
  40599a:	60a2      	str	r2, [r4, #8]
  40599c:	6023      	str	r3, [r4, #0]
  40599e:	9a01      	ldr	r2, [sp, #4]
  4059a0:	6893      	ldr	r3, [r2, #8]
  4059a2:	eba3 030a 	sub.w	r3, r3, sl
  4059a6:	44d1      	add	r9, sl
  4059a8:	eba7 070a 	sub.w	r7, r7, sl
  4059ac:	6093      	str	r3, [r2, #8]
  4059ae:	2b00      	cmp	r3, #0
  4059b0:	d0c5      	beq.n	40593e <__sfvwrite_r+0x5e>
  4059b2:	89a3      	ldrh	r3, [r4, #12]
  4059b4:	2f00      	cmp	r7, #0
  4059b6:	d1d8      	bne.n	40596a <__sfvwrite_r+0x8a>
  4059b8:	f8d5 9000 	ldr.w	r9, [r5]
  4059bc:	686f      	ldr	r7, [r5, #4]
  4059be:	3508      	adds	r5, #8
  4059c0:	e7d2      	b.n	405968 <__sfvwrite_r+0x88>
  4059c2:	f8d5 9000 	ldr.w	r9, [r5]
  4059c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4059ca:	3508      	adds	r5, #8
  4059cc:	e79f      	b.n	40590e <__sfvwrite_r+0x2e>
  4059ce:	2000      	movs	r0, #0
  4059d0:	4770      	bx	lr
  4059d2:	4621      	mov	r1, r4
  4059d4:	9800      	ldr	r0, [sp, #0]
  4059d6:	f7ff fd1f 	bl	405418 <_fflush_r>
  4059da:	b370      	cbz	r0, 405a3a <__sfvwrite_r+0x15a>
  4059dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059e4:	f04f 30ff 	mov.w	r0, #4294967295
  4059e8:	81a3      	strh	r3, [r4, #12]
  4059ea:	b003      	add	sp, #12
  4059ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059f0:	4681      	mov	r9, r0
  4059f2:	4633      	mov	r3, r6
  4059f4:	464e      	mov	r6, r9
  4059f6:	46a8      	mov	r8, r5
  4059f8:	469a      	mov	sl, r3
  4059fa:	464d      	mov	r5, r9
  4059fc:	b34e      	cbz	r6, 405a52 <__sfvwrite_r+0x172>
  4059fe:	b380      	cbz	r0, 405a62 <__sfvwrite_r+0x182>
  405a00:	6820      	ldr	r0, [r4, #0]
  405a02:	6923      	ldr	r3, [r4, #16]
  405a04:	6962      	ldr	r2, [r4, #20]
  405a06:	45b1      	cmp	r9, r6
  405a08:	46cb      	mov	fp, r9
  405a0a:	bf28      	it	cs
  405a0c:	46b3      	movcs	fp, r6
  405a0e:	4298      	cmp	r0, r3
  405a10:	465f      	mov	r7, fp
  405a12:	d904      	bls.n	405a1e <__sfvwrite_r+0x13e>
  405a14:	68a3      	ldr	r3, [r4, #8]
  405a16:	4413      	add	r3, r2
  405a18:	459b      	cmp	fp, r3
  405a1a:	f300 80a6 	bgt.w	405b6a <__sfvwrite_r+0x28a>
  405a1e:	4593      	cmp	fp, r2
  405a20:	db4b      	blt.n	405aba <__sfvwrite_r+0x1da>
  405a22:	4613      	mov	r3, r2
  405a24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405a26:	69e1      	ldr	r1, [r4, #28]
  405a28:	9800      	ldr	r0, [sp, #0]
  405a2a:	462a      	mov	r2, r5
  405a2c:	47b8      	blx	r7
  405a2e:	1e07      	subs	r7, r0, #0
  405a30:	ddd4      	ble.n	4059dc <__sfvwrite_r+0xfc>
  405a32:	ebb9 0907 	subs.w	r9, r9, r7
  405a36:	d0cc      	beq.n	4059d2 <__sfvwrite_r+0xf2>
  405a38:	2001      	movs	r0, #1
  405a3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  405a3e:	1bdb      	subs	r3, r3, r7
  405a40:	443d      	add	r5, r7
  405a42:	1bf6      	subs	r6, r6, r7
  405a44:	f8ca 3008 	str.w	r3, [sl, #8]
  405a48:	2b00      	cmp	r3, #0
  405a4a:	f43f af78 	beq.w	40593e <__sfvwrite_r+0x5e>
  405a4e:	2e00      	cmp	r6, #0
  405a50:	d1d5      	bne.n	4059fe <__sfvwrite_r+0x11e>
  405a52:	f108 0308 	add.w	r3, r8, #8
  405a56:	e913 0060 	ldmdb	r3, {r5, r6}
  405a5a:	4698      	mov	r8, r3
  405a5c:	3308      	adds	r3, #8
  405a5e:	2e00      	cmp	r6, #0
  405a60:	d0f9      	beq.n	405a56 <__sfvwrite_r+0x176>
  405a62:	4632      	mov	r2, r6
  405a64:	210a      	movs	r1, #10
  405a66:	4628      	mov	r0, r5
  405a68:	f000 f982 	bl	405d70 <memchr>
  405a6c:	2800      	cmp	r0, #0
  405a6e:	f000 80a1 	beq.w	405bb4 <__sfvwrite_r+0x2d4>
  405a72:	3001      	adds	r0, #1
  405a74:	eba0 0905 	sub.w	r9, r0, r5
  405a78:	e7c2      	b.n	405a00 <__sfvwrite_r+0x120>
  405a7a:	6820      	ldr	r0, [r4, #0]
  405a7c:	6923      	ldr	r3, [r4, #16]
  405a7e:	4298      	cmp	r0, r3
  405a80:	d802      	bhi.n	405a88 <__sfvwrite_r+0x1a8>
  405a82:	6963      	ldr	r3, [r4, #20]
  405a84:	429f      	cmp	r7, r3
  405a86:	d25d      	bcs.n	405b44 <__sfvwrite_r+0x264>
  405a88:	45b8      	cmp	r8, r7
  405a8a:	bf28      	it	cs
  405a8c:	46b8      	movcs	r8, r7
  405a8e:	4642      	mov	r2, r8
  405a90:	4649      	mov	r1, r9
  405a92:	f000 f9bd 	bl	405e10 <memmove>
  405a96:	68a3      	ldr	r3, [r4, #8]
  405a98:	6822      	ldr	r2, [r4, #0]
  405a9a:	eba3 0308 	sub.w	r3, r3, r8
  405a9e:	4442      	add	r2, r8
  405aa0:	60a3      	str	r3, [r4, #8]
  405aa2:	6022      	str	r2, [r4, #0]
  405aa4:	b10b      	cbz	r3, 405aaa <__sfvwrite_r+0x1ca>
  405aa6:	46c2      	mov	sl, r8
  405aa8:	e779      	b.n	40599e <__sfvwrite_r+0xbe>
  405aaa:	4621      	mov	r1, r4
  405aac:	9800      	ldr	r0, [sp, #0]
  405aae:	f7ff fcb3 	bl	405418 <_fflush_r>
  405ab2:	2800      	cmp	r0, #0
  405ab4:	d192      	bne.n	4059dc <__sfvwrite_r+0xfc>
  405ab6:	46c2      	mov	sl, r8
  405ab8:	e771      	b.n	40599e <__sfvwrite_r+0xbe>
  405aba:	465a      	mov	r2, fp
  405abc:	4629      	mov	r1, r5
  405abe:	f000 f9a7 	bl	405e10 <memmove>
  405ac2:	68a2      	ldr	r2, [r4, #8]
  405ac4:	6823      	ldr	r3, [r4, #0]
  405ac6:	eba2 020b 	sub.w	r2, r2, fp
  405aca:	445b      	add	r3, fp
  405acc:	60a2      	str	r2, [r4, #8]
  405ace:	6023      	str	r3, [r4, #0]
  405ad0:	e7af      	b.n	405a32 <__sfvwrite_r+0x152>
  405ad2:	6820      	ldr	r0, [r4, #0]
  405ad4:	46b8      	mov	r8, r7
  405ad6:	46ba      	mov	sl, r7
  405ad8:	46bb      	mov	fp, r7
  405ada:	e755      	b.n	405988 <__sfvwrite_r+0xa8>
  405adc:	6962      	ldr	r2, [r4, #20]
  405ade:	6820      	ldr	r0, [r4, #0]
  405ae0:	6921      	ldr	r1, [r4, #16]
  405ae2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405ae6:	eba0 0a01 	sub.w	sl, r0, r1
  405aea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405aee:	f10a 0001 	add.w	r0, sl, #1
  405af2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405af6:	4438      	add	r0, r7
  405af8:	4540      	cmp	r0, r8
  405afa:	4642      	mov	r2, r8
  405afc:	bf84      	itt	hi
  405afe:	4680      	movhi	r8, r0
  405b00:	4642      	movhi	r2, r8
  405b02:	055b      	lsls	r3, r3, #21
  405b04:	d544      	bpl.n	405b90 <__sfvwrite_r+0x2b0>
  405b06:	4611      	mov	r1, r2
  405b08:	9800      	ldr	r0, [sp, #0]
  405b0a:	f7fd ffaf 	bl	403a6c <_malloc_r>
  405b0e:	4683      	mov	fp, r0
  405b10:	2800      	cmp	r0, #0
  405b12:	d055      	beq.n	405bc0 <__sfvwrite_r+0x2e0>
  405b14:	4652      	mov	r2, sl
  405b16:	6921      	ldr	r1, [r4, #16]
  405b18:	f7fe fa58 	bl	403fcc <memcpy>
  405b1c:	89a3      	ldrh	r3, [r4, #12]
  405b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405b26:	81a3      	strh	r3, [r4, #12]
  405b28:	eb0b 000a 	add.w	r0, fp, sl
  405b2c:	eba8 030a 	sub.w	r3, r8, sl
  405b30:	f8c4 b010 	str.w	fp, [r4, #16]
  405b34:	f8c4 8014 	str.w	r8, [r4, #20]
  405b38:	6020      	str	r0, [r4, #0]
  405b3a:	60a3      	str	r3, [r4, #8]
  405b3c:	46b8      	mov	r8, r7
  405b3e:	46ba      	mov	sl, r7
  405b40:	46bb      	mov	fp, r7
  405b42:	e721      	b.n	405988 <__sfvwrite_r+0xa8>
  405b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405b48:	42b9      	cmp	r1, r7
  405b4a:	bf28      	it	cs
  405b4c:	4639      	movcs	r1, r7
  405b4e:	464a      	mov	r2, r9
  405b50:	fb91 f1f3 	sdiv	r1, r1, r3
  405b54:	9800      	ldr	r0, [sp, #0]
  405b56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405b58:	fb03 f301 	mul.w	r3, r3, r1
  405b5c:	69e1      	ldr	r1, [r4, #28]
  405b5e:	47b0      	blx	r6
  405b60:	f1b0 0a00 	subs.w	sl, r0, #0
  405b64:	f73f af1b 	bgt.w	40599e <__sfvwrite_r+0xbe>
  405b68:	e738      	b.n	4059dc <__sfvwrite_r+0xfc>
  405b6a:	461a      	mov	r2, r3
  405b6c:	4629      	mov	r1, r5
  405b6e:	9301      	str	r3, [sp, #4]
  405b70:	f000 f94e 	bl	405e10 <memmove>
  405b74:	6822      	ldr	r2, [r4, #0]
  405b76:	9b01      	ldr	r3, [sp, #4]
  405b78:	9800      	ldr	r0, [sp, #0]
  405b7a:	441a      	add	r2, r3
  405b7c:	6022      	str	r2, [r4, #0]
  405b7e:	4621      	mov	r1, r4
  405b80:	f7ff fc4a 	bl	405418 <_fflush_r>
  405b84:	9b01      	ldr	r3, [sp, #4]
  405b86:	2800      	cmp	r0, #0
  405b88:	f47f af28 	bne.w	4059dc <__sfvwrite_r+0xfc>
  405b8c:	461f      	mov	r7, r3
  405b8e:	e750      	b.n	405a32 <__sfvwrite_r+0x152>
  405b90:	9800      	ldr	r0, [sp, #0]
  405b92:	f000 f9a1 	bl	405ed8 <_realloc_r>
  405b96:	4683      	mov	fp, r0
  405b98:	2800      	cmp	r0, #0
  405b9a:	d1c5      	bne.n	405b28 <__sfvwrite_r+0x248>
  405b9c:	9d00      	ldr	r5, [sp, #0]
  405b9e:	6921      	ldr	r1, [r4, #16]
  405ba0:	4628      	mov	r0, r5
  405ba2:	f7ff fdb7 	bl	405714 <_free_r>
  405ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405baa:	220c      	movs	r2, #12
  405bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405bb0:	602a      	str	r2, [r5, #0]
  405bb2:	e715      	b.n	4059e0 <__sfvwrite_r+0x100>
  405bb4:	f106 0901 	add.w	r9, r6, #1
  405bb8:	e722      	b.n	405a00 <__sfvwrite_r+0x120>
  405bba:	f04f 30ff 	mov.w	r0, #4294967295
  405bbe:	e6bf      	b.n	405940 <__sfvwrite_r+0x60>
  405bc0:	9a00      	ldr	r2, [sp, #0]
  405bc2:	230c      	movs	r3, #12
  405bc4:	6013      	str	r3, [r2, #0]
  405bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bca:	e709      	b.n	4059e0 <__sfvwrite_r+0x100>
  405bcc:	7ffffc00 	.word	0x7ffffc00

00405bd0 <_fwalk_reent>:
  405bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405bd4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405bd8:	d01f      	beq.n	405c1a <_fwalk_reent+0x4a>
  405bda:	4688      	mov	r8, r1
  405bdc:	4606      	mov	r6, r0
  405bde:	f04f 0900 	mov.w	r9, #0
  405be2:	687d      	ldr	r5, [r7, #4]
  405be4:	68bc      	ldr	r4, [r7, #8]
  405be6:	3d01      	subs	r5, #1
  405be8:	d411      	bmi.n	405c0e <_fwalk_reent+0x3e>
  405bea:	89a3      	ldrh	r3, [r4, #12]
  405bec:	2b01      	cmp	r3, #1
  405bee:	f105 35ff 	add.w	r5, r5, #4294967295
  405bf2:	d908      	bls.n	405c06 <_fwalk_reent+0x36>
  405bf4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405bf8:	3301      	adds	r3, #1
  405bfa:	4621      	mov	r1, r4
  405bfc:	4630      	mov	r0, r6
  405bfe:	d002      	beq.n	405c06 <_fwalk_reent+0x36>
  405c00:	47c0      	blx	r8
  405c02:	ea49 0900 	orr.w	r9, r9, r0
  405c06:	1c6b      	adds	r3, r5, #1
  405c08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405c0c:	d1ed      	bne.n	405bea <_fwalk_reent+0x1a>
  405c0e:	683f      	ldr	r7, [r7, #0]
  405c10:	2f00      	cmp	r7, #0
  405c12:	d1e6      	bne.n	405be2 <_fwalk_reent+0x12>
  405c14:	4648      	mov	r0, r9
  405c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c1a:	46b9      	mov	r9, r7
  405c1c:	4648      	mov	r0, r9
  405c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c22:	bf00      	nop

00405c24 <__locale_mb_cur_max>:
  405c24:	4b04      	ldr	r3, [pc, #16]	; (405c38 <__locale_mb_cur_max+0x14>)
  405c26:	4a05      	ldr	r2, [pc, #20]	; (405c3c <__locale_mb_cur_max+0x18>)
  405c28:	681b      	ldr	r3, [r3, #0]
  405c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405c2c:	2b00      	cmp	r3, #0
  405c2e:	bf08      	it	eq
  405c30:	4613      	moveq	r3, r2
  405c32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405c36:	4770      	bx	lr
  405c38:	2040000c 	.word	0x2040000c
  405c3c:	2040084c 	.word	0x2040084c

00405c40 <__retarget_lock_init_recursive>:
  405c40:	4770      	bx	lr
  405c42:	bf00      	nop

00405c44 <__retarget_lock_close_recursive>:
  405c44:	4770      	bx	lr
  405c46:	bf00      	nop

00405c48 <__retarget_lock_acquire_recursive>:
  405c48:	4770      	bx	lr
  405c4a:	bf00      	nop

00405c4c <__retarget_lock_release_recursive>:
  405c4c:	4770      	bx	lr
  405c4e:	bf00      	nop

00405c50 <__swhatbuf_r>:
  405c50:	b570      	push	{r4, r5, r6, lr}
  405c52:	460c      	mov	r4, r1
  405c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c58:	2900      	cmp	r1, #0
  405c5a:	b090      	sub	sp, #64	; 0x40
  405c5c:	4615      	mov	r5, r2
  405c5e:	461e      	mov	r6, r3
  405c60:	db14      	blt.n	405c8c <__swhatbuf_r+0x3c>
  405c62:	aa01      	add	r2, sp, #4
  405c64:	f000 fc9e 	bl	4065a4 <_fstat_r>
  405c68:	2800      	cmp	r0, #0
  405c6a:	db0f      	blt.n	405c8c <__swhatbuf_r+0x3c>
  405c6c:	9a02      	ldr	r2, [sp, #8]
  405c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405c72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405c76:	fab2 f282 	clz	r2, r2
  405c7a:	0952      	lsrs	r2, r2, #5
  405c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405c84:	6032      	str	r2, [r6, #0]
  405c86:	602b      	str	r3, [r5, #0]
  405c88:	b010      	add	sp, #64	; 0x40
  405c8a:	bd70      	pop	{r4, r5, r6, pc}
  405c8c:	89a2      	ldrh	r2, [r4, #12]
  405c8e:	2300      	movs	r3, #0
  405c90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405c94:	6033      	str	r3, [r6, #0]
  405c96:	d004      	beq.n	405ca2 <__swhatbuf_r+0x52>
  405c98:	2240      	movs	r2, #64	; 0x40
  405c9a:	4618      	mov	r0, r3
  405c9c:	602a      	str	r2, [r5, #0]
  405c9e:	b010      	add	sp, #64	; 0x40
  405ca0:	bd70      	pop	{r4, r5, r6, pc}
  405ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405ca6:	602b      	str	r3, [r5, #0]
  405ca8:	b010      	add	sp, #64	; 0x40
  405caa:	bd70      	pop	{r4, r5, r6, pc}

00405cac <__smakebuf_r>:
  405cac:	898a      	ldrh	r2, [r1, #12]
  405cae:	0792      	lsls	r2, r2, #30
  405cb0:	460b      	mov	r3, r1
  405cb2:	d506      	bpl.n	405cc2 <__smakebuf_r+0x16>
  405cb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405cb8:	2101      	movs	r1, #1
  405cba:	601a      	str	r2, [r3, #0]
  405cbc:	611a      	str	r2, [r3, #16]
  405cbe:	6159      	str	r1, [r3, #20]
  405cc0:	4770      	bx	lr
  405cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405cc4:	b083      	sub	sp, #12
  405cc6:	ab01      	add	r3, sp, #4
  405cc8:	466a      	mov	r2, sp
  405cca:	460c      	mov	r4, r1
  405ccc:	4606      	mov	r6, r0
  405cce:	f7ff ffbf 	bl	405c50 <__swhatbuf_r>
  405cd2:	9900      	ldr	r1, [sp, #0]
  405cd4:	4605      	mov	r5, r0
  405cd6:	4630      	mov	r0, r6
  405cd8:	f7fd fec8 	bl	403a6c <_malloc_r>
  405cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ce0:	b1d8      	cbz	r0, 405d1a <__smakebuf_r+0x6e>
  405ce2:	9a01      	ldr	r2, [sp, #4]
  405ce4:	4f15      	ldr	r7, [pc, #84]	; (405d3c <__smakebuf_r+0x90>)
  405ce6:	9900      	ldr	r1, [sp, #0]
  405ce8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405cee:	81a3      	strh	r3, [r4, #12]
  405cf0:	6020      	str	r0, [r4, #0]
  405cf2:	6120      	str	r0, [r4, #16]
  405cf4:	6161      	str	r1, [r4, #20]
  405cf6:	b91a      	cbnz	r2, 405d00 <__smakebuf_r+0x54>
  405cf8:	432b      	orrs	r3, r5
  405cfa:	81a3      	strh	r3, [r4, #12]
  405cfc:	b003      	add	sp, #12
  405cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d00:	4630      	mov	r0, r6
  405d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405d06:	f000 fc61 	bl	4065cc <_isatty_r>
  405d0a:	b1a0      	cbz	r0, 405d36 <__smakebuf_r+0x8a>
  405d0c:	89a3      	ldrh	r3, [r4, #12]
  405d0e:	f023 0303 	bic.w	r3, r3, #3
  405d12:	f043 0301 	orr.w	r3, r3, #1
  405d16:	b21b      	sxth	r3, r3
  405d18:	e7ee      	b.n	405cf8 <__smakebuf_r+0x4c>
  405d1a:	059a      	lsls	r2, r3, #22
  405d1c:	d4ee      	bmi.n	405cfc <__smakebuf_r+0x50>
  405d1e:	f023 0303 	bic.w	r3, r3, #3
  405d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405d26:	f043 0302 	orr.w	r3, r3, #2
  405d2a:	2101      	movs	r1, #1
  405d2c:	81a3      	strh	r3, [r4, #12]
  405d2e:	6022      	str	r2, [r4, #0]
  405d30:	6122      	str	r2, [r4, #16]
  405d32:	6161      	str	r1, [r4, #20]
  405d34:	e7e2      	b.n	405cfc <__smakebuf_r+0x50>
  405d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d3a:	e7dd      	b.n	405cf8 <__smakebuf_r+0x4c>
  405d3c:	0040546d 	.word	0x0040546d

00405d40 <__ascii_mbtowc>:
  405d40:	b082      	sub	sp, #8
  405d42:	b149      	cbz	r1, 405d58 <__ascii_mbtowc+0x18>
  405d44:	b15a      	cbz	r2, 405d5e <__ascii_mbtowc+0x1e>
  405d46:	b16b      	cbz	r3, 405d64 <__ascii_mbtowc+0x24>
  405d48:	7813      	ldrb	r3, [r2, #0]
  405d4a:	600b      	str	r3, [r1, #0]
  405d4c:	7812      	ldrb	r2, [r2, #0]
  405d4e:	1c10      	adds	r0, r2, #0
  405d50:	bf18      	it	ne
  405d52:	2001      	movne	r0, #1
  405d54:	b002      	add	sp, #8
  405d56:	4770      	bx	lr
  405d58:	a901      	add	r1, sp, #4
  405d5a:	2a00      	cmp	r2, #0
  405d5c:	d1f3      	bne.n	405d46 <__ascii_mbtowc+0x6>
  405d5e:	4610      	mov	r0, r2
  405d60:	b002      	add	sp, #8
  405d62:	4770      	bx	lr
  405d64:	f06f 0001 	mvn.w	r0, #1
  405d68:	e7f4      	b.n	405d54 <__ascii_mbtowc+0x14>
  405d6a:	bf00      	nop
  405d6c:	0000      	movs	r0, r0
	...

00405d70 <memchr>:
  405d70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405d74:	2a10      	cmp	r2, #16
  405d76:	db2b      	blt.n	405dd0 <memchr+0x60>
  405d78:	f010 0f07 	tst.w	r0, #7
  405d7c:	d008      	beq.n	405d90 <memchr+0x20>
  405d7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405d82:	3a01      	subs	r2, #1
  405d84:	428b      	cmp	r3, r1
  405d86:	d02d      	beq.n	405de4 <memchr+0x74>
  405d88:	f010 0f07 	tst.w	r0, #7
  405d8c:	b342      	cbz	r2, 405de0 <memchr+0x70>
  405d8e:	d1f6      	bne.n	405d7e <memchr+0xe>
  405d90:	b4f0      	push	{r4, r5, r6, r7}
  405d92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405d96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405d9a:	f022 0407 	bic.w	r4, r2, #7
  405d9e:	f07f 0700 	mvns.w	r7, #0
  405da2:	2300      	movs	r3, #0
  405da4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405da8:	3c08      	subs	r4, #8
  405daa:	ea85 0501 	eor.w	r5, r5, r1
  405dae:	ea86 0601 	eor.w	r6, r6, r1
  405db2:	fa85 f547 	uadd8	r5, r5, r7
  405db6:	faa3 f587 	sel	r5, r3, r7
  405dba:	fa86 f647 	uadd8	r6, r6, r7
  405dbe:	faa5 f687 	sel	r6, r5, r7
  405dc2:	b98e      	cbnz	r6, 405de8 <memchr+0x78>
  405dc4:	d1ee      	bne.n	405da4 <memchr+0x34>
  405dc6:	bcf0      	pop	{r4, r5, r6, r7}
  405dc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405dcc:	f002 0207 	and.w	r2, r2, #7
  405dd0:	b132      	cbz	r2, 405de0 <memchr+0x70>
  405dd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405dd6:	3a01      	subs	r2, #1
  405dd8:	ea83 0301 	eor.w	r3, r3, r1
  405ddc:	b113      	cbz	r3, 405de4 <memchr+0x74>
  405dde:	d1f8      	bne.n	405dd2 <memchr+0x62>
  405de0:	2000      	movs	r0, #0
  405de2:	4770      	bx	lr
  405de4:	3801      	subs	r0, #1
  405de6:	4770      	bx	lr
  405de8:	2d00      	cmp	r5, #0
  405dea:	bf06      	itte	eq
  405dec:	4635      	moveq	r5, r6
  405dee:	3803      	subeq	r0, #3
  405df0:	3807      	subne	r0, #7
  405df2:	f015 0f01 	tst.w	r5, #1
  405df6:	d107      	bne.n	405e08 <memchr+0x98>
  405df8:	3001      	adds	r0, #1
  405dfa:	f415 7f80 	tst.w	r5, #256	; 0x100
  405dfe:	bf02      	ittt	eq
  405e00:	3001      	addeq	r0, #1
  405e02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405e06:	3001      	addeq	r0, #1
  405e08:	bcf0      	pop	{r4, r5, r6, r7}
  405e0a:	3801      	subs	r0, #1
  405e0c:	4770      	bx	lr
  405e0e:	bf00      	nop

00405e10 <memmove>:
  405e10:	4288      	cmp	r0, r1
  405e12:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e14:	d90d      	bls.n	405e32 <memmove+0x22>
  405e16:	188b      	adds	r3, r1, r2
  405e18:	4298      	cmp	r0, r3
  405e1a:	d20a      	bcs.n	405e32 <memmove+0x22>
  405e1c:	1884      	adds	r4, r0, r2
  405e1e:	2a00      	cmp	r2, #0
  405e20:	d051      	beq.n	405ec6 <memmove+0xb6>
  405e22:	4622      	mov	r2, r4
  405e24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405e28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405e2c:	4299      	cmp	r1, r3
  405e2e:	d1f9      	bne.n	405e24 <memmove+0x14>
  405e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e32:	2a0f      	cmp	r2, #15
  405e34:	d948      	bls.n	405ec8 <memmove+0xb8>
  405e36:	ea41 0300 	orr.w	r3, r1, r0
  405e3a:	079b      	lsls	r3, r3, #30
  405e3c:	d146      	bne.n	405ecc <memmove+0xbc>
  405e3e:	f100 0410 	add.w	r4, r0, #16
  405e42:	f101 0310 	add.w	r3, r1, #16
  405e46:	4615      	mov	r5, r2
  405e48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405e4c:	f844 6c10 	str.w	r6, [r4, #-16]
  405e50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405e54:	f844 6c0c 	str.w	r6, [r4, #-12]
  405e58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405e5c:	f844 6c08 	str.w	r6, [r4, #-8]
  405e60:	3d10      	subs	r5, #16
  405e62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405e66:	f844 6c04 	str.w	r6, [r4, #-4]
  405e6a:	2d0f      	cmp	r5, #15
  405e6c:	f103 0310 	add.w	r3, r3, #16
  405e70:	f104 0410 	add.w	r4, r4, #16
  405e74:	d8e8      	bhi.n	405e48 <memmove+0x38>
  405e76:	f1a2 0310 	sub.w	r3, r2, #16
  405e7a:	f023 030f 	bic.w	r3, r3, #15
  405e7e:	f002 0e0f 	and.w	lr, r2, #15
  405e82:	3310      	adds	r3, #16
  405e84:	f1be 0f03 	cmp.w	lr, #3
  405e88:	4419      	add	r1, r3
  405e8a:	4403      	add	r3, r0
  405e8c:	d921      	bls.n	405ed2 <memmove+0xc2>
  405e8e:	1f1e      	subs	r6, r3, #4
  405e90:	460d      	mov	r5, r1
  405e92:	4674      	mov	r4, lr
  405e94:	3c04      	subs	r4, #4
  405e96:	f855 7b04 	ldr.w	r7, [r5], #4
  405e9a:	f846 7f04 	str.w	r7, [r6, #4]!
  405e9e:	2c03      	cmp	r4, #3
  405ea0:	d8f8      	bhi.n	405e94 <memmove+0x84>
  405ea2:	f1ae 0404 	sub.w	r4, lr, #4
  405ea6:	f024 0403 	bic.w	r4, r4, #3
  405eaa:	3404      	adds	r4, #4
  405eac:	4421      	add	r1, r4
  405eae:	4423      	add	r3, r4
  405eb0:	f002 0203 	and.w	r2, r2, #3
  405eb4:	b162      	cbz	r2, 405ed0 <memmove+0xc0>
  405eb6:	3b01      	subs	r3, #1
  405eb8:	440a      	add	r2, r1
  405eba:	f811 4b01 	ldrb.w	r4, [r1], #1
  405ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
  405ec2:	428a      	cmp	r2, r1
  405ec4:	d1f9      	bne.n	405eba <memmove+0xaa>
  405ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ec8:	4603      	mov	r3, r0
  405eca:	e7f3      	b.n	405eb4 <memmove+0xa4>
  405ecc:	4603      	mov	r3, r0
  405ece:	e7f2      	b.n	405eb6 <memmove+0xa6>
  405ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ed2:	4672      	mov	r2, lr
  405ed4:	e7ee      	b.n	405eb4 <memmove+0xa4>
  405ed6:	bf00      	nop

00405ed8 <_realloc_r>:
  405ed8:	2900      	cmp	r1, #0
  405eda:	f000 8095 	beq.w	406008 <_realloc_r+0x130>
  405ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ee2:	460d      	mov	r5, r1
  405ee4:	4616      	mov	r6, r2
  405ee6:	b083      	sub	sp, #12
  405ee8:	4680      	mov	r8, r0
  405eea:	f106 070b 	add.w	r7, r6, #11
  405eee:	f7fe f955 	bl	40419c <__malloc_lock>
  405ef2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405ef6:	2f16      	cmp	r7, #22
  405ef8:	f02e 0403 	bic.w	r4, lr, #3
  405efc:	f1a5 0908 	sub.w	r9, r5, #8
  405f00:	d83c      	bhi.n	405f7c <_realloc_r+0xa4>
  405f02:	2210      	movs	r2, #16
  405f04:	4617      	mov	r7, r2
  405f06:	42be      	cmp	r6, r7
  405f08:	d83d      	bhi.n	405f86 <_realloc_r+0xae>
  405f0a:	4294      	cmp	r4, r2
  405f0c:	da43      	bge.n	405f96 <_realloc_r+0xbe>
  405f0e:	4bc4      	ldr	r3, [pc, #784]	; (406220 <_realloc_r+0x348>)
  405f10:	6899      	ldr	r1, [r3, #8]
  405f12:	eb09 0004 	add.w	r0, r9, r4
  405f16:	4288      	cmp	r0, r1
  405f18:	f000 80b4 	beq.w	406084 <_realloc_r+0x1ac>
  405f1c:	6843      	ldr	r3, [r0, #4]
  405f1e:	f023 0101 	bic.w	r1, r3, #1
  405f22:	4401      	add	r1, r0
  405f24:	6849      	ldr	r1, [r1, #4]
  405f26:	07c9      	lsls	r1, r1, #31
  405f28:	d54c      	bpl.n	405fc4 <_realloc_r+0xec>
  405f2a:	f01e 0f01 	tst.w	lr, #1
  405f2e:	f000 809b 	beq.w	406068 <_realloc_r+0x190>
  405f32:	4631      	mov	r1, r6
  405f34:	4640      	mov	r0, r8
  405f36:	f7fd fd99 	bl	403a6c <_malloc_r>
  405f3a:	4606      	mov	r6, r0
  405f3c:	2800      	cmp	r0, #0
  405f3e:	d03a      	beq.n	405fb6 <_realloc_r+0xde>
  405f40:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f44:	f023 0301 	bic.w	r3, r3, #1
  405f48:	444b      	add	r3, r9
  405f4a:	f1a0 0208 	sub.w	r2, r0, #8
  405f4e:	429a      	cmp	r2, r3
  405f50:	f000 8121 	beq.w	406196 <_realloc_r+0x2be>
  405f54:	1f22      	subs	r2, r4, #4
  405f56:	2a24      	cmp	r2, #36	; 0x24
  405f58:	f200 8107 	bhi.w	40616a <_realloc_r+0x292>
  405f5c:	2a13      	cmp	r2, #19
  405f5e:	f200 80db 	bhi.w	406118 <_realloc_r+0x240>
  405f62:	4603      	mov	r3, r0
  405f64:	462a      	mov	r2, r5
  405f66:	6811      	ldr	r1, [r2, #0]
  405f68:	6019      	str	r1, [r3, #0]
  405f6a:	6851      	ldr	r1, [r2, #4]
  405f6c:	6059      	str	r1, [r3, #4]
  405f6e:	6892      	ldr	r2, [r2, #8]
  405f70:	609a      	str	r2, [r3, #8]
  405f72:	4629      	mov	r1, r5
  405f74:	4640      	mov	r0, r8
  405f76:	f7ff fbcd 	bl	405714 <_free_r>
  405f7a:	e01c      	b.n	405fb6 <_realloc_r+0xde>
  405f7c:	f027 0707 	bic.w	r7, r7, #7
  405f80:	2f00      	cmp	r7, #0
  405f82:	463a      	mov	r2, r7
  405f84:	dabf      	bge.n	405f06 <_realloc_r+0x2e>
  405f86:	2600      	movs	r6, #0
  405f88:	230c      	movs	r3, #12
  405f8a:	4630      	mov	r0, r6
  405f8c:	f8c8 3000 	str.w	r3, [r8]
  405f90:	b003      	add	sp, #12
  405f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f96:	462e      	mov	r6, r5
  405f98:	1be3      	subs	r3, r4, r7
  405f9a:	2b0f      	cmp	r3, #15
  405f9c:	d81e      	bhi.n	405fdc <_realloc_r+0x104>
  405f9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405fa2:	f003 0301 	and.w	r3, r3, #1
  405fa6:	4323      	orrs	r3, r4
  405fa8:	444c      	add	r4, r9
  405faa:	f8c9 3004 	str.w	r3, [r9, #4]
  405fae:	6863      	ldr	r3, [r4, #4]
  405fb0:	f043 0301 	orr.w	r3, r3, #1
  405fb4:	6063      	str	r3, [r4, #4]
  405fb6:	4640      	mov	r0, r8
  405fb8:	f7fe f8f6 	bl	4041a8 <__malloc_unlock>
  405fbc:	4630      	mov	r0, r6
  405fbe:	b003      	add	sp, #12
  405fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fc4:	f023 0303 	bic.w	r3, r3, #3
  405fc8:	18e1      	adds	r1, r4, r3
  405fca:	4291      	cmp	r1, r2
  405fcc:	db1f      	blt.n	40600e <_realloc_r+0x136>
  405fce:	68c3      	ldr	r3, [r0, #12]
  405fd0:	6882      	ldr	r2, [r0, #8]
  405fd2:	462e      	mov	r6, r5
  405fd4:	60d3      	str	r3, [r2, #12]
  405fd6:	460c      	mov	r4, r1
  405fd8:	609a      	str	r2, [r3, #8]
  405fda:	e7dd      	b.n	405f98 <_realloc_r+0xc0>
  405fdc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405fe0:	eb09 0107 	add.w	r1, r9, r7
  405fe4:	f002 0201 	and.w	r2, r2, #1
  405fe8:	444c      	add	r4, r9
  405fea:	f043 0301 	orr.w	r3, r3, #1
  405fee:	4317      	orrs	r7, r2
  405ff0:	f8c9 7004 	str.w	r7, [r9, #4]
  405ff4:	604b      	str	r3, [r1, #4]
  405ff6:	6863      	ldr	r3, [r4, #4]
  405ff8:	f043 0301 	orr.w	r3, r3, #1
  405ffc:	3108      	adds	r1, #8
  405ffe:	6063      	str	r3, [r4, #4]
  406000:	4640      	mov	r0, r8
  406002:	f7ff fb87 	bl	405714 <_free_r>
  406006:	e7d6      	b.n	405fb6 <_realloc_r+0xde>
  406008:	4611      	mov	r1, r2
  40600a:	f7fd bd2f 	b.w	403a6c <_malloc_r>
  40600e:	f01e 0f01 	tst.w	lr, #1
  406012:	d18e      	bne.n	405f32 <_realloc_r+0x5a>
  406014:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406018:	eba9 0a01 	sub.w	sl, r9, r1
  40601c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406020:	f021 0103 	bic.w	r1, r1, #3
  406024:	440b      	add	r3, r1
  406026:	4423      	add	r3, r4
  406028:	4293      	cmp	r3, r2
  40602a:	db25      	blt.n	406078 <_realloc_r+0x1a0>
  40602c:	68c2      	ldr	r2, [r0, #12]
  40602e:	6881      	ldr	r1, [r0, #8]
  406030:	4656      	mov	r6, sl
  406032:	60ca      	str	r2, [r1, #12]
  406034:	6091      	str	r1, [r2, #8]
  406036:	f8da 100c 	ldr.w	r1, [sl, #12]
  40603a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40603e:	1f22      	subs	r2, r4, #4
  406040:	2a24      	cmp	r2, #36	; 0x24
  406042:	60c1      	str	r1, [r0, #12]
  406044:	6088      	str	r0, [r1, #8]
  406046:	f200 8094 	bhi.w	406172 <_realloc_r+0x29a>
  40604a:	2a13      	cmp	r2, #19
  40604c:	d96f      	bls.n	40612e <_realloc_r+0x256>
  40604e:	6829      	ldr	r1, [r5, #0]
  406050:	f8ca 1008 	str.w	r1, [sl, #8]
  406054:	6869      	ldr	r1, [r5, #4]
  406056:	f8ca 100c 	str.w	r1, [sl, #12]
  40605a:	2a1b      	cmp	r2, #27
  40605c:	f200 80a2 	bhi.w	4061a4 <_realloc_r+0x2cc>
  406060:	3508      	adds	r5, #8
  406062:	f10a 0210 	add.w	r2, sl, #16
  406066:	e063      	b.n	406130 <_realloc_r+0x258>
  406068:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40606c:	eba9 0a03 	sub.w	sl, r9, r3
  406070:	f8da 1004 	ldr.w	r1, [sl, #4]
  406074:	f021 0103 	bic.w	r1, r1, #3
  406078:	1863      	adds	r3, r4, r1
  40607a:	4293      	cmp	r3, r2
  40607c:	f6ff af59 	blt.w	405f32 <_realloc_r+0x5a>
  406080:	4656      	mov	r6, sl
  406082:	e7d8      	b.n	406036 <_realloc_r+0x15e>
  406084:	6841      	ldr	r1, [r0, #4]
  406086:	f021 0b03 	bic.w	fp, r1, #3
  40608a:	44a3      	add	fp, r4
  40608c:	f107 0010 	add.w	r0, r7, #16
  406090:	4583      	cmp	fp, r0
  406092:	da56      	bge.n	406142 <_realloc_r+0x26a>
  406094:	f01e 0f01 	tst.w	lr, #1
  406098:	f47f af4b 	bne.w	405f32 <_realloc_r+0x5a>
  40609c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4060a0:	eba9 0a01 	sub.w	sl, r9, r1
  4060a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4060a8:	f021 0103 	bic.w	r1, r1, #3
  4060ac:	448b      	add	fp, r1
  4060ae:	4558      	cmp	r0, fp
  4060b0:	dce2      	bgt.n	406078 <_realloc_r+0x1a0>
  4060b2:	4656      	mov	r6, sl
  4060b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4060b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4060bc:	1f22      	subs	r2, r4, #4
  4060be:	2a24      	cmp	r2, #36	; 0x24
  4060c0:	60c1      	str	r1, [r0, #12]
  4060c2:	6088      	str	r0, [r1, #8]
  4060c4:	f200 808f 	bhi.w	4061e6 <_realloc_r+0x30e>
  4060c8:	2a13      	cmp	r2, #19
  4060ca:	f240 808a 	bls.w	4061e2 <_realloc_r+0x30a>
  4060ce:	6829      	ldr	r1, [r5, #0]
  4060d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4060d4:	6869      	ldr	r1, [r5, #4]
  4060d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4060da:	2a1b      	cmp	r2, #27
  4060dc:	f200 808a 	bhi.w	4061f4 <_realloc_r+0x31c>
  4060e0:	3508      	adds	r5, #8
  4060e2:	f10a 0210 	add.w	r2, sl, #16
  4060e6:	6829      	ldr	r1, [r5, #0]
  4060e8:	6011      	str	r1, [r2, #0]
  4060ea:	6869      	ldr	r1, [r5, #4]
  4060ec:	6051      	str	r1, [r2, #4]
  4060ee:	68a9      	ldr	r1, [r5, #8]
  4060f0:	6091      	str	r1, [r2, #8]
  4060f2:	eb0a 0107 	add.w	r1, sl, r7
  4060f6:	ebab 0207 	sub.w	r2, fp, r7
  4060fa:	f042 0201 	orr.w	r2, r2, #1
  4060fe:	6099      	str	r1, [r3, #8]
  406100:	604a      	str	r2, [r1, #4]
  406102:	f8da 3004 	ldr.w	r3, [sl, #4]
  406106:	f003 0301 	and.w	r3, r3, #1
  40610a:	431f      	orrs	r7, r3
  40610c:	4640      	mov	r0, r8
  40610e:	f8ca 7004 	str.w	r7, [sl, #4]
  406112:	f7fe f849 	bl	4041a8 <__malloc_unlock>
  406116:	e751      	b.n	405fbc <_realloc_r+0xe4>
  406118:	682b      	ldr	r3, [r5, #0]
  40611a:	6003      	str	r3, [r0, #0]
  40611c:	686b      	ldr	r3, [r5, #4]
  40611e:	6043      	str	r3, [r0, #4]
  406120:	2a1b      	cmp	r2, #27
  406122:	d82d      	bhi.n	406180 <_realloc_r+0x2a8>
  406124:	f100 0308 	add.w	r3, r0, #8
  406128:	f105 0208 	add.w	r2, r5, #8
  40612c:	e71b      	b.n	405f66 <_realloc_r+0x8e>
  40612e:	4632      	mov	r2, r6
  406130:	6829      	ldr	r1, [r5, #0]
  406132:	6011      	str	r1, [r2, #0]
  406134:	6869      	ldr	r1, [r5, #4]
  406136:	6051      	str	r1, [r2, #4]
  406138:	68a9      	ldr	r1, [r5, #8]
  40613a:	6091      	str	r1, [r2, #8]
  40613c:	461c      	mov	r4, r3
  40613e:	46d1      	mov	r9, sl
  406140:	e72a      	b.n	405f98 <_realloc_r+0xc0>
  406142:	eb09 0107 	add.w	r1, r9, r7
  406146:	ebab 0b07 	sub.w	fp, fp, r7
  40614a:	f04b 0201 	orr.w	r2, fp, #1
  40614e:	6099      	str	r1, [r3, #8]
  406150:	604a      	str	r2, [r1, #4]
  406152:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406156:	f003 0301 	and.w	r3, r3, #1
  40615a:	431f      	orrs	r7, r3
  40615c:	4640      	mov	r0, r8
  40615e:	f845 7c04 	str.w	r7, [r5, #-4]
  406162:	f7fe f821 	bl	4041a8 <__malloc_unlock>
  406166:	462e      	mov	r6, r5
  406168:	e728      	b.n	405fbc <_realloc_r+0xe4>
  40616a:	4629      	mov	r1, r5
  40616c:	f7ff fe50 	bl	405e10 <memmove>
  406170:	e6ff      	b.n	405f72 <_realloc_r+0x9a>
  406172:	4629      	mov	r1, r5
  406174:	4630      	mov	r0, r6
  406176:	461c      	mov	r4, r3
  406178:	46d1      	mov	r9, sl
  40617a:	f7ff fe49 	bl	405e10 <memmove>
  40617e:	e70b      	b.n	405f98 <_realloc_r+0xc0>
  406180:	68ab      	ldr	r3, [r5, #8]
  406182:	6083      	str	r3, [r0, #8]
  406184:	68eb      	ldr	r3, [r5, #12]
  406186:	60c3      	str	r3, [r0, #12]
  406188:	2a24      	cmp	r2, #36	; 0x24
  40618a:	d017      	beq.n	4061bc <_realloc_r+0x2e4>
  40618c:	f100 0310 	add.w	r3, r0, #16
  406190:	f105 0210 	add.w	r2, r5, #16
  406194:	e6e7      	b.n	405f66 <_realloc_r+0x8e>
  406196:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40619a:	f023 0303 	bic.w	r3, r3, #3
  40619e:	441c      	add	r4, r3
  4061a0:	462e      	mov	r6, r5
  4061a2:	e6f9      	b.n	405f98 <_realloc_r+0xc0>
  4061a4:	68a9      	ldr	r1, [r5, #8]
  4061a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4061aa:	68e9      	ldr	r1, [r5, #12]
  4061ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4061b0:	2a24      	cmp	r2, #36	; 0x24
  4061b2:	d00c      	beq.n	4061ce <_realloc_r+0x2f6>
  4061b4:	3510      	adds	r5, #16
  4061b6:	f10a 0218 	add.w	r2, sl, #24
  4061ba:	e7b9      	b.n	406130 <_realloc_r+0x258>
  4061bc:	692b      	ldr	r3, [r5, #16]
  4061be:	6103      	str	r3, [r0, #16]
  4061c0:	696b      	ldr	r3, [r5, #20]
  4061c2:	6143      	str	r3, [r0, #20]
  4061c4:	f105 0218 	add.w	r2, r5, #24
  4061c8:	f100 0318 	add.w	r3, r0, #24
  4061cc:	e6cb      	b.n	405f66 <_realloc_r+0x8e>
  4061ce:	692a      	ldr	r2, [r5, #16]
  4061d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4061d4:	696a      	ldr	r2, [r5, #20]
  4061d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4061da:	3518      	adds	r5, #24
  4061dc:	f10a 0220 	add.w	r2, sl, #32
  4061e0:	e7a6      	b.n	406130 <_realloc_r+0x258>
  4061e2:	4632      	mov	r2, r6
  4061e4:	e77f      	b.n	4060e6 <_realloc_r+0x20e>
  4061e6:	4629      	mov	r1, r5
  4061e8:	4630      	mov	r0, r6
  4061ea:	9301      	str	r3, [sp, #4]
  4061ec:	f7ff fe10 	bl	405e10 <memmove>
  4061f0:	9b01      	ldr	r3, [sp, #4]
  4061f2:	e77e      	b.n	4060f2 <_realloc_r+0x21a>
  4061f4:	68a9      	ldr	r1, [r5, #8]
  4061f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4061fa:	68e9      	ldr	r1, [r5, #12]
  4061fc:	f8ca 1014 	str.w	r1, [sl, #20]
  406200:	2a24      	cmp	r2, #36	; 0x24
  406202:	d003      	beq.n	40620c <_realloc_r+0x334>
  406204:	3510      	adds	r5, #16
  406206:	f10a 0218 	add.w	r2, sl, #24
  40620a:	e76c      	b.n	4060e6 <_realloc_r+0x20e>
  40620c:	692a      	ldr	r2, [r5, #16]
  40620e:	f8ca 2018 	str.w	r2, [sl, #24]
  406212:	696a      	ldr	r2, [r5, #20]
  406214:	f8ca 201c 	str.w	r2, [sl, #28]
  406218:	3518      	adds	r5, #24
  40621a:	f10a 0220 	add.w	r2, sl, #32
  40621e:	e762      	b.n	4060e6 <_realloc_r+0x20e>
  406220:	20400438 	.word	0x20400438

00406224 <__sread>:
  406224:	b510      	push	{r4, lr}
  406226:	460c      	mov	r4, r1
  406228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40622c:	f000 f9f6 	bl	40661c <_read_r>
  406230:	2800      	cmp	r0, #0
  406232:	db03      	blt.n	40623c <__sread+0x18>
  406234:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406236:	4403      	add	r3, r0
  406238:	6523      	str	r3, [r4, #80]	; 0x50
  40623a:	bd10      	pop	{r4, pc}
  40623c:	89a3      	ldrh	r3, [r4, #12]
  40623e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406242:	81a3      	strh	r3, [r4, #12]
  406244:	bd10      	pop	{r4, pc}
  406246:	bf00      	nop

00406248 <__swrite>:
  406248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40624c:	4616      	mov	r6, r2
  40624e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406252:	461f      	mov	r7, r3
  406254:	05d3      	lsls	r3, r2, #23
  406256:	460c      	mov	r4, r1
  406258:	4605      	mov	r5, r0
  40625a:	d507      	bpl.n	40626c <__swrite+0x24>
  40625c:	2200      	movs	r2, #0
  40625e:	2302      	movs	r3, #2
  406260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406264:	f000 f9c4 	bl	4065f0 <_lseek_r>
  406268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40626c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406270:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406274:	81a2      	strh	r2, [r4, #12]
  406276:	463b      	mov	r3, r7
  406278:	4632      	mov	r2, r6
  40627a:	4628      	mov	r0, r5
  40627c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406280:	f000 b8a4 	b.w	4063cc <_write_r>

00406284 <__sseek>:
  406284:	b510      	push	{r4, lr}
  406286:	460c      	mov	r4, r1
  406288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40628c:	f000 f9b0 	bl	4065f0 <_lseek_r>
  406290:	89a3      	ldrh	r3, [r4, #12]
  406292:	1c42      	adds	r2, r0, #1
  406294:	bf0e      	itee	eq
  406296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40629a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40629e:	6520      	strne	r0, [r4, #80]	; 0x50
  4062a0:	81a3      	strh	r3, [r4, #12]
  4062a2:	bd10      	pop	{r4, pc}

004062a4 <__sclose>:
  4062a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4062a8:	f000 b908 	b.w	4064bc <_close_r>

004062ac <__swbuf_r>:
  4062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4062ae:	460d      	mov	r5, r1
  4062b0:	4614      	mov	r4, r2
  4062b2:	4606      	mov	r6, r0
  4062b4:	b110      	cbz	r0, 4062bc <__swbuf_r+0x10>
  4062b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4062b8:	2b00      	cmp	r3, #0
  4062ba:	d04b      	beq.n	406354 <__swbuf_r+0xa8>
  4062bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4062c0:	69a3      	ldr	r3, [r4, #24]
  4062c2:	60a3      	str	r3, [r4, #8]
  4062c4:	b291      	uxth	r1, r2
  4062c6:	0708      	lsls	r0, r1, #28
  4062c8:	d539      	bpl.n	40633e <__swbuf_r+0x92>
  4062ca:	6923      	ldr	r3, [r4, #16]
  4062cc:	2b00      	cmp	r3, #0
  4062ce:	d036      	beq.n	40633e <__swbuf_r+0x92>
  4062d0:	b2ed      	uxtb	r5, r5
  4062d2:	0489      	lsls	r1, r1, #18
  4062d4:	462f      	mov	r7, r5
  4062d6:	d515      	bpl.n	406304 <__swbuf_r+0x58>
  4062d8:	6822      	ldr	r2, [r4, #0]
  4062da:	6961      	ldr	r1, [r4, #20]
  4062dc:	1ad3      	subs	r3, r2, r3
  4062de:	428b      	cmp	r3, r1
  4062e0:	da1c      	bge.n	40631c <__swbuf_r+0x70>
  4062e2:	3301      	adds	r3, #1
  4062e4:	68a1      	ldr	r1, [r4, #8]
  4062e6:	1c50      	adds	r0, r2, #1
  4062e8:	3901      	subs	r1, #1
  4062ea:	60a1      	str	r1, [r4, #8]
  4062ec:	6020      	str	r0, [r4, #0]
  4062ee:	7015      	strb	r5, [r2, #0]
  4062f0:	6962      	ldr	r2, [r4, #20]
  4062f2:	429a      	cmp	r2, r3
  4062f4:	d01a      	beq.n	40632c <__swbuf_r+0x80>
  4062f6:	89a3      	ldrh	r3, [r4, #12]
  4062f8:	07db      	lsls	r3, r3, #31
  4062fa:	d501      	bpl.n	406300 <__swbuf_r+0x54>
  4062fc:	2d0a      	cmp	r5, #10
  4062fe:	d015      	beq.n	40632c <__swbuf_r+0x80>
  406300:	4638      	mov	r0, r7
  406302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406304:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406306:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40630a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40630e:	81a2      	strh	r2, [r4, #12]
  406310:	6822      	ldr	r2, [r4, #0]
  406312:	6661      	str	r1, [r4, #100]	; 0x64
  406314:	6961      	ldr	r1, [r4, #20]
  406316:	1ad3      	subs	r3, r2, r3
  406318:	428b      	cmp	r3, r1
  40631a:	dbe2      	blt.n	4062e2 <__swbuf_r+0x36>
  40631c:	4621      	mov	r1, r4
  40631e:	4630      	mov	r0, r6
  406320:	f7ff f87a 	bl	405418 <_fflush_r>
  406324:	b940      	cbnz	r0, 406338 <__swbuf_r+0x8c>
  406326:	6822      	ldr	r2, [r4, #0]
  406328:	2301      	movs	r3, #1
  40632a:	e7db      	b.n	4062e4 <__swbuf_r+0x38>
  40632c:	4621      	mov	r1, r4
  40632e:	4630      	mov	r0, r6
  406330:	f7ff f872 	bl	405418 <_fflush_r>
  406334:	2800      	cmp	r0, #0
  406336:	d0e3      	beq.n	406300 <__swbuf_r+0x54>
  406338:	f04f 37ff 	mov.w	r7, #4294967295
  40633c:	e7e0      	b.n	406300 <__swbuf_r+0x54>
  40633e:	4621      	mov	r1, r4
  406340:	4630      	mov	r0, r6
  406342:	f7fe ff55 	bl	4051f0 <__swsetup_r>
  406346:	2800      	cmp	r0, #0
  406348:	d1f6      	bne.n	406338 <__swbuf_r+0x8c>
  40634a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40634e:	6923      	ldr	r3, [r4, #16]
  406350:	b291      	uxth	r1, r2
  406352:	e7bd      	b.n	4062d0 <__swbuf_r+0x24>
  406354:	f7ff f8b8 	bl	4054c8 <__sinit>
  406358:	e7b0      	b.n	4062bc <__swbuf_r+0x10>
  40635a:	bf00      	nop

0040635c <_wcrtomb_r>:
  40635c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40635e:	4606      	mov	r6, r0
  406360:	b085      	sub	sp, #20
  406362:	461f      	mov	r7, r3
  406364:	b189      	cbz	r1, 40638a <_wcrtomb_r+0x2e>
  406366:	4c10      	ldr	r4, [pc, #64]	; (4063a8 <_wcrtomb_r+0x4c>)
  406368:	4d10      	ldr	r5, [pc, #64]	; (4063ac <_wcrtomb_r+0x50>)
  40636a:	6824      	ldr	r4, [r4, #0]
  40636c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40636e:	2c00      	cmp	r4, #0
  406370:	bf08      	it	eq
  406372:	462c      	moveq	r4, r5
  406374:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406378:	47a0      	blx	r4
  40637a:	1c43      	adds	r3, r0, #1
  40637c:	d103      	bne.n	406386 <_wcrtomb_r+0x2a>
  40637e:	2200      	movs	r2, #0
  406380:	238a      	movs	r3, #138	; 0x8a
  406382:	603a      	str	r2, [r7, #0]
  406384:	6033      	str	r3, [r6, #0]
  406386:	b005      	add	sp, #20
  406388:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40638a:	460c      	mov	r4, r1
  40638c:	4906      	ldr	r1, [pc, #24]	; (4063a8 <_wcrtomb_r+0x4c>)
  40638e:	4a07      	ldr	r2, [pc, #28]	; (4063ac <_wcrtomb_r+0x50>)
  406390:	6809      	ldr	r1, [r1, #0]
  406392:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406394:	2900      	cmp	r1, #0
  406396:	bf08      	it	eq
  406398:	4611      	moveq	r1, r2
  40639a:	4622      	mov	r2, r4
  40639c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4063a0:	a901      	add	r1, sp, #4
  4063a2:	47a0      	blx	r4
  4063a4:	e7e9      	b.n	40637a <_wcrtomb_r+0x1e>
  4063a6:	bf00      	nop
  4063a8:	2040000c 	.word	0x2040000c
  4063ac:	2040084c 	.word	0x2040084c

004063b0 <__ascii_wctomb>:
  4063b0:	b121      	cbz	r1, 4063bc <__ascii_wctomb+0xc>
  4063b2:	2aff      	cmp	r2, #255	; 0xff
  4063b4:	d804      	bhi.n	4063c0 <__ascii_wctomb+0x10>
  4063b6:	700a      	strb	r2, [r1, #0]
  4063b8:	2001      	movs	r0, #1
  4063ba:	4770      	bx	lr
  4063bc:	4608      	mov	r0, r1
  4063be:	4770      	bx	lr
  4063c0:	238a      	movs	r3, #138	; 0x8a
  4063c2:	6003      	str	r3, [r0, #0]
  4063c4:	f04f 30ff 	mov.w	r0, #4294967295
  4063c8:	4770      	bx	lr
  4063ca:	bf00      	nop

004063cc <_write_r>:
  4063cc:	b570      	push	{r4, r5, r6, lr}
  4063ce:	460d      	mov	r5, r1
  4063d0:	4c08      	ldr	r4, [pc, #32]	; (4063f4 <_write_r+0x28>)
  4063d2:	4611      	mov	r1, r2
  4063d4:	4606      	mov	r6, r0
  4063d6:	461a      	mov	r2, r3
  4063d8:	4628      	mov	r0, r5
  4063da:	2300      	movs	r3, #0
  4063dc:	6023      	str	r3, [r4, #0]
  4063de:	f7f9 ffbd 	bl	40035c <_write>
  4063e2:	1c43      	adds	r3, r0, #1
  4063e4:	d000      	beq.n	4063e8 <_write_r+0x1c>
  4063e6:	bd70      	pop	{r4, r5, r6, pc}
  4063e8:	6823      	ldr	r3, [r4, #0]
  4063ea:	2b00      	cmp	r3, #0
  4063ec:	d0fb      	beq.n	4063e6 <_write_r+0x1a>
  4063ee:	6033      	str	r3, [r6, #0]
  4063f0:	bd70      	pop	{r4, r5, r6, pc}
  4063f2:	bf00      	nop
  4063f4:	2040c52c 	.word	0x2040c52c

004063f8 <__register_exitproc>:
  4063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4063fc:	4d2c      	ldr	r5, [pc, #176]	; (4064b0 <__register_exitproc+0xb8>)
  4063fe:	4606      	mov	r6, r0
  406400:	6828      	ldr	r0, [r5, #0]
  406402:	4698      	mov	r8, r3
  406404:	460f      	mov	r7, r1
  406406:	4691      	mov	r9, r2
  406408:	f7ff fc1e 	bl	405c48 <__retarget_lock_acquire_recursive>
  40640c:	4b29      	ldr	r3, [pc, #164]	; (4064b4 <__register_exitproc+0xbc>)
  40640e:	681c      	ldr	r4, [r3, #0]
  406410:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406414:	2b00      	cmp	r3, #0
  406416:	d03e      	beq.n	406496 <__register_exitproc+0x9e>
  406418:	685a      	ldr	r2, [r3, #4]
  40641a:	2a1f      	cmp	r2, #31
  40641c:	dc1c      	bgt.n	406458 <__register_exitproc+0x60>
  40641e:	f102 0e01 	add.w	lr, r2, #1
  406422:	b176      	cbz	r6, 406442 <__register_exitproc+0x4a>
  406424:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406428:	2401      	movs	r4, #1
  40642a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40642e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406432:	4094      	lsls	r4, r2
  406434:	4320      	orrs	r0, r4
  406436:	2e02      	cmp	r6, #2
  406438:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40643c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406440:	d023      	beq.n	40648a <__register_exitproc+0x92>
  406442:	3202      	adds	r2, #2
  406444:	f8c3 e004 	str.w	lr, [r3, #4]
  406448:	6828      	ldr	r0, [r5, #0]
  40644a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40644e:	f7ff fbfd 	bl	405c4c <__retarget_lock_release_recursive>
  406452:	2000      	movs	r0, #0
  406454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406458:	4b17      	ldr	r3, [pc, #92]	; (4064b8 <__register_exitproc+0xc0>)
  40645a:	b30b      	cbz	r3, 4064a0 <__register_exitproc+0xa8>
  40645c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406460:	f7fd fafc 	bl	403a5c <malloc>
  406464:	4603      	mov	r3, r0
  406466:	b1d8      	cbz	r0, 4064a0 <__register_exitproc+0xa8>
  406468:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40646c:	6002      	str	r2, [r0, #0]
  40646e:	2100      	movs	r1, #0
  406470:	6041      	str	r1, [r0, #4]
  406472:	460a      	mov	r2, r1
  406474:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406478:	f04f 0e01 	mov.w	lr, #1
  40647c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406480:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406484:	2e00      	cmp	r6, #0
  406486:	d0dc      	beq.n	406442 <__register_exitproc+0x4a>
  406488:	e7cc      	b.n	406424 <__register_exitproc+0x2c>
  40648a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40648e:	430c      	orrs	r4, r1
  406490:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406494:	e7d5      	b.n	406442 <__register_exitproc+0x4a>
  406496:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40649a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40649e:	e7bb      	b.n	406418 <__register_exitproc+0x20>
  4064a0:	6828      	ldr	r0, [r5, #0]
  4064a2:	f7ff fbd3 	bl	405c4c <__retarget_lock_release_recursive>
  4064a6:	f04f 30ff 	mov.w	r0, #4294967295
  4064aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4064ae:	bf00      	nop
  4064b0:	20400848 	.word	0x20400848
  4064b4:	00406a3c 	.word	0x00406a3c
  4064b8:	00403a5d 	.word	0x00403a5d

004064bc <_close_r>:
  4064bc:	b538      	push	{r3, r4, r5, lr}
  4064be:	4c07      	ldr	r4, [pc, #28]	; (4064dc <_close_r+0x20>)
  4064c0:	2300      	movs	r3, #0
  4064c2:	4605      	mov	r5, r0
  4064c4:	4608      	mov	r0, r1
  4064c6:	6023      	str	r3, [r4, #0]
  4064c8:	f7fa fdca 	bl	401060 <_close>
  4064cc:	1c43      	adds	r3, r0, #1
  4064ce:	d000      	beq.n	4064d2 <_close_r+0x16>
  4064d0:	bd38      	pop	{r3, r4, r5, pc}
  4064d2:	6823      	ldr	r3, [r4, #0]
  4064d4:	2b00      	cmp	r3, #0
  4064d6:	d0fb      	beq.n	4064d0 <_close_r+0x14>
  4064d8:	602b      	str	r3, [r5, #0]
  4064da:	bd38      	pop	{r3, r4, r5, pc}
  4064dc:	2040c52c 	.word	0x2040c52c

004064e0 <_fclose_r>:
  4064e0:	b570      	push	{r4, r5, r6, lr}
  4064e2:	b159      	cbz	r1, 4064fc <_fclose_r+0x1c>
  4064e4:	4605      	mov	r5, r0
  4064e6:	460c      	mov	r4, r1
  4064e8:	b110      	cbz	r0, 4064f0 <_fclose_r+0x10>
  4064ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4064ec:	2b00      	cmp	r3, #0
  4064ee:	d03c      	beq.n	40656a <_fclose_r+0x8a>
  4064f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4064f2:	07d8      	lsls	r0, r3, #31
  4064f4:	d505      	bpl.n	406502 <_fclose_r+0x22>
  4064f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064fa:	b92b      	cbnz	r3, 406508 <_fclose_r+0x28>
  4064fc:	2600      	movs	r6, #0
  4064fe:	4630      	mov	r0, r6
  406500:	bd70      	pop	{r4, r5, r6, pc}
  406502:	89a3      	ldrh	r3, [r4, #12]
  406504:	0599      	lsls	r1, r3, #22
  406506:	d53c      	bpl.n	406582 <_fclose_r+0xa2>
  406508:	4621      	mov	r1, r4
  40650a:	4628      	mov	r0, r5
  40650c:	f7fe fee4 	bl	4052d8 <__sflush_r>
  406510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406512:	4606      	mov	r6, r0
  406514:	b133      	cbz	r3, 406524 <_fclose_r+0x44>
  406516:	69e1      	ldr	r1, [r4, #28]
  406518:	4628      	mov	r0, r5
  40651a:	4798      	blx	r3
  40651c:	2800      	cmp	r0, #0
  40651e:	bfb8      	it	lt
  406520:	f04f 36ff 	movlt.w	r6, #4294967295
  406524:	89a3      	ldrh	r3, [r4, #12]
  406526:	061a      	lsls	r2, r3, #24
  406528:	d422      	bmi.n	406570 <_fclose_r+0x90>
  40652a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40652c:	b141      	cbz	r1, 406540 <_fclose_r+0x60>
  40652e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406532:	4299      	cmp	r1, r3
  406534:	d002      	beq.n	40653c <_fclose_r+0x5c>
  406536:	4628      	mov	r0, r5
  406538:	f7ff f8ec 	bl	405714 <_free_r>
  40653c:	2300      	movs	r3, #0
  40653e:	6323      	str	r3, [r4, #48]	; 0x30
  406540:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406542:	b121      	cbz	r1, 40654e <_fclose_r+0x6e>
  406544:	4628      	mov	r0, r5
  406546:	f7ff f8e5 	bl	405714 <_free_r>
  40654a:	2300      	movs	r3, #0
  40654c:	6463      	str	r3, [r4, #68]	; 0x44
  40654e:	f7fe ffe7 	bl	405520 <__sfp_lock_acquire>
  406552:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406554:	2200      	movs	r2, #0
  406556:	07db      	lsls	r3, r3, #31
  406558:	81a2      	strh	r2, [r4, #12]
  40655a:	d50e      	bpl.n	40657a <_fclose_r+0x9a>
  40655c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40655e:	f7ff fb71 	bl	405c44 <__retarget_lock_close_recursive>
  406562:	f7fe ffe3 	bl	40552c <__sfp_lock_release>
  406566:	4630      	mov	r0, r6
  406568:	bd70      	pop	{r4, r5, r6, pc}
  40656a:	f7fe ffad 	bl	4054c8 <__sinit>
  40656e:	e7bf      	b.n	4064f0 <_fclose_r+0x10>
  406570:	6921      	ldr	r1, [r4, #16]
  406572:	4628      	mov	r0, r5
  406574:	f7ff f8ce 	bl	405714 <_free_r>
  406578:	e7d7      	b.n	40652a <_fclose_r+0x4a>
  40657a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40657c:	f7ff fb66 	bl	405c4c <__retarget_lock_release_recursive>
  406580:	e7ec      	b.n	40655c <_fclose_r+0x7c>
  406582:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406584:	f7ff fb60 	bl	405c48 <__retarget_lock_acquire_recursive>
  406588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40658c:	2b00      	cmp	r3, #0
  40658e:	d1bb      	bne.n	406508 <_fclose_r+0x28>
  406590:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406592:	f016 0601 	ands.w	r6, r6, #1
  406596:	d1b1      	bne.n	4064fc <_fclose_r+0x1c>
  406598:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40659a:	f7ff fb57 	bl	405c4c <__retarget_lock_release_recursive>
  40659e:	4630      	mov	r0, r6
  4065a0:	bd70      	pop	{r4, r5, r6, pc}
  4065a2:	bf00      	nop

004065a4 <_fstat_r>:
  4065a4:	b538      	push	{r3, r4, r5, lr}
  4065a6:	460b      	mov	r3, r1
  4065a8:	4c07      	ldr	r4, [pc, #28]	; (4065c8 <_fstat_r+0x24>)
  4065aa:	4605      	mov	r5, r0
  4065ac:	4611      	mov	r1, r2
  4065ae:	4618      	mov	r0, r3
  4065b0:	2300      	movs	r3, #0
  4065b2:	6023      	str	r3, [r4, #0]
  4065b4:	f7fa fd57 	bl	401066 <_fstat>
  4065b8:	1c43      	adds	r3, r0, #1
  4065ba:	d000      	beq.n	4065be <_fstat_r+0x1a>
  4065bc:	bd38      	pop	{r3, r4, r5, pc}
  4065be:	6823      	ldr	r3, [r4, #0]
  4065c0:	2b00      	cmp	r3, #0
  4065c2:	d0fb      	beq.n	4065bc <_fstat_r+0x18>
  4065c4:	602b      	str	r3, [r5, #0]
  4065c6:	bd38      	pop	{r3, r4, r5, pc}
  4065c8:	2040c52c 	.word	0x2040c52c

004065cc <_isatty_r>:
  4065cc:	b538      	push	{r3, r4, r5, lr}
  4065ce:	4c07      	ldr	r4, [pc, #28]	; (4065ec <_isatty_r+0x20>)
  4065d0:	2300      	movs	r3, #0
  4065d2:	4605      	mov	r5, r0
  4065d4:	4608      	mov	r0, r1
  4065d6:	6023      	str	r3, [r4, #0]
  4065d8:	f7fa fd4a 	bl	401070 <_isatty>
  4065dc:	1c43      	adds	r3, r0, #1
  4065de:	d000      	beq.n	4065e2 <_isatty_r+0x16>
  4065e0:	bd38      	pop	{r3, r4, r5, pc}
  4065e2:	6823      	ldr	r3, [r4, #0]
  4065e4:	2b00      	cmp	r3, #0
  4065e6:	d0fb      	beq.n	4065e0 <_isatty_r+0x14>
  4065e8:	602b      	str	r3, [r5, #0]
  4065ea:	bd38      	pop	{r3, r4, r5, pc}
  4065ec:	2040c52c 	.word	0x2040c52c

004065f0 <_lseek_r>:
  4065f0:	b570      	push	{r4, r5, r6, lr}
  4065f2:	460d      	mov	r5, r1
  4065f4:	4c08      	ldr	r4, [pc, #32]	; (406618 <_lseek_r+0x28>)
  4065f6:	4611      	mov	r1, r2
  4065f8:	4606      	mov	r6, r0
  4065fa:	461a      	mov	r2, r3
  4065fc:	4628      	mov	r0, r5
  4065fe:	2300      	movs	r3, #0
  406600:	6023      	str	r3, [r4, #0]
  406602:	f7fa fd37 	bl	401074 <_lseek>
  406606:	1c43      	adds	r3, r0, #1
  406608:	d000      	beq.n	40660c <_lseek_r+0x1c>
  40660a:	bd70      	pop	{r4, r5, r6, pc}
  40660c:	6823      	ldr	r3, [r4, #0]
  40660e:	2b00      	cmp	r3, #0
  406610:	d0fb      	beq.n	40660a <_lseek_r+0x1a>
  406612:	6033      	str	r3, [r6, #0]
  406614:	bd70      	pop	{r4, r5, r6, pc}
  406616:	bf00      	nop
  406618:	2040c52c 	.word	0x2040c52c

0040661c <_read_r>:
  40661c:	b570      	push	{r4, r5, r6, lr}
  40661e:	460d      	mov	r5, r1
  406620:	4c08      	ldr	r4, [pc, #32]	; (406644 <_read_r+0x28>)
  406622:	4611      	mov	r1, r2
  406624:	4606      	mov	r6, r0
  406626:	461a      	mov	r2, r3
  406628:	4628      	mov	r0, r5
  40662a:	2300      	movs	r3, #0
  40662c:	6023      	str	r3, [r4, #0]
  40662e:	f7f9 fe77 	bl	400320 <_read>
  406632:	1c43      	adds	r3, r0, #1
  406634:	d000      	beq.n	406638 <_read_r+0x1c>
  406636:	bd70      	pop	{r4, r5, r6, pc}
  406638:	6823      	ldr	r3, [r4, #0]
  40663a:	2b00      	cmp	r3, #0
  40663c:	d0fb      	beq.n	406636 <_read_r+0x1a>
  40663e:	6033      	str	r3, [r6, #0]
  406640:	bd70      	pop	{r4, r5, r6, pc}
  406642:	bf00      	nop
  406644:	2040c52c 	.word	0x2040c52c

00406648 <__aeabi_uldivmod>:
  406648:	b953      	cbnz	r3, 406660 <__aeabi_uldivmod+0x18>
  40664a:	b94a      	cbnz	r2, 406660 <__aeabi_uldivmod+0x18>
  40664c:	2900      	cmp	r1, #0
  40664e:	bf08      	it	eq
  406650:	2800      	cmpeq	r0, #0
  406652:	bf1c      	itt	ne
  406654:	f04f 31ff 	movne.w	r1, #4294967295
  406658:	f04f 30ff 	movne.w	r0, #4294967295
  40665c:	f000 b97a 	b.w	406954 <__aeabi_idiv0>
  406660:	f1ad 0c08 	sub.w	ip, sp, #8
  406664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406668:	f000 f806 	bl	406678 <__udivmoddi4>
  40666c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406674:	b004      	add	sp, #16
  406676:	4770      	bx	lr

00406678 <__udivmoddi4>:
  406678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40667c:	468c      	mov	ip, r1
  40667e:	460d      	mov	r5, r1
  406680:	4604      	mov	r4, r0
  406682:	9e08      	ldr	r6, [sp, #32]
  406684:	2b00      	cmp	r3, #0
  406686:	d151      	bne.n	40672c <__udivmoddi4+0xb4>
  406688:	428a      	cmp	r2, r1
  40668a:	4617      	mov	r7, r2
  40668c:	d96d      	bls.n	40676a <__udivmoddi4+0xf2>
  40668e:	fab2 fe82 	clz	lr, r2
  406692:	f1be 0f00 	cmp.w	lr, #0
  406696:	d00b      	beq.n	4066b0 <__udivmoddi4+0x38>
  406698:	f1ce 0c20 	rsb	ip, lr, #32
  40669c:	fa01 f50e 	lsl.w	r5, r1, lr
  4066a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4066a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4066a8:	ea4c 0c05 	orr.w	ip, ip, r5
  4066ac:	fa00 f40e 	lsl.w	r4, r0, lr
  4066b0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4066b4:	0c25      	lsrs	r5, r4, #16
  4066b6:	fbbc f8fa 	udiv	r8, ip, sl
  4066ba:	fa1f f987 	uxth.w	r9, r7
  4066be:	fb0a cc18 	mls	ip, sl, r8, ip
  4066c2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4066c6:	fb08 f309 	mul.w	r3, r8, r9
  4066ca:	42ab      	cmp	r3, r5
  4066cc:	d90a      	bls.n	4066e4 <__udivmoddi4+0x6c>
  4066ce:	19ed      	adds	r5, r5, r7
  4066d0:	f108 32ff 	add.w	r2, r8, #4294967295
  4066d4:	f080 8123 	bcs.w	40691e <__udivmoddi4+0x2a6>
  4066d8:	42ab      	cmp	r3, r5
  4066da:	f240 8120 	bls.w	40691e <__udivmoddi4+0x2a6>
  4066de:	f1a8 0802 	sub.w	r8, r8, #2
  4066e2:	443d      	add	r5, r7
  4066e4:	1aed      	subs	r5, r5, r3
  4066e6:	b2a4      	uxth	r4, r4
  4066e8:	fbb5 f0fa 	udiv	r0, r5, sl
  4066ec:	fb0a 5510 	mls	r5, sl, r0, r5
  4066f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4066f4:	fb00 f909 	mul.w	r9, r0, r9
  4066f8:	45a1      	cmp	r9, r4
  4066fa:	d909      	bls.n	406710 <__udivmoddi4+0x98>
  4066fc:	19e4      	adds	r4, r4, r7
  4066fe:	f100 33ff 	add.w	r3, r0, #4294967295
  406702:	f080 810a 	bcs.w	40691a <__udivmoddi4+0x2a2>
  406706:	45a1      	cmp	r9, r4
  406708:	f240 8107 	bls.w	40691a <__udivmoddi4+0x2a2>
  40670c:	3802      	subs	r0, #2
  40670e:	443c      	add	r4, r7
  406710:	eba4 0409 	sub.w	r4, r4, r9
  406714:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406718:	2100      	movs	r1, #0
  40671a:	2e00      	cmp	r6, #0
  40671c:	d061      	beq.n	4067e2 <__udivmoddi4+0x16a>
  40671e:	fa24 f40e 	lsr.w	r4, r4, lr
  406722:	2300      	movs	r3, #0
  406724:	6034      	str	r4, [r6, #0]
  406726:	6073      	str	r3, [r6, #4]
  406728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40672c:	428b      	cmp	r3, r1
  40672e:	d907      	bls.n	406740 <__udivmoddi4+0xc8>
  406730:	2e00      	cmp	r6, #0
  406732:	d054      	beq.n	4067de <__udivmoddi4+0x166>
  406734:	2100      	movs	r1, #0
  406736:	e886 0021 	stmia.w	r6, {r0, r5}
  40673a:	4608      	mov	r0, r1
  40673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406740:	fab3 f183 	clz	r1, r3
  406744:	2900      	cmp	r1, #0
  406746:	f040 808e 	bne.w	406866 <__udivmoddi4+0x1ee>
  40674a:	42ab      	cmp	r3, r5
  40674c:	d302      	bcc.n	406754 <__udivmoddi4+0xdc>
  40674e:	4282      	cmp	r2, r0
  406750:	f200 80fa 	bhi.w	406948 <__udivmoddi4+0x2d0>
  406754:	1a84      	subs	r4, r0, r2
  406756:	eb65 0503 	sbc.w	r5, r5, r3
  40675a:	2001      	movs	r0, #1
  40675c:	46ac      	mov	ip, r5
  40675e:	2e00      	cmp	r6, #0
  406760:	d03f      	beq.n	4067e2 <__udivmoddi4+0x16a>
  406762:	e886 1010 	stmia.w	r6, {r4, ip}
  406766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40676a:	b912      	cbnz	r2, 406772 <__udivmoddi4+0xfa>
  40676c:	2701      	movs	r7, #1
  40676e:	fbb7 f7f2 	udiv	r7, r7, r2
  406772:	fab7 fe87 	clz	lr, r7
  406776:	f1be 0f00 	cmp.w	lr, #0
  40677a:	d134      	bne.n	4067e6 <__udivmoddi4+0x16e>
  40677c:	1beb      	subs	r3, r5, r7
  40677e:	0c3a      	lsrs	r2, r7, #16
  406780:	fa1f fc87 	uxth.w	ip, r7
  406784:	2101      	movs	r1, #1
  406786:	fbb3 f8f2 	udiv	r8, r3, r2
  40678a:	0c25      	lsrs	r5, r4, #16
  40678c:	fb02 3318 	mls	r3, r2, r8, r3
  406790:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406794:	fb0c f308 	mul.w	r3, ip, r8
  406798:	42ab      	cmp	r3, r5
  40679a:	d907      	bls.n	4067ac <__udivmoddi4+0x134>
  40679c:	19ed      	adds	r5, r5, r7
  40679e:	f108 30ff 	add.w	r0, r8, #4294967295
  4067a2:	d202      	bcs.n	4067aa <__udivmoddi4+0x132>
  4067a4:	42ab      	cmp	r3, r5
  4067a6:	f200 80d1 	bhi.w	40694c <__udivmoddi4+0x2d4>
  4067aa:	4680      	mov	r8, r0
  4067ac:	1aed      	subs	r5, r5, r3
  4067ae:	b2a3      	uxth	r3, r4
  4067b0:	fbb5 f0f2 	udiv	r0, r5, r2
  4067b4:	fb02 5510 	mls	r5, r2, r0, r5
  4067b8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4067bc:	fb0c fc00 	mul.w	ip, ip, r0
  4067c0:	45a4      	cmp	ip, r4
  4067c2:	d907      	bls.n	4067d4 <__udivmoddi4+0x15c>
  4067c4:	19e4      	adds	r4, r4, r7
  4067c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4067ca:	d202      	bcs.n	4067d2 <__udivmoddi4+0x15a>
  4067cc:	45a4      	cmp	ip, r4
  4067ce:	f200 80b8 	bhi.w	406942 <__udivmoddi4+0x2ca>
  4067d2:	4618      	mov	r0, r3
  4067d4:	eba4 040c 	sub.w	r4, r4, ip
  4067d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4067dc:	e79d      	b.n	40671a <__udivmoddi4+0xa2>
  4067de:	4631      	mov	r1, r6
  4067e0:	4630      	mov	r0, r6
  4067e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067e6:	f1ce 0420 	rsb	r4, lr, #32
  4067ea:	fa05 f30e 	lsl.w	r3, r5, lr
  4067ee:	fa07 f70e 	lsl.w	r7, r7, lr
  4067f2:	fa20 f804 	lsr.w	r8, r0, r4
  4067f6:	0c3a      	lsrs	r2, r7, #16
  4067f8:	fa25 f404 	lsr.w	r4, r5, r4
  4067fc:	ea48 0803 	orr.w	r8, r8, r3
  406800:	fbb4 f1f2 	udiv	r1, r4, r2
  406804:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406808:	fb02 4411 	mls	r4, r2, r1, r4
  40680c:	fa1f fc87 	uxth.w	ip, r7
  406810:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406814:	fb01 f30c 	mul.w	r3, r1, ip
  406818:	42ab      	cmp	r3, r5
  40681a:	fa00 f40e 	lsl.w	r4, r0, lr
  40681e:	d909      	bls.n	406834 <__udivmoddi4+0x1bc>
  406820:	19ed      	adds	r5, r5, r7
  406822:	f101 30ff 	add.w	r0, r1, #4294967295
  406826:	f080 808a 	bcs.w	40693e <__udivmoddi4+0x2c6>
  40682a:	42ab      	cmp	r3, r5
  40682c:	f240 8087 	bls.w	40693e <__udivmoddi4+0x2c6>
  406830:	3902      	subs	r1, #2
  406832:	443d      	add	r5, r7
  406834:	1aeb      	subs	r3, r5, r3
  406836:	fa1f f588 	uxth.w	r5, r8
  40683a:	fbb3 f0f2 	udiv	r0, r3, r2
  40683e:	fb02 3310 	mls	r3, r2, r0, r3
  406842:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406846:	fb00 f30c 	mul.w	r3, r0, ip
  40684a:	42ab      	cmp	r3, r5
  40684c:	d907      	bls.n	40685e <__udivmoddi4+0x1e6>
  40684e:	19ed      	adds	r5, r5, r7
  406850:	f100 38ff 	add.w	r8, r0, #4294967295
  406854:	d26f      	bcs.n	406936 <__udivmoddi4+0x2be>
  406856:	42ab      	cmp	r3, r5
  406858:	d96d      	bls.n	406936 <__udivmoddi4+0x2be>
  40685a:	3802      	subs	r0, #2
  40685c:	443d      	add	r5, r7
  40685e:	1aeb      	subs	r3, r5, r3
  406860:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406864:	e78f      	b.n	406786 <__udivmoddi4+0x10e>
  406866:	f1c1 0720 	rsb	r7, r1, #32
  40686a:	fa22 f807 	lsr.w	r8, r2, r7
  40686e:	408b      	lsls	r3, r1
  406870:	fa05 f401 	lsl.w	r4, r5, r1
  406874:	ea48 0303 	orr.w	r3, r8, r3
  406878:	fa20 fe07 	lsr.w	lr, r0, r7
  40687c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406880:	40fd      	lsrs	r5, r7
  406882:	ea4e 0e04 	orr.w	lr, lr, r4
  406886:	fbb5 f9fc 	udiv	r9, r5, ip
  40688a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40688e:	fb0c 5519 	mls	r5, ip, r9, r5
  406892:	fa1f f883 	uxth.w	r8, r3
  406896:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40689a:	fb09 f408 	mul.w	r4, r9, r8
  40689e:	42ac      	cmp	r4, r5
  4068a0:	fa02 f201 	lsl.w	r2, r2, r1
  4068a4:	fa00 fa01 	lsl.w	sl, r0, r1
  4068a8:	d908      	bls.n	4068bc <__udivmoddi4+0x244>
  4068aa:	18ed      	adds	r5, r5, r3
  4068ac:	f109 30ff 	add.w	r0, r9, #4294967295
  4068b0:	d243      	bcs.n	40693a <__udivmoddi4+0x2c2>
  4068b2:	42ac      	cmp	r4, r5
  4068b4:	d941      	bls.n	40693a <__udivmoddi4+0x2c2>
  4068b6:	f1a9 0902 	sub.w	r9, r9, #2
  4068ba:	441d      	add	r5, r3
  4068bc:	1b2d      	subs	r5, r5, r4
  4068be:	fa1f fe8e 	uxth.w	lr, lr
  4068c2:	fbb5 f0fc 	udiv	r0, r5, ip
  4068c6:	fb0c 5510 	mls	r5, ip, r0, r5
  4068ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4068ce:	fb00 f808 	mul.w	r8, r0, r8
  4068d2:	45a0      	cmp	r8, r4
  4068d4:	d907      	bls.n	4068e6 <__udivmoddi4+0x26e>
  4068d6:	18e4      	adds	r4, r4, r3
  4068d8:	f100 35ff 	add.w	r5, r0, #4294967295
  4068dc:	d229      	bcs.n	406932 <__udivmoddi4+0x2ba>
  4068de:	45a0      	cmp	r8, r4
  4068e0:	d927      	bls.n	406932 <__udivmoddi4+0x2ba>
  4068e2:	3802      	subs	r0, #2
  4068e4:	441c      	add	r4, r3
  4068e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4068ea:	eba4 0408 	sub.w	r4, r4, r8
  4068ee:	fba0 8902 	umull	r8, r9, r0, r2
  4068f2:	454c      	cmp	r4, r9
  4068f4:	46c6      	mov	lr, r8
  4068f6:	464d      	mov	r5, r9
  4068f8:	d315      	bcc.n	406926 <__udivmoddi4+0x2ae>
  4068fa:	d012      	beq.n	406922 <__udivmoddi4+0x2aa>
  4068fc:	b156      	cbz	r6, 406914 <__udivmoddi4+0x29c>
  4068fe:	ebba 030e 	subs.w	r3, sl, lr
  406902:	eb64 0405 	sbc.w	r4, r4, r5
  406906:	fa04 f707 	lsl.w	r7, r4, r7
  40690a:	40cb      	lsrs	r3, r1
  40690c:	431f      	orrs	r7, r3
  40690e:	40cc      	lsrs	r4, r1
  406910:	6037      	str	r7, [r6, #0]
  406912:	6074      	str	r4, [r6, #4]
  406914:	2100      	movs	r1, #0
  406916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40691a:	4618      	mov	r0, r3
  40691c:	e6f8      	b.n	406710 <__udivmoddi4+0x98>
  40691e:	4690      	mov	r8, r2
  406920:	e6e0      	b.n	4066e4 <__udivmoddi4+0x6c>
  406922:	45c2      	cmp	sl, r8
  406924:	d2ea      	bcs.n	4068fc <__udivmoddi4+0x284>
  406926:	ebb8 0e02 	subs.w	lr, r8, r2
  40692a:	eb69 0503 	sbc.w	r5, r9, r3
  40692e:	3801      	subs	r0, #1
  406930:	e7e4      	b.n	4068fc <__udivmoddi4+0x284>
  406932:	4628      	mov	r0, r5
  406934:	e7d7      	b.n	4068e6 <__udivmoddi4+0x26e>
  406936:	4640      	mov	r0, r8
  406938:	e791      	b.n	40685e <__udivmoddi4+0x1e6>
  40693a:	4681      	mov	r9, r0
  40693c:	e7be      	b.n	4068bc <__udivmoddi4+0x244>
  40693e:	4601      	mov	r1, r0
  406940:	e778      	b.n	406834 <__udivmoddi4+0x1bc>
  406942:	3802      	subs	r0, #2
  406944:	443c      	add	r4, r7
  406946:	e745      	b.n	4067d4 <__udivmoddi4+0x15c>
  406948:	4608      	mov	r0, r1
  40694a:	e708      	b.n	40675e <__udivmoddi4+0xe6>
  40694c:	f1a8 0802 	sub.w	r8, r8, #2
  406950:	443d      	add	r5, r7
  406952:	e72b      	b.n	4067ac <__udivmoddi4+0x134>

00406954 <__aeabi_idiv0>:
  406954:	4770      	bx	lr
  406956:	bf00      	nop
  406958:	454c4449 	.word	0x454c4449
  40695c:	00000000 	.word	0x00000000
  406960:	51726d54 	.word	0x51726d54
  406964:	00000000 	.word	0x00000000
  406968:	20726d54 	.word	0x20726d54
  40696c:	00637653 	.word	0x00637653
  406970:	00005441 	.word	0x00005441
  406974:	000a5441 	.word	0x000a5441
  406978:	4e2b5441 	.word	0x4e2b5441
  40697c:	42454d41 	.word	0x42454d41
  406980:	6e497261 	.word	0x6e497261
  406984:	786f4241 	.word	0x786f4241
  406988:	00000000 	.word	0x00000000
  40698c:	502b5441 	.word	0x502b5441
  406990:	30304e49 	.word	0x30304e49
  406994:	00003030 	.word	0x00003030
  406998:	626d6f42 	.word	0x626d6f42
  40699c:	00003120 	.word	0x00003120
  4069a0:	6c696146 	.word	0x6c696146
  4069a4:	74206465 	.word	0x74206465
  4069a8:	7263206f 	.word	0x7263206f
  4069ac:	65746165 	.word	0x65746165
  4069b0:	73657420 	.word	0x73657420
  4069b4:	4f422074 	.word	0x4f422074
  4069b8:	3120424d 	.word	0x3120424d
  4069bc:	73617420 	.word	0x73617420
  4069c0:	000a0d6b 	.word	0x000a0d6b
  4069c4:	626d6f42 	.word	0x626d6f42
  4069c8:	00003220 	.word	0x00003220
  4069cc:	626d6f42 	.word	0x626d6f42
  4069d0:	00003320 	.word	0x00003320
  4069d4:	626d6f42 	.word	0x626d6f42
  4069d8:	00003420 	.word	0x00003420
  4069dc:	626d6f42 	.word	0x626d6f42
  4069e0:	00003520 	.word	0x00003520
  4069e4:	626d6f42 	.word	0x626d6f42
  4069e8:	00003620 	.word	0x00003620
  4069ec:	00544c42 	.word	0x00544c42
  4069f0:	65756c42 	.word	0x65756c42
  4069f4:	746f6f74 	.word	0x746f6f74
  4069f8:	6e692068 	.word	0x6e692068
  4069fc:	61697469 	.word	0x61697469
  406a00:	697a696c 	.word	0x697a696c
  406a04:	0a20676e 	.word	0x0a20676e
  406a08:	00000000 	.word	0x00000000
  406a0c:	41474150 	.word	0x41474150
  406a10:	544e454d 	.word	0x544e454d
  406a14:	4552204f 	.word	0x4552204f
  406a18:	5a494c41 	.word	0x5a494c41
  406a1c:	0a4f4441 	.word	0x0a4f4441
  406a20:	00000000 	.word	0x00000000
  406a24:	63617473 	.word	0x63617473
  406a28:	766f206b 	.word	0x766f206b
  406a2c:	6c667265 	.word	0x6c667265
  406a30:	2520776f 	.word	0x2520776f
  406a34:	73252078 	.word	0x73252078
  406a38:	00000a0d 	.word	0x00000a0d

00406a3c <_global_impure_ptr>:
  406a3c:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  406a4c:	46454443 00000000 33323130 37363534     CDEF....01234567
  406a5c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406a6c:	0000296c                                l)..

00406a70 <blanks.7217>:
  406a70:	20202020 20202020 20202020 20202020                     

00406a80 <zeroes.7218>:
  406a80:	30303030 30303030 30303030 30303030     0000000000000000
  406a90:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406aa0 <_ctype_>:
  406aa0:	20202000 20202020 28282020 20282828     .         ((((( 
  406ab0:	20202020 20202020 20202020 20202020                     
  406ac0:	10108820 10101010 10101010 10101010      ...............
  406ad0:	04040410 04040404 10040404 10101010     ................
  406ae0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406af0:	01010101 01010101 01010101 10101010     ................
  406b00:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406b10:	02020202 02020202 02020202 10101010     ................
  406b20:	00000020 00000000 00000000 00000000      ...............
	...

00406ba4 <_init>:
  406ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406ba6:	bf00      	nop
  406ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406baa:	bc08      	pop	{r3}
  406bac:	469e      	mov	lr, r3
  406bae:	4770      	bx	lr

00406bb0 <__init_array_start>:
  406bb0:	004052b9 	.word	0x004052b9

00406bb4 <__frame_dummy_init_array_entry>:
  406bb4:	0040018d                                ..@.

00406bb8 <_fini>:
  406bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406bba:	bf00      	nop
  406bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406bbe:	bc08      	pop	{r3}
  406bc0:	469e      	mov	lr, r3
  406bc2:	4770      	bx	lr

00406bc4 <__fini_array_start>:
  406bc4:	00400169 	.word	0x00400169
